/* Minification failed. Returning unminified contents.
(15363,9-10): run-time error JS1010: Expected identifier: .
(15363,9-10): run-time error JS1195: Expected expression: .
(28134,13-14): run-time error JS1010: Expected identifier: .
(28134,13-14): run-time error JS1195: Expected expression: .
(28935,9-10): run-time error JS1010: Expected identifier: .
(28935,9-10): run-time error JS1195: Expected expression: .
(31361,15-16): run-time error JS1010: Expected identifier: .
(31361,15-16): run-time error JS1195: Expected expression: .
 */
/*!
 * jQuery JavaScript Library v1.11.0
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-01-23T21:02Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper window is present,
		// execute the factory and get jQuery
		// For environments that do not inherently posses a window with a document
		// (such as Node.js), expose a jQuery-making factory as module.exports
		// This accentuates the need for the creation of a real window
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//

var deletedIds = [];

var slice = deletedIds.slice;

var concat = deletedIds.concat;

var push = deletedIds.push;

var indexOf = deletedIds.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var trim = "".trim;

var support = {};



var
	version = "1.11.0",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return a 'clean' array
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return just the object
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: deletedIds.sort,
	splice: deletedIds.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		/* jshint eqeqeq: false */
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		return obj - parseFloat( obj ) >= 0;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	isPlainObject: function( obj ) {
		var key;

		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!hasOwn.call(obj, "constructor") &&
				!hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Support: IE<9
		// Handle iteration over inherited properties before own properties.
		if ( support.ownLast ) {
			for ( key in obj ) {
				return hasOwn.call( obj, key );
			}
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call(obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Use native String.trim function wherever possible
	trim: trim && !trim.call("\uFEFF\xA0") ?
		function( text ) {
			return text == null ?
				"" :
				trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( indexOf ) {
				return indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		while ( j < len ) {
			first[ i++ ] = second[ j++ ];
		}

		// Support: IE<9
		// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
		if ( len !== len ) {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: function() {
		return +( new Date() );
	},

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v1.10.16
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-01-13
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	compile,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( documentIsHTML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== strundefined && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare,
		doc = node ? node.ownerDocument || node : preferredDoc,
		parent = doc.defaultView;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsHTML = !isXML( doc );

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", function() {
				setDocument();
			}, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", function() {
				setDocument();
			});
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if getElementsByClassName can be trusted
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName ) && assert(function( div ) {
		div.innerHTML = "<div class='a'></div><div class='a i'></div>";

		// Support: Safari<4
		// Catch class over-caching
		div.firstChild.className = "i";
		// Support: Opera<10
		// Catch gEBCN failure to find non-leading classes
		return div.getElementsByClassName("i").length === 2;
	});

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select t=''><option selected=''></option></select>";

			// Support: IE8, Opera 10-12
			// Nothing should be selected when empty strings follow ^= or $= or *=
			if ( div.querySelectorAll("[t^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [elem] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] && match[4] !== undefined ) {
				match[2] = match[4];

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
				}
				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
}

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome<14
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) !== not;
	});
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		}));
};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			ret = [],
			self = this,
			len = self.length;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof rootjQuery.ready !== "undefined" ?
				rootjQuery.ready( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.extend({
	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

jQuery.fn.extend({
	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.unique(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				ret = jQuery.unique( ret );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				ret = ret.reverse();
			}
		}

		return this.pushStack( ret );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );

					} else if ( !(--remaining) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.trigger ) {
			jQuery( document ).trigger("ready").off("ready");
		}
	}
});

/**
 * Clean-up method for dom ready events
 */
function detach() {
	if ( document.addEventListener ) {
		document.removeEventListener( "DOMContentLoaded", completed, false );
		window.removeEventListener( "load", completed, false );

	} else {
		document.detachEvent( "onreadystatechange", completed );
		window.detachEvent( "onload", completed );
	}
}

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	// readyState === "complete" is good enough for us to call the dom ready in oldIE
	if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
		detach();
		jQuery.ready();
	}
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};


var strundefined = typeof undefined;



// Support: IE<9
// Iteration over object's inherited properties before its own
var i;
for ( i in jQuery( support ) ) {
	break;
}
support.ownLast = i !== "0";

// Note: most support tests are defined in their respective modules.
// false until the test is run
support.inlineBlockNeedsLayout = false;

jQuery(function() {
	// We need to execute this one support test ASAP because we need to know
	// if body.style.zoom needs to be set.

	var container, div,
		body = document.getElementsByTagName("body")[0];

	if ( !body ) {
		// Return for frameset docs that don't have a body
		return;
	}

	// Setup
	container = document.createElement( "div" );
	container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";

	div = document.createElement( "div" );
	body.appendChild( container ).appendChild( div );

	if ( typeof div.style.zoom !== strundefined ) {
		// Support: IE<8
		// Check if natively block-level elements act like inline-block
		// elements when setting their display to 'inline' and giving
		// them layout
		div.style.cssText = "border:0;margin:0;width:1px;padding:1px;display:inline;zoom:1";

		if ( (support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 )) ) {
			// Prevent IE 6 from affecting layout for positioned elements #11048
			// Prevent IE from shrinking the body in IE 7 mode #12869
			// Support: IE<8
			body.style.zoom = 1;
		}
	}

	body.removeChild( container );

	// Null elements to avoid leaks in IE
	container = div = null;
});




(function() {
	var div = document.createElement( "div" );

	// Execute the test only if not already executed in another module.
	if (support.deleteExpando == null) {
		// Support: IE<9
		support.deleteExpando = true;
		try {
			delete div.test;
		} catch( e ) {
			support.deleteExpando = false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
})();


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( elem ) {
	var noData = jQuery.noData[ (elem.nodeName + " ").toLowerCase() ],
		nodeType = +elem.nodeType || 1;

	// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
	return nodeType !== 1 && nodeType !== 9 ?
		false :

		// Nodes accept data unless otherwise specified; rejection can be conditional
		!noData || noData !== true && elem.getAttribute("classid") === noData;
};


var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}

function internalData( elem, name, data, pvt /* Internal Use Only */ ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var ret, thisCache,
		internalKey = jQuery.expando,

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string" ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		// Avoid exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( typeof name === "string" ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var thisCache, i,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split(" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			i = name.length;
			while ( i-- ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	/* jshint eqeqeq: false */
	} else if ( support.deleteExpando || cache != cache.window ) {
		/* jshint eqeqeq: true */
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery.extend({
	cache: {},

	// The following elements (space-suffixed to avoid Object.prototype collisions)
	// throw uncatchable exceptions if you attempt to set expando properties
	noData: {
		"applet ": true,
		"embed ": true,
		// ...but Flash objects (which have this classid) *can* handle expandos
		"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var i, name, data,
			elem = this[0],
			attrs = elem && elem.attributes;

		// Special expections of .data basically thwart jQuery.access,
		// so implement the relevant behavior ourselves

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {
						name = attrs[i].name;

						if ( name.indexOf("data-") === 0 ) {
							name = jQuery.camelCase( name.slice(5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		return arguments.length > 1 ?

			// Sets one value
			this.each(function() {
				jQuery.data( this, key, value );
			}) :

			// Gets one value
			// Try to fetch any internally stored data first
			elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});


jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
	};



// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		length = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < length; i++ ) {
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			length ? fn( elems[0], key ) : emptyGet;
};
var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	var fragment = document.createDocumentFragment(),
		div = document.createElement("div"),
		input = document.createElement("input");

	// Setup
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a>";

	// IE strips leading whitespace when .innerHTML is used
	support.leadingWhitespace = div.firstChild.nodeType === 3;

	// Make sure that tbody elements aren't automatically inserted
	// IE will insert them into empty tables
	support.tbody = !div.getElementsByTagName( "tbody" ).length;

	// Make sure that link elements get serialized correctly by innerHTML
	// This requires a wrapper element in IE
	support.htmlSerialize = !!div.getElementsByTagName( "link" ).length;

	// Makes sure cloning an html5 element does not cause problems
	// Where outerHTML is undefined, this still works
	support.html5Clone =
		document.createElement( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	input.type = "checkbox";
	input.checked = true;
	fragment.appendChild( input );
	support.appendChecked = input.checked;

	// Make sure textarea (and checkbox) defaultValue is properly cloned
	// Support: IE6-IE11+
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// #11217 - WebKit loses check when the name is after the checked attribute
	fragment.appendChild( div );
	div.innerHTML = "<input type='radio' checked='checked' name='t'/>";

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	support.noCloneEvent = true;
	if ( div.attachEvent ) {
		div.attachEvent( "onclick", function() {
			support.noCloneEvent = false;
		});

		div.cloneNode( true ).click();
	}

	// Execute the test only if not already executed in another module.
	if (support.deleteExpando == null) {
		// Support: IE<9
		support.deleteExpando = true;
		try {
			delete div.test;
		} catch( e ) {
			support.deleteExpando = false;
		}
	}

	// Null elements to avoid leaks in IE.
	fragment = div = input = null;
})();


(function() {
	var i, eventName,
		div = document.createElement( "div" );

	// Support: IE<9 (lack submit/change bubble), Firefox 23+ (lack focusin event)
	for ( i in { submit: true, change: true, focusin: true }) {
		eventName = "on" + i;

		if ( !(support[ i + "Bubbles" ] = eventName in window) ) {
			// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
			div.setAttribute( eventName, "t" );
			support[ i + "Bubbles" ] = div.attributes[ eventName ].expando === false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
})();


var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			/* jshint eqeqeq: false */
			for ( ; cur != this; cur = cur.parentNode || this ) {
				/* jshint eqeqeq: true */

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Even when returnValue equals to undefined Firefox will still show alert
				if ( event.result !== undefined ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === strundefined ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined && (
				// Support: IE < 9
				src.returnValue === false ||
				// Support: Android < 4.0
				src.getPreventDefault && src.getPreventDefault() ) ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				jQuery._data( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					jQuery._removeData( doc, fix );
				} else {
					jQuery._data( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});


function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== strundefined ? context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== strundefined ? context.querySelectorAll( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

// Support: IE<8
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (jQuery.find.attr( elem, "type" ) !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[1];
	} else {
		elem.removeAttribute("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!support.noCloneEvent || !support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = (rtagName.exec( elem ) || [ "", "" ])[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem.removeAttribute !== strundefined ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						deletedIds.push( id );
					}
				}
			}
		}
	}
});

jQuery.fn.extend({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map(function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ (rtagName.exec( value ) || [ "", "" ])[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			arg = this.parentNode;

			jQuery.cleanData( getAll( this ) );

			if ( arg ) {
				arg.replaceChild( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg.length || arg.nodeType) ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[0] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[i], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone(true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle ?

			// Use of this method is a temporary fix (more like optmization) until something better comes along,
			// since it was removed from specification and supported only in FF
			window.getDefaultComputedStyle( elem[ 0 ] ).display : jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}


(function() {
	var a, shrinkWrapBlocksVal,
		div = document.createElement( "div" ),
		divReset =
			"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;" +
			"display:block;padding:0;margin:0;border:0";

	// Setup
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName( "a" )[ 0 ];

	a.style.cssText = "float:left;opacity:.5";

	// Make sure that element opacity exists
	// (IE uses filter instead)
	// Use a regex to work around a WebKit issue. See #5145
	support.opacity = /^0.5/.test( a.style.opacity );

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support.cssFloat = !!a.style.cssFloat;

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Null elements to avoid leaks in IE.
	a = div = null;

	support.shrinkWrapBlocks = function() {
		var body, container, div, containerStyles;

		if ( shrinkWrapBlocksVal == null ) {
			body = document.getElementsByTagName( "body" )[ 0 ];
			if ( !body ) {
				// Test fired too early or in an unsupported environment, exit.
				return;
			}

			containerStyles = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px";
			container = document.createElement( "div" );
			div = document.createElement( "div" );

			body.appendChild( container ).appendChild( div );

			// Will be changed later if needed.
			shrinkWrapBlocksVal = false;

			if ( typeof div.style.zoom !== strundefined ) {
				// Support: IE6
				// Check if elements with layout shrink-wrap their children
				div.style.cssText = divReset + ";width:1px;padding:1px;zoom:1";
				div.innerHTML = "<div></div>";
				div.firstChild.style.width = "5px";
				shrinkWrapBlocksVal = div.offsetWidth !== 3;
			}

			body.removeChild( container );

			// Null elements to avoid leaks in IE.
			body = container = div = null;
		}

		return shrinkWrapBlocksVal;
	};

})();
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );



var getStyles, curCSS,
	rposition = /^(top|right|bottom|left)$/;

if ( window.getComputedStyle ) {
	getStyles = function( elem ) {
		return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
	};

	curCSS = function( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// getPropertyValue is only needed for .css('filter') in IE9, see #12537
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "";
	};
} else if ( document.documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, computed ) {
		var left, rs, rsLeft, ret,
			style = elem.style;

		computed = computed || getStyles( elem );
		ret = computed ? computed[ name ] : undefined;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "" || "auto";
	};
}




function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			var condition = conditionFn();

			if ( condition == null ) {
				// The test was not ready at this point; screw the hook this time
				// but check again when needed next time.
				return;
			}

			if ( condition ) {
				// Hook not needed (or it's not possible to use it due to missing dependency),
				// remove it.
				// Since there are no other hooks for marginRight, remove the whole object.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.

			return (this.get = hookFn).apply( this, arguments );
		}
	};
}


(function() {
	var a, reliableHiddenOffsetsVal, boxSizingVal, boxSizingReliableVal,
		pixelPositionVal, reliableMarginRightVal,
		div = document.createElement( "div" ),
		containerStyles = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px",
		divReset =
			"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;" +
			"display:block;padding:0;margin:0;border:0";

	// Setup
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName( "a" )[ 0 ];

	a.style.cssText = "float:left;opacity:.5";

	// Make sure that element opacity exists
	// (IE uses filter instead)
	// Use a regex to work around a WebKit issue. See #5145
	support.opacity = /^0.5/.test( a.style.opacity );

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support.cssFloat = !!a.style.cssFloat;

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Null elements to avoid leaks in IE.
	a = div = null;

	jQuery.extend(support, {
		reliableHiddenOffsets: function() {
			if ( reliableHiddenOffsetsVal != null ) {
				return reliableHiddenOffsetsVal;
			}

			var container, tds, isSupported,
				div = document.createElement( "div" ),
				body = document.getElementsByTagName( "body" )[ 0 ];

			if ( !body ) {
				// Return for frameset docs that don't have a body
				return;
			}

			// Setup
			div.setAttribute( "className", "t" );
			div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

			container = document.createElement( "div" );
			container.style.cssText = containerStyles;

			body.appendChild( container ).appendChild( div );

			// Support: IE8
			// Check if table cells still have offsetWidth/Height when they are set
			// to display:none and there are still other visible table cells in a
			// table row; if so, offsetWidth/Height are not reliable for use when
			// determining if an element has been hidden directly using
			// display:none (it is still safe to use offsets if a parent element is
			// hidden; don safety goggles and see bug #4512 for more information).
			div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
			tds = div.getElementsByTagName( "td" );
			tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
			isSupported = ( tds[ 0 ].offsetHeight === 0 );

			tds[ 0 ].style.display = "";
			tds[ 1 ].style.display = "none";

			// Support: IE8
			// Check if empty table cells still have offsetWidth/Height
			reliableHiddenOffsetsVal = isSupported && ( tds[ 0 ].offsetHeight === 0 );

			body.removeChild( container );

			// Null elements to avoid leaks in IE.
			div = body = null;

			return reliableHiddenOffsetsVal;
		},

		boxSizing: function() {
			if ( boxSizingVal == null ) {
				computeStyleTests();
			}
			return boxSizingVal;
		},

		boxSizingReliable: function() {
			if ( boxSizingReliableVal == null ) {
				computeStyleTests();
			}
			return boxSizingReliableVal;
		},

		pixelPosition: function() {
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return pixelPositionVal;
		},

		reliableMarginRight: function() {
			var body, container, div, marginDiv;

			// Use window.getComputedStyle because jsdom on node.js will break without it.
			if ( reliableMarginRightVal == null && window.getComputedStyle ) {
				body = document.getElementsByTagName( "body" )[ 0 ];
				if ( !body ) {
					// Test fired too early or in an unsupported environment, exit.
					return;
				}

				container = document.createElement( "div" );
				div = document.createElement( "div" );
				container.style.cssText = containerStyles;

				body.appendChild( container ).appendChild( div );

				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// Fails in WebKit before Feb 2011 nightlies
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				marginDiv = div.appendChild( document.createElement( "div" ) );
				marginDiv.style.cssText = div.style.cssText = divReset;
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";

				reliableMarginRightVal =
					!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );

				body.removeChild( container );
			}

			return reliableMarginRightVal;
		}
	});

	function computeStyleTests() {
		var container, div,
			body = document.getElementsByTagName( "body" )[ 0 ];

		if ( !body ) {
			// Test fired too early or in an unsupported environment, exit.
			return;
		}

		container = document.createElement( "div" );
		div = document.createElement( "div" );
		container.style.cssText = containerStyles;

		body.appendChild( container ).appendChild( div );

		div.style.cssText =
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
				"position:absolute;display:block;padding:1px;border:1px;width:4px;" +
				"margin-top:1%;top:1%";

		// Workaround failing boxSizing test due to offsetWidth returning wrong value
		// with some non-1 values of body zoom, ticket #13543
		jQuery.swap( body, body.style.zoom != null ? { zoom: 1 } : {}, function() {
			boxSizingVal = div.offsetWidth === 4;
		});

		// Will be changed later if needed.
		boxSizingReliableVal = true;
		pixelPositionVal = false;
		reliableMarginRightVal = true;

		// Use window.getComputedStyle because jsdom on node.js will break without it.
		if ( window.getComputedStyle ) {
			pixelPositionVal = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			boxSizingReliableVal =
				( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";
		}

		body.removeChild( container );

		// Null elements to avoid leaks in IE.
		div = body = null;
	}

})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var
		ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,

	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];


// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", defaultDisplay(elem.nodeName) );
			}
		} else {

			if ( !values[ index ] ) {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
				}
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = support.boxSizing() && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set. See: #7116
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

				// Support: IE
				// Swallow errors from 'invalid' CSS values (#5509)
				try {
					// Support: Chrome, Safari
					// Setting style to blank string required to delete "style: x !important;"
					style[ name ] = "";
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					support.boxSizing() && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			// Work around by temporarily setting element display to inline-block
			return jQuery.swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});

jQuery.fn.extend({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	}
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur()
				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// we're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, dDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = jQuery._data( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );
		dDisplay = defaultDisplay( elem.nodeName );
		if ( display === "none" ) {
			display = dDisplay;
		}
		if ( display === "inline" &&
				jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !support.inlineBlockNeedsLayout || dDisplay === "inline" ) {
				style.display = "inline-block";
			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !support.shrinkWrapBlocks() ) {
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = jQuery._data( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {
	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks.stop = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	var a, input, select, opt,
		div = document.createElement("div" );

	// Setup
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName("a")[ 0 ];

	// First batch of tests.
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px";

	// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
	support.getSetAttribute = div.className !== "t";

	// Get the style information from getAttribute
	// (IE uses .cssText instead)
	support.style = /top/.test( a.getAttribute("style") );

	// Make sure that URLs aren't manipulated
	// (IE normalizes it by default)
	support.hrefNormalized = a.getAttribute("href") === "/a";

	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
	support.checkOn = !!input.value;

	// Make sure that a selected-by-default option has a working selected property.
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
	support.optSelected = opt.selected;

	// Tests for enctype support on a form (#6743)
	support.enctype = !!document.createElement("form").enctype;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE8 only
	// Check if we can trust getAttribute("value")
	input = document.createElement( "input" );
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";

	// Null elements to avoid leaks in IE.
	a = input = select = opt = div = null;
})();


var rreturn = /\r/g;

jQuery.fn.extend({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					jQuery.text( elem );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) >= 0 ) {

						// Support: IE6
						// When new option element is added to select box we need to
						// force reflow of newly added node in order to workaround delay
						// of initialization properties
						try {
							option.selected = optionSet = true;

						} catch ( _ ) {

							// Will be executed only in IE6
							option.scrollHeight;
						}

					} else {
						option.selected = false;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}

				return options;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			// Support: Webkit
			// "" is returned instead of "on" if a value isn't specified
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});




var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = support.getSetAttribute,
	getSetInput = support.input;

jQuery.fn.extend({
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	}
});

jQuery.extend({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
						elem[ propName ] = false;
					// Support: IE<9
					// Also clear defaultChecked/defaultSelected (if appropriate)
					} else {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	}
});

// Hook for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};

// Retrieve booleans specially
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {

	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault.test( name ) ?
		function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		} :
		function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem[ jQuery.camelCase( "default-" + name ) ] ?
					name.toLowerCase() :
					null;
			}
		};
});

// fix oldIE attroperties
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = {
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					(ret = elem.ownerDocument.createAttribute( name ))
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			if ( name === "value" || value === elem.getAttribute( name ) ) {
				return value;
			}
		}
	};

	// Some attributes are constructed with empty-string values when not defined
	attrHandle.id = attrHandle.name = attrHandle.coords =
		function( elem, name, isXML ) {
			var ret;
			if ( !isXML ) {
				return (ret = elem.getAttributeNode( name )) && ret.value !== "" ?
					ret.value :
					null;
			}
		};

	// Fixing value retrieval on a button requires this module
	jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			if ( ret && ret.specified ) {
				return ret.value;
			}
		},
		set: nodeHook.set
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		};
	});
}

if ( !support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}




var rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend({
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	}
});

jQuery.extend({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						-1;
			}
		}
	}
});

// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !support.hrefNormalized ) {
	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each([ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	});
}

// Support: Safari, IE9+
// mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});

// IE6/7 call enctype encoding
if ( !support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery.trim( cur ) : "";
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});


var nonce = jQuery.now();

var rquery = (/\?/);



var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

jQuery.parseJSON = function( data ) {
	// Attempt to parse using the native JSON parser first
	if ( window.JSON && window.JSON.parse ) {
		// Support: Android 2.3
		// Workaround failure to string-cast null input
		return window.JSON.parse( data + "" );
	}

	var requireNonComma,
		depth = null,
		str = jQuery.trim( data + "" );

	// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
	// after removing valid tokens
	return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {

		// Force termination if we see a misplaced comma
		if ( requireNonComma && comma ) {
			depth = 0;
		}

		// Perform no more replacements after returning to outermost depth
		if ( depth === 0 ) {
			return token;
		}

		// Commas must not follow "[", "{", or ","
		requireNonComma = open || comma;

		// Determine new depth
		// array/object open ("[" or "{"): depth += true - false (increment)
		// array/object close ("]" or "}"): depth += false - true (decrement)
		// other cases ("," or primitive): depth += true - true (numeric cast)
		depth += !close - !open;

		// Remove this token
		return "";
	}) ) ?
		( Function( "return " + str ) )() :
		jQuery.error( "Invalid JSON: " + data );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	try {
		if ( window.DOMParser ) { // Standard
			tmp = new DOMParser();
			xml = tmp.parseFromString( data, "text/xml" );
		} else { // IE
			xml = new ActiveXObject( "Microsoft.XMLDOM" );
			xml.async = "false";
			xml.loadXML( data );
		}
	} catch( e ) {
		xml = undefined;
	}
	if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	// Document location
	ajaxLocParts,
	ajaxLocation,

	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType.charAt( 0 ) === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
});


jQuery._evalUrl = function( url ) {
	return jQuery.ajax({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery.fn.extend({
	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});


jQuery.expr.filters.hidden = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
		(!support.reliableHiddenOffsets() &&
			((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
};

jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function() {
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});


// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?
	// Support: IE6+
	function() {

		// XHR cannot access local files, always use ActiveX for that case
		return !this.isLocal &&

			// Support: IE7-8
			// oldIE XHR does not support non-RFC2616 methods (#13240)
			// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
			// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
			// Although this check for six methods instead of eight
			// since IE also does not support "trace" and "connect"
			/^(get|post|head|put|delete|options)$/i.test( this.type ) &&

			createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

var xhrId = 0,
	xhrCallbacks = {},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE<10
// Open requests must be manually aborted on unload (#5280)
if ( window.ActiveXObject ) {
	jQuery( window ).on( "unload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	});
}

// Determine support properties
support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport(function( options ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !options.crossDomain || support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr(),
						id = ++xhrId;

					// Open the socket
					xhr.open( options.type, options.url, options.async, options.username, options.password );

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						// Support: IE<9
						// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
						// request header to a null-value.
						//
						// To keep consistent with other XHR implementations, cast the value
						// to string and ignore `undefined`.
						if ( headers[ i ] !== undefined ) {
							xhr.setRequestHeader( i, headers[ i ] + "" );
						}
					}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( options.hasContent && options.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, statusText, responses;

						// Was never called and is aborted or complete
						if ( callback && ( isAbort || xhr.readyState === 4 ) ) {
							// Clean up
							delete xhrCallbacks[ id ];
							callback = undefined;
							xhr.onreadystatechange = jQuery.noop;

							// Abort manually if needed
							if ( isAbort ) {
								if ( xhr.readyState !== 4 ) {
									xhr.abort();
								}
							} else {
								responses = {};
								status = xhr.status;

								// Support: IE<10
								// Accessing binary-data responseText throws an exception
								// (#11426)
								if ( typeof xhr.responseText === "string" ) {
									responses.text = xhr.responseText;
								}

								// Firefox throws an exception when accessing
								// statusText for faulty cross-domain requests
								try {
									statusText = xhr.statusText;
								} catch( e ) {
									// We normalize with Webkit giving an empty statusText
									statusText = "";
								}

								// Filter status for non standard behaviors

								// If the request is local and we have data: assume a success
								// (success with no data won't get notified, that's the best we
								// can do given current implementations)
								if ( !status && options.isLocal && !options.crossDomain ) {
									status = responses.text ? 200 : 404;
								// IE - #1450: sometimes returns 1223 when it should be 204
								} else if ( status === 1223 ) {
									status = 204;
								}
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, xhr.getAllResponseHeaders() );
						}
					};

					if ( !options.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						// Add to the list of active xhr callbacks
						xhr.onreadystatechange = xhrCallbacks[ id ] = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch( e ) {}
}




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery("head")[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement("script");

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[1] ) ];
	}

	parsed = jQuery.buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = url.slice( off, url.length );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep(jQuery.timers, function( fn ) {
		return elem === fn.elem;
	}).length;
};





var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			jQuery.inArray("auto", [ curCSSTop, curCSSLeft ] ) > -1;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend({
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}

		var docElem, win,
			box = { top: 0, left: 0 },
			elem = this[ 0 ],
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// If we don't have gBCR, just use 0,0 rather than error
		// BlackBerry 5, iOS 3 (original iPhone)
		if ( typeof elem.getBoundingClientRect !== strundefined ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
			left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// getComputedStyle returns percent when specified for top/left/bottom/right
// rather than make the css module depend on the offset module, we just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// if curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.
if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	});
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;

}));
;
/*!
 * Bootstrap v3.3.7 (http://getbootstrap.com)
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */

/*!
 * Generated using the Bootstrap Customizer (http://getbootstrap.com/customize/?id=d1fa72aec7aec134567cbab5d6986c90)
 * Config saved to config.json and https://gist.github.com/d1fa72aec7aec134567cbab5d6986c90
 */
if (typeof jQuery === 'undefined') {
  throw new Error('Bootstrap\'s JavaScript requires jQuery')
}
+function ($) {
  'use strict';
  var version = $.fn.jquery.split(' ')[0].split('.')
  if ((version[0] < 2 && version[1] < 9) || (version[0] == 1 && version[1] == 9 && version[2] < 1) || (version[0] > 3)) {
    throw new Error('Bootstrap\'s JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4')
  }
}(jQuery);

/* ========================================================================
 * Bootstrap: collapse.js v3.3.7
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

/* jshint latedef: false */

+function ($) {
  'use strict';

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function (element, options) {
    this.$element      = $(element)
    this.options       = $.extend({}, Collapse.DEFAULTS, options)
    this.$trigger      = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
                           '[data-toggle="collapse"][data-target="#' + element.id + '"]')
    this.transitioning = null

    if (this.options.parent) {
      this.$parent = this.getParent()
    } else {
      this.addAriaAndCollapsedClass(this.$element, this.$trigger)
    }

    if (this.options.toggle) this.toggle()
  }

  Collapse.VERSION  = '3.3.7'

  Collapse.TRANSITION_DURATION = 350

  Collapse.DEFAULTS = {
    toggle: true
  }

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width')
    return hasWidth ? 'width' : 'height'
  }

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return

    var activesData
    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')

    if (actives && actives.length) {
      activesData = actives.data('bs.collapse')
      if (activesData && activesData.transitioning) return
    }

    var startEvent = $.Event('show.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    if (actives && actives.length) {
      Plugin.call(actives, 'hide')
      activesData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension()

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')[dimension](0)
      .attr('aria-expanded', true)

    this.$trigger
      .removeClass('collapsed')
      .attr('aria-expanded', true)

    this.transitioning = 1

    var complete = function () {
      this.$element
        .removeClass('collapsing')
        .addClass('collapse in')[dimension]('')
      this.transitioning = 0
      this.$element
        .trigger('shown.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

    this.$element
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
  }

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return

    var startEvent = $.Event('hide.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var dimension = this.dimension()

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight

    this.$element
      .addClass('collapsing')
      .removeClass('collapse in')
      .attr('aria-expanded', false)

    this.$trigger
      .addClass('collapsed')
      .attr('aria-expanded', false)

    this.transitioning = 1

    var complete = function () {
      this.transitioning = 0
      this.$element
        .removeClass('collapsing')
        .addClass('collapse')
        .trigger('hidden.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    this.$element
      [dimension](0)
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)
  }

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']()
  }

  Collapse.prototype.getParent = function () {
    return $(this.options.parent)
      .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
      .each($.proxy(function (i, element) {
        var $element = $(element)
        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
      }, this))
      .end()
  }

  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
    var isOpen = $element.hasClass('in')

    $element.attr('aria-expanded', isOpen)
    $trigger
      .toggleClass('collapsed', !isOpen)
      .attr('aria-expanded', isOpen)
  }

  function getTargetFromTrigger($trigger) {
    var href
    var target = $trigger.attr('data-target')
      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7

    return $(target)
  }


  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.collapse')
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false
      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.collapse

  $.fn.collapse             = Plugin
  $.fn.collapse.Constructor = Collapse


  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var $this   = $(this)

    if (!$this.attr('data-target')) e.preventDefault()

    var $target = getTargetFromTrigger($this)
    var data    = $target.data('bs.collapse')
    var option  = data ? 'toggle' : $this.data()

    Plugin.call($target, option)
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: transition.js v3.3.7
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      WebkitTransition : 'webkitTransitionEnd',
      MozTransition    : 'transitionend',
      OTransition      : 'oTransitionEnd otransitionend',
      transition       : 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }

    return false // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false
    var $el = this
    $(this).one('bsTransitionEnd', function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()

    if (!$.support.transition) return

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function (e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
      }
    }
  })

}(jQuery);
;
/**
 * BootstrapValidator (http://bootstrapvalidator.com)
 *
 * The best jQuery plugin to validate form fields. Designed to use with Bootstrap 3
 *
 * @version     v0.4.5
 * @author      https://twitter.com/nghuuphuoc
 * @copyright   (c) 2013 - 2014 Nguyen Huu Phuoc
 * @license     MIT
 */

(function($) {
    var BootstrapValidator = function(form, options) {
        this.$form   = $(form);
        this.options = $.extend({}, BootstrapValidator.DEFAULT_OPTIONS, options);

        this.$invalidField = null;  // First invalid field
        this.$submitButton = null;  // The submit button which is clicked to submit form

        // Validating status
        this.STATUS_NOT_VALIDATED = 'NOT_VALIDATED';
        this.STATUS_VALIDATING    = 'VALIDATING';
        this.STATUS_INVALID       = 'INVALID';
        this.STATUS_VALID         = 'VALID';

        // Determine the event that is fired when user change the field value
        // Most modern browsers supports input event except IE 7, 8.
        // IE 9 supports input event but the event is still not fired if I press the backspace key.
        // Get IE version
        // https://gist.github.com/padolsey/527683/#comment-7595
        var ieVersion = (function() {
            var v = 3, div = document.createElement('div'), a = div.all || [];
            while (div.innerHTML = '<!--[if gt IE '+(++v)+']><br><![endif]-->', a[0]);
            return v > 4 ? v : !v;
        }());

        var el = document.createElement('div');
        this._changeEvent = (ieVersion === 9 || !('oninput' in el)) ? 'keyup' : 'input';

        // The flag to indicate that the form is ready to submit when a remote/callback validator returns
        this._submitIfValid = null;

        this._init();
    };

    // The default options
    BootstrapValidator.DEFAULT_OPTIONS = {
        // The form CSS class
        elementClass: 'bv-form',

        // Default invalid message
        message: 'This value is not valid',

        // The field will not be live validated if its length is less than this number of characters
        threshold: null,

        // Indicate fields which won't be validated
        // By default, the plugin will not validate the following kind of fields:
        // - disabled
        // - hidden
        // - invisible
        //
        // The setting consists of jQuery filters. Accept 3 formats:
        // - A string. Use a comma to separate filter
        // - An array. Each element is a filter
        // - An array. Each element can be a callback function
        //      function($field, validator) {
        //          $field is jQuery object representing the field element
        //          validator is the BootstrapValidator instance
        //          return true or false;
        //      }
        //
        // The 3 following settings are equivalent:
        //
        // 1) ':disabled, :hidden, :not(:visible)'
        // 2) [':disabled', ':hidden', ':not(:visible)']
        // 3) [':disabled', ':hidden', function($field) {
        //        return !$field.is(':visible');
        //    }]
        excluded: [':disabled', ':hidden', ':not(:visible)'],

        // Shows ok/error/loading icons based on the field validity.
        // This feature requires Bootstrap v3.1.0 or later (http://getbootstrap.com/css/#forms-control-validation).
        // Since Bootstrap doesn't provide any methods to know its version, this option cannot be on/off automatically.
        // In other word, to use this feature you have to upgrade your Bootstrap to v3.1.0 or later.
        //
        // Examples:
        // - Use Glyphicons icons:
        //  feedbackIcons: {
        //      valid: 'glyphicon glyphicon-ok',
        //      invalid: 'glyphicon glyphicon-remove',
        //      validating: 'glyphicon glyphicon-refresh'
        //  }
        // - Use FontAwesome icons:
        //  feedbackIcons: {
        //      valid: 'fa fa-check',
        //      invalid: 'fa fa-times',
        //      validating: 'fa fa-refresh'
        //  }
        feedbackIcons: {
            valid:      null,
            invalid:    null,
            validating: null
        },

        // The submit buttons selector
        // These buttons will be disabled to prevent the valid form from multiple submissions
        submitButtons: '[type="submit"]',

        // The custom submit handler
        // It will prevent the form from the default submission
        //
        //  submitHandler: function(validator, form, submitButton) {
        //      - validator is the BootstrapValidator instance
        //      - form is the jQuery object present the current form
        //      - submit button
        //  }
        submitHandler: null,

        // The custom submit handler "this" reference
        // Will be passed on to submitHandlerCaller to act as "this" reference
        submitHandlerCaller: null,

        // Live validating option
        // Can be one of 3 values:
        // - enabled: The plugin validates fields as soon as they are changed
        // - disabled: Disable the live validating. The error messages are only shown after the form is submitted
        // - submitted: The live validating is enabled after the form is submitted
        live: 'enabled',

        // Map the field name with validator rules
        fields: null
    };

    BootstrapValidator.prototype = {
        constructor: BootstrapValidator,

        /**
         * Init form
         */
        _init: function() {
            var that    = this,
                options = {
                    excluded:       this.$form.attr('data-bv-excluded'),
                    trigger:        this.$form.attr('data-bv-trigger'),
                    message:        this.$form.attr('data-bv-message'),
                    submitButtons:  this.$form.attr('data-bv-submitbuttons'),
                    threshold:      this.$form.attr('data-bv-threshold'),
                    live:           this.$form.attr('data-bv-live'),
                    fields:         {},
                    feedbackIcons: {
                        valid:      this.$form.attr('data-bv-feedbackicons-valid'),
                        invalid:    this.$form.attr('data-bv-feedbackicons-invalid'),
                        validating: this.$form.attr('data-bv-feedbackicons-validating')
                    }
                },
                validator,
                v,          // Validator name
                enabled,
                optionName,
                optionValue,
                html5AttrName,
                html5Attrs;

            this.$form
                // Disable client side validation in HTML 5
                .attr('novalidate', 'novalidate')
                .addClass(this.options.elementClass)
                // Disable the default submission first
                .on('submit.bv', function(e) {
                    e.preventDefault();
                    that.validate();
                })
                .on('click', this.options.submitButtons, function() {
                    that.$submitButton  = $(this);
					// The user just click the submit button
					that._submitIfValid = true;
                })
                // Find all fields which have either "name" or "data-bv-field" attribute
                .find('[name], [data-bv-field]')
                    .each(function() {
                        var $field = $(this);
                        if (that._isExcluded($field)) {
                            return;
                        }

                        var field      = $field.attr('name') || $field.attr('data-bv-field'),
                            validators = {};
                        for (v in $.fn.bootstrapValidator.validators) {
                            validator  = $.fn.bootstrapValidator.validators[v];
                            enabled    = $field.attr('data-bv-' + v.toLowerCase()) + '';
                            html5Attrs = ('function' == typeof validator.enableByHtml5) ? validator.enableByHtml5($(this)) : null;

                            if ((html5Attrs && enabled != 'false')
                                || (html5Attrs !== true && ('' == enabled || 'true' == enabled)))
                            {
                                // Try to parse the options via attributes
                                validator.html5Attributes = validator.html5Attributes || { message: 'message' };
                                validators[v] = $.extend({}, html5Attrs == true ? {} : html5Attrs, validators[v]);

                                for (html5AttrName in validator.html5Attributes) {
                                    optionName  = validator.html5Attributes[html5AttrName];
                                    optionValue = $field.attr('data-bv-' + v.toLowerCase() + '-' + html5AttrName);
                                    if (optionValue) {
                                        if ('true' == optionValue) {
                                            optionValue = true;
                                        } else if ('false' == optionValue) {
                                            optionValue = false;
                                        }
                                        validators[v][optionName] = optionValue;
                                    }
                                }
                            }
                        }

                        var opts = {
                            trigger:    $field.attr('data-bv-trigger'),
                            message:    $field.attr('data-bv-message'),
                            container:  $field.attr('data-bv-container'),
                            selector:   $field.attr('data-bv-selector'),
                            threshold:  $field.attr('data-bv-threshold'),
                            validators: validators
                        };

                        // Check if there is any validators set using HTML attributes
                        if (!$.isEmptyObject(opts.validators) && !$.isEmptyObject(opts)) {
                            $field.attr('data-bv-field', field);
                            options.fields[field] = $.extend({}, opts, options.fields[field]);
                        }
                    })
                    .end()
                // Create hidden inputs to send the submit buttons
                .find(this.options.submitButtons)
                    .each(function() {
                        $('<input/>')
                            .attr('type', 'hidden')
                            .attr('name', $(this).attr('name'))
                            .val($(this).val())
                            .appendTo(that.$form);
                    });

            this.options = $.extend(true, this.options, options);
            for (var field in this.options.fields) {
                this._initField(field);
            }

            this.setLiveMode(this.options.live);
        },

        /**
         * Init field
         *
         * @param {String} field The field name
         */
        _initField: function(field) {
            if (this.options.fields[field] == null || this.options.fields[field].validators == null) {
                return;
            }

            var fields = this.getFieldElements(field);

            // We don't need to validate non-existing fields
            if (fields == null) {
                delete this.options.fields[field];
                return;
            }
            for (var validatorName in this.options.fields[field].validators) {
                if (!$.fn.bootstrapValidator.validators[validatorName]) {
                    delete this.options.fields[field].validators[validatorName];
                }
            }

            var that      = this,
                type      = fields.attr('type'),
                event     = ('radio' == type || 'checkbox' == type || 'file' == type || 'SELECT' == fields[0].tagName) ? 'change' : that._changeEvent,
                total     = fields.length,
                updateAll = (total == 1) || ('radio' == type) || ('checkbox' == type);

            for (var i = 0; i < total; i++) {
                var $field   = $(fields[i]),
                    $parent  = $field.parents('.form-group'),
                    // Allow user to indicate where the error messages are shown
                    $message = this.options.fields[field].container ? $parent.find(this.options.fields[field].container) : this._getMessageContainer($field);

                // Set the attribute to indicate the fields which are defined by selector
                if (!$field.attr('data-bv-field')) {
                    $field.attr('data-bv-field', field);
                }

                // Whenever the user change the field value, mark it as not validated yet
                $field.on(event + '.update.bv', function() {
                    // Reset the flag
                    that._submitIfValid = false;
                    updateAll ? that.updateStatus(field, that.STATUS_NOT_VALIDATED, null)
                              : that.updateElementStatus($(this), that.STATUS_NOT_VALIDATED, null);
                });

                // Create help block elements for showing the error messages
                $field.data('bv.messages', $message);
                for (validatorName in this.options.fields[field].validators) {
                    $field.data('bv.result.' + validatorName, this.STATUS_NOT_VALIDATED);

                    if (!updateAll || i == total - 1) {
                        $('<small/>')
                            .css('display', 'none')
                            .attr('data-bv-validator', validatorName)
                            .attr('data-bv-validator-for', field)
                            .html(this.options.fields[field].validators[validatorName].message || this.options.fields[field].message || this.options.message)
                            .addClass('help-block')
                            .appendTo($message);
                    }
                }

                // Prepare the feedback icons
                // Available from Bootstrap 3.1 (http://getbootstrap.com/css/#forms-control-validation)
                if (this.options.feedbackIcons
                    && this.options.feedbackIcons.validating && this.options.feedbackIcons.invalid && this.options.feedbackIcons.valid
                    && (!updateAll || i == total - 1))
                {
                    $parent.addClass('has-feedback');
                    var $icon = $('<i/>').css('display', 'none').addClass('form-control-feedback').attr('data-bv-icon-for', field).insertAfter($field);
                    // The feedback icon does not render correctly if there is no label
                    // https://github.com/twbs/bootstrap/issues/12873
                    if ($parent.find('label').length == 0) {
                        $icon.css('top', '0');
                    }
                }
            }

            if (this.options.fields[field]['enabled'] == null) {
                this.options.fields[field]['enabled'] = true;
            }
        },

        /**
         * Get the element to place the error messages
         *
         * @param {jQuery} $field The field element
         * @returns {jQuery}
         */
        _getMessageContainer: function($field) {
            var $parent = $field.parent();
            if ($parent.hasClass('form-group')) {
                return $parent;
            }

            var cssClasses = $parent.attr('class');
            if (!cssClasses) {
                return this._getMessageContainer($parent);
            }

            cssClasses = cssClasses.split(' ');
            var n = cssClasses.length;
            for (var i = 0; i < n; i++) {
                if (/^col-(xs|sm|md|lg)-\d+$/.test(cssClasses[i]) || /^col-(xs|sm|md|lg)-offset-\d+$/.test(cssClasses[i])) {
                    return $parent;
                }
            }

            return this._getMessageContainer($parent);
        },

        /**
         * Called when all validations are completed
         */
        _submit: function() {
            if (!this.isValid()) {
                if ('submitted' == this.options.live) {
                    this.setLiveMode('enabled');
                }

                // Focus to the first invalid field
                if (this.$invalidField) {
                    // Activate the tab containing the invalid field if exists
                    var $tab = this.$invalidField.parents('.tab-pane'),
                        tabId;
                    if ($tab && (tabId = $tab.attr('id'))) {
                        $('a[href="#' + tabId + '"][data-toggle="tab"]').trigger('click.bs.tab.data-api');
                    }

                    this.$invalidField.focus();
                }

                return;
            }

            // Call the custom submission if enabled
            if (this.options.submitHandler && 'function' == typeof this.options.submitHandler) {
                // If you want to submit the form inside your submit handler, please call defaultSubmit() method
                this.options.submitHandler.call(this, this, this.$form, this.$submitButton);
            } else {
                this.disableSubmitButtons(true).defaultSubmit();
            }
        },

        /**
         * Check if the field is excluded.
         * Returning true means that the field will not be validated
         *
         * @param {jQuery} $field The field element
         * @returns {Boolean}
         */
        _isExcluded: function($field) {
            if (this.options.excluded) {
                // Convert to array first
                if ('string' == typeof this.options.excluded) {
                    this.options.excluded = $.map(this.options.excluded.split(','), function(item) {
                        // Trim the spaces
                        return $.trim(item);
                    });
                }

                var length = this.options.excluded.length;
                for (var i = 0; i < length; i++) {
                    if (('string' == typeof this.options.excluded[i] && $field.is(this.options.excluded[i]))
                        || ('function' == typeof this.options.excluded[i] && this.options.excluded[i].call(this, $field, this) == true))
                    {
                        return true;
                    }
                }
            }

            return false;
        },

        /**
         * Check if the number of characters of field value exceed the threshold or not
         *
         * @param {jQuery} $field The field element
         * @returns {Boolean}
         */
        _exceedThreshold: function($field) {
            var field     = $field.attr('data-bv-field'),
                threshold = this.options.fields[field].threshold || this.options.threshold;
            if (!threshold) {
                return true;
            }
            var type       = $field.attr('type'),
                cannotType = ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'reset', 'submit'].indexOf(type) != -1;
            return (cannotType || $field.val().length >= threshold);
        },

        // --- Public methods ---

        /**
         * Retrieve the field elements by given name
         *
         * @param {String} field The field name
         * @returns {null|jQuery[]}
         */
        getFieldElements: function(field) {
            var fields = this.options.fields[field].selector ? $(this.options.fields[field].selector) : this.$form.find('[name="' + field + '"]');
            return (fields.length == 0) ? null : fields;
        },

        /**
         * Set live validating mode
         *
         * @param {String} mode Live validating mode. Can be 'enabled', 'disabled', 'submitted'
         * @returns {BootstrapValidator}
         */
        setLiveMode: function(mode) {
            this.options.live = mode;
            if ('submitted' == mode) {
                return this;
            }

            var that = this;
            for (var field in this.options.fields) {
                (function(f) {
                    var fields = that.getFieldElements(f);
                    if (fields) {
                        var type      = fields.attr('type'),
                            total     = fields.length,
                            updateAll = (total == 1) || ('radio' == type) || ('checkbox' == type),
                            trigger   = that.options.fields[field].trigger
                                        || that.options.trigger
                                        || (('radio' == type || 'checkbox' == type || 'file' == type || 'SELECT' == fields[0].tagName) ? 'change' : that._changeEvent),
                            events    = $.map(trigger.split(' '), function(item) {
                                return item + '.live.bv';
                            }).join(' ');

                        for (var i = 0; i < total; i++) {
                            ('enabled' == mode)
                                ? $(fields[i]).on(events, function() {
                                    if (that._exceedThreshold($(this))) {
                                        updateAll ? that.validateField(f) : that.validateFieldElement($(this), false);
                                    }
                                })
                                : $(fields[i]).off(events);
                        }
                    }
                })(field);
            }

            return this;
        },

        /**
         * Disable/enable submit buttons
         *
         * @param {Boolean} disabled Can be true or false
         * @returns {BootstrapValidator}
         */
        disableSubmitButtons: function(disabled) {
            if (!disabled) {
                this.$form.find(this.options.submitButtons).removeAttr('disabled');
            } else if (this.options.live != 'disabled') {
                // Don't disable if the live validating mode is disabled
                this.$form.find(this.options.submitButtons).attr('disabled', 'disabled');
            }

            return this;
        },

        /**
         * Validate the form
         *
         * @returns {BootstrapValidator}
         */
        validate: function() {
            if (!this.options.fields) {
                return this;
            }
            this.disableSubmitButtons(true);

            for (var field in this.options.fields) {
                this.validateField(field);
            }
            // Check if whether the submit button is clicked
            if (this.$submitButton) {
                this._submit();
            }

            return this;
        },

        /**
         * Validate given field
         *
         * @param {String} field The field name
         * @returns {BootstrapValidator}
         */
        validateField: function(field) {
            var fields = this.getFieldElements(field),
                type   = fields.attr('type'),
                n      = (('radio' == type) || ('checkbox' == type)) ? 1 : fields.length;

            for (var i = 0; i < n; i++) {
                this.validateFieldElement($(fields[i]), (n == 1));
            }
            return this;
        },

        /**
         * Validate field element
         *
         * @param {jQuery} $field The field element
         * @param {Boolean} updateAll If true, update status of all elements which have the same name
         * @returns {BootstrapValidator}
         */
        validateFieldElement: function($field, updateAll) {

            var that       = this,
                field      = $field.attr('data-bv-field'),
                validators = this.options.fields[field].validators,
                validatorName,
                validateResult;

            if (!this.options.fields[field]['enabled'] || this._isExcluded($field)) {
                return this;
            }
            for (validatorName in validators) {
                if ($field.data('bv.dfs.' + validatorName)) {
                    $field.data('bv.dfs.' + validatorName).reject();
                }

                // Don't validate field if it is already done
                var result = $field.data('bv.result.' + validatorName);

                if (result == this.STATUS_VALID || result == this.STATUS_INVALID) {
                    continue;
                }

                $field.data('bv.result.' + validatorName, this.STATUS_VALIDATING);
                validateResult = $.fn.bootstrapValidator.validators[validatorName].validate(this, $field, validators[validatorName]);


                if ('object' == typeof validateResult) {
                    updateAll ? this.updateStatus(field, this.STATUS_VALIDATING, validatorName)
                              : this.updateElementStatus($field, this.STATUS_VALIDATING, validatorName);
                    $field.data('bv.dfs.' + validatorName, validateResult);

                    validateResult.done(function($f, v, isValid) {
                        // v is validator name
                        $f.removeData('bv.dfs.' + v);
                        updateAll ? that.updateStatus($f.attr('data-bv-field'), isValid ? that.STATUS_VALID : that.STATUS_INVALID, v)
                                  : that.updateElementStatus($f, isValid ? that.STATUS_VALID : that.STATUS_INVALID, v);

                        if (isValid && that._submitIfValid == true) {
						    // If a remote validator returns true and the form is ready to submit, then do it
							that._submit();
						}
                    });
                } else if ('boolean' == typeof validateResult) {
                    updateAll ? this.updateStatus(field, validateResult ? this.STATUS_VALID : this.STATUS_INVALID, validatorName)
                              : this.updateElementStatus($field, validateResult ? this.STATUS_VALID : this.STATUS_INVALID, validatorName);
                }
				if(!validateResult) {
                    break;
                }
            }

            return this;
        },

        /**
         * Update all validating results of elements which have the same field name
         *
         * @param {String} field The field name
         * @param {String} status The status. Can be 'NOT_VALIDATED', 'VALIDATING', 'INVALID' or 'VALID'
         * @param {String} [validatorName] The validator name. If null, the method updates validity result for all validators
         * @returns {BootstrapValidator}
         */
        updateStatus: function(field, status, validatorName) {
            var fields = this.getFieldElements(field),
                type   = fields.attr('type'),
                n      = (('radio' == type) || ('checkbox' == type)) ? 1 : fields.length;

            for (var i = 0; i < n; i++) {
                this.updateElementStatus($(fields[i]), status, validatorName);
            }

            return this;
        },

        /**
         * Update validating result of given element
         *
         * @param {jQuery} $field The field element
         * @param {String} status The status. Can be 'NOT_VALIDATED', 'VALIDATING', 'INVALID' or 'VALID'
         * @param {String} [validatorName] The validator name. If null, the method updates validity result for all validators
         * @returns {BootstrapValidator}
         */
        updateElementStatus: function($field, status, validatorName) {
            var that     = this,
                field    = $field.attr('data-bv-field'),
                $parent  = $field.parents('.form-group'),
                $message = $field.data('bv.messages'),
                $errors  = $message.find('.help-block[data-bv-validator]'),
                $icon    = $parent.find('.form-control-feedback[data-bv-icon-for="' + field + '"]');

            // Update status
            if (validatorName) {
                $field.data('bv.result.' + validatorName, status);
            } else {
                for (var v in this.options.fields[field].validators) {
                    $field.data('bv.result.' + v, status);
                }
            }

            // Determine the tab containing the element
            var $tabPane = $field.parents('.tab-pane'),
                tabId,
                $tab;
            if ($tabPane && (tabId = $tabPane.attr('id'))) {
                $tab = $('a[href="#' + tabId + '"][data-toggle="tab"]').parent();
            }

            // Show/hide error elements and feedback icons
            switch (status) {
                case this.STATUS_VALIDATING:
                    this.disableSubmitButtons(true);
                    $parent.removeClass('has-success').removeClass('has-error');
                    // TODO: Show validating message
                    validatorName ? $errors.filter('.help-block[data-bv-validator="' + validatorName + '"]').hide() : $errors.hide();
                    if ($icon) {
                        $icon.removeClass(this.options.feedbackIcons.valid).removeClass(this.options.feedbackIcons.invalid).addClass(this.options.feedbackIcons.validating).show();
                    }
                    if ($tab) {
                        $tab.removeClass('bv-tab-success').removeClass('bv-tab-error');
                    }
                    break;

                case this.STATUS_INVALID:
                    this.disableSubmitButtons(true);
                    $parent.removeClass('has-success').addClass('has-error');
                    validatorName ? $errors.filter('[data-bv-validator="' + validatorName + '"]').show() : $errors.show();
                    if ($icon) {
                        $icon.removeClass(this.options.feedbackIcons.valid).removeClass(this.options.feedbackIcons.validating).addClass(this.options.feedbackIcons.invalid).show();
                    }
                    if ($tab) {
                        $tab.removeClass('bv-tab-success').addClass('bv-tab-error');
                    }
                    break;

                case this.STATUS_VALID:
                    validatorName ? $errors.filter('[data-bv-validator="' + validatorName + '"]').hide() : $errors.hide();

                    // If the field is valid (passes all validators)
                    var validField = ($errors.filter(function() {
                                        var display = $(this).css('display'), v = $(this).attr('data-bv-validator');
                                        return ('block' == display) || ($field.data('bv.result.' + v) != that.STATUS_VALID);
                                    }).length == 0);
                    this.disableSubmitButtons(!validField);
                    if ($icon) {
                        $icon
                            .removeClass(this.options.feedbackIcons.invalid).removeClass(this.options.feedbackIcons.validating).removeClass(this.options.feedbackIcons.valid)
                            .addClass(validField ? this.options.feedbackIcons.valid : this.options.feedbackIcons.invalid)
                            .show();
                    }

                    // Check if all elements in given container are valid
                    var isValidContainer = function($container) {
                        return $container
                                    .find('.help-block[data-bv-validator]')
                                    .filter(function() {
                                        var display = $(this).css('display'), v = $(this).attr('data-bv-validator');
                                        return ('block' == display) || ($field.data('bv.result.' + v) && $field.data('bv.result.' + v) != that.STATUS_VALID);
                                    })
                                    .length == 0;
                    };
                    $parent.removeClass('has-error has-success').addClass(isValidContainer($parent) ? 'has-success' : 'has-error');
                    if ($tab) {
                        $tab.removeClass('bv-tab-success').removeClass('bv-tab-error').addClass(isValidContainer($tabPane) ? 'bv-tab-success' : 'bv-tab-error');
                    }
                    break;

                case this.STATUS_NOT_VALIDATED:
                default:
                    this.disableSubmitButtons(false);
                    $parent.removeClass('has-success').removeClass('has-error');
                    validatorName ? $errors.filter('.help-block[data-bv-validator="' + validatorName + '"]').hide() : $errors.hide();
                    if ($icon) {
                        $icon.removeClass(this.options.feedbackIcons.valid).removeClass(this.options.feedbackIcons.invalid).removeClass(this.options.feedbackIcons.validating).hide();
                    }
                    if ($tab) {
                        $tab.removeClass('bv-tab-success').removeClass('bv-tab-error');
                    }
                    break;
            }

            return this;
        },

        /**
         * Check the field validity
         *
         * @returns {Boolean}
         */
        isValidField: function (field) {
            fields = this.getFieldElements(field);
            type   = fields.attr('type');
            n      = (('radio' == type) || ('checkbox' == type)) ? 1 : fields.length;

            for (i = 0; i < n; i++) {
                $field = $(fields[i]);
                if (this._isExcluded($field)) {
                    continue;
                }

                for (validatorName in this.options.fields[field].validators) {
                    status = $field.data('bv.result.' + validatorName);
                    if (status == this.STATUS_NOT_VALIDATED || status == this.STATUS_VALIDATING) {
                        return false;
                    }

                    if (status == this.STATUS_INVALID) {
                        this.$invalidField = $field;
                        return false;
                    }
                }
            }

            return true;
        },

        /**
         * Check the form validity
         *
         * @returns {Boolean}
         */
        isValid: function() {
            var fields, field, $field,
                type, status, validatorName,
                n, i;
            for (field in this.options.fields) {
                if (this.options.fields[field] == null || !this.options.fields[field]['enabled']) {
                    continue;
                }

                fields = this.getFieldElements(field);
                type   = fields.attr('type');
                n      = (('radio' == type) || ('checkbox' == type)) ? 1 : fields.length;

                for (i = 0; i < n; i++) {
                    $field = $(fields[i]);
                    if (this._isExcluded($field)) {
                        continue;
                    }

                    for (validatorName in this.options.fields[field].validators) {
                        status = $field.data('bv.result.' + validatorName);
                        if (status == this.STATUS_NOT_VALIDATED || status == this.STATUS_VALIDATING) {
                            return false;
                        }

                        if (status == this.STATUS_INVALID) {
                            this.$invalidField = $field;
                            return false;
                        }
                    }
                }
            }

            return true;
        },

        /**
         * Submit the form using default submission.
         * It also does not perform any validations when submitting the form
         *
         * It might be used when you want to submit the form right inside the submitHandler()
         */
        defaultSubmit: function() {
            this.$form.off('submit.bv').submit();
        },

        // Useful APIs which aren't used internally

        /**
         * Reset the form
         *
         * @param {Boolean} resetFormData Reset current form data
         * @returns {BootstrapValidator}
         */
        resetForm: function(resetFormData) {
            var field, fields, total, type, validator;
            for (field in this.options.fields) {
                fields = this.getFieldElements(field);
                total  = fields.length;

                for (var i = 0; i < total; i++) {
                    for (validator in this.options.fields[field].validators) {
                        $(fields[i]).removeData('bv.dfs.' + validator);
                    }
                }

                // Mark field as not validated yet
                this.updateStatus(field, this.STATUS_NOT_VALIDATED, null);

                if (resetFormData) {
                    type = fields.attr('type');
                    ('radio' == type || 'checkbox' == type) ? fields.removeAttr('checked').removeAttr('selected') : fields.val('');
                }
            }

            this.$invalidField = null;
            this.$submitButton = null;

            // Enable submit buttons
            this.disableSubmitButtons(false);

            return this;
        },

        /**
         * Enable/Disable all validators to given field
         *
         * @param {String} field The field name
         * @param {Boolean} enabled Enable/Disable field validators
         * @returns {BootstrapValidator}
         */
        enableFieldValidators: function(field, enabled) {
            this.options.fields[field]['enabled'] = enabled;
            this.updateStatus(field, this.STATUS_NOT_VALIDATED, null);

            return this;
        }
    };

    // Plugin definition
    $.fn.bootstrapValidator = function(option) {
        var params = arguments;
        return this.each(function() {
            var $this   = $(this),
                data    = $this.data('bootstrapValidator'),
                options = 'object' == typeof option && option;
            if (!data) {
                data = new BootstrapValidator(this, options);
                $this.data('bootstrapValidator', data);
            }

            // Allow to call plugin method
            if ('string' == typeof option) {
                data[option].apply(data, Array.prototype.slice.call(params, 1));
            }
        });
    };

    // Available validators
    $.fn.bootstrapValidator.validators = {};

    $.fn.bootstrapValidator.Constructor = BootstrapValidator;

    // Helper methods, which can be used in validator class
    $.fn.bootstrapValidator.helpers = {
        /**
         * Validate a date
         *
         * @param {Number} year The full year in 4 digits
         * @param {Number} month The month number
         * @param {Number} day The day number
         * @param {Boolean} [notInFuture] If true, the date must not be in the future
         * @returns {Boolean}
         */
        date: function(year, month, day, notInFuture) {
            if (year < 1000 || year > 9999 || month == 0 || month > 12) {
                return false;
            }
            var numDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
            // Update the number of days in Feb of leap year
            if (year % 400 == 0 || (year % 100 != 0 && year % 4 == 0)) {
                numDays[1] = 29;
            }

            // Check the day
            if (day < 0 || day > numDays[month - 1]) {
                return false;
            }

            if (notInFuture === true) {
                var currentDate  = new Date(),
                    currentYear  = currentDate.getFullYear(),
                    currentMonth = currentDate.getMonth(),
                    currentDay   = currentDate.getDate();
                return (year < currentYear
                        || (year == currentYear && month - 1 < currentMonth)
                        || (year == currentYear && month - 1 == currentMonth && day < currentDay));
            }

            return true;
        }
    };
}(window.jQuery));

;(function($) {
    $.fn.bootstrapValidator.validators.callback = {
        /**
         * Return result from the callback method
         *
         * @param {BootstrapValidator} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - callback: The callback method that passes 2 parameters:
         *      callback: function(fieldValue, validator) {
         *          // fieldValue is the value of field
         *          // validator is instance of BootstrapValidator
         *      }
         * - message: The invalid message
         * @returns {Boolean|Deferred}
         */
        validate: function(validator, $field, options) {
            var value = $field.val();
            if (options.callback && 'function' == typeof options.callback) {
                var dfd = new $.Deferred();
                dfd.resolve($field, 'callback', options.callback.call(this, value, validator));
                return dfd;
            }
            return true;
        }
    };
}(window.jQuery));
;(function($) {
    $.fn.bootstrapValidator.validators.date = {
        html5Attributes: {
            message: 'message',
            format: 'format'
        },

        /**
         * Return true if the input value is valid date
         *
         * @param {BootstrapValidator} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Can consist of the following keys:
         * - message: The invalid message
         * - format: The date format. Default is MM/DD/YYYY
         * The format can be:
         *
         * i) date: Consist of DD, MM, YYYY parts which are separated by /
         * ii) date and time:
         * The time can consist of h, m, s parts which are separated by :
         * ii) date, time and A (indicating AM or PM)
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = $field.val();
            if (value == '') {
                return true;
            }

            options.format = options.format || 'MM/DD/YYYY';

            var formats    = options.format.split(' '),
                dateFormat = formats[0],
                timeFormat = (formats.length > 1) ? formats[1] : null,
                amOrPm     = (formats.length > 2) ? formats[2] : null,
                sections   = value.split(' '),
                date       = sections[0],
                time       = (sections.length > 1) ? sections[1] : null;

            if (formats.length != sections.length) {
                return false;
            }

            // Case or date not completly filled
            if ($field.val().length != 10)
            {
                return false;
            }

            // Determine the separator
            var separator = (date.indexOf('/') != -1) ? '/' : ((date.indexOf('-') != -1) ? '-' : null);
            if (separator == null) {
                return false;
            }

            // Determine the date
            date       = date.split(separator);
            dateFormat = dateFormat.split(separator);
            var year  = date[dateFormat.indexOf('YYYY')],
                month = date[dateFormat.indexOf('MM')],
                day   = date[dateFormat.indexOf('DD')];

            // Determine the time
            var minutes = null, hours = null, seconds = null;
            if (timeFormat) {
                timeFormat = timeFormat.split(':'),
                time       = time.split(':');

                if (timeFormat.length != time.length) {
                    return false;
                }

                hours   = time.length > 0 ? time[0] : null;
                minutes = time.length > 1 ? time[1] : null;
                seconds = time.length > 2 ? time[2] : null;

                // Validate seconds
                if (seconds) {
                    seconds = parseInt(seconds, 10);
                    if (seconds < 0 || seconds > 60) {
                        return false;
                    }
                }

                // Validate hours
                if (hours) {
                    hours = parseInt(hours, 10);
                    if (hours < 0 || hours >= 24 || (amOrPm && hours > 12)) {
                        return false;
                    }
                }

                // Validate minutes
                if (minutes) {
                    minutes = parseInt(minutes, 10);
                    if (minutes < 0 || minutes > 59) {
                        return false;
                    }
                }
            }

            // Validate day, month, and year
            day   = parseInt(day, 10);
            month = parseInt(month, 10);
            year  = parseInt(year, 10);

            return $.fn.bootstrapValidator.helpers.date(year, month, day);
        }
    };
}(window.jQuery));
;(function($) {
    $.fn.bootstrapValidator.validators.different = {
        html5Attributes: {
            message: 'message',
            field: 'field'
        },

        /**
         * Return true if the input value is different with given field's value
         *
         * @param {BootstrapValidator} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consists of the following key:
         * - field: The name of field that will be used to compare with current one
         * - message: The invalid message
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = $field.val();
            if (value == '') {
                return true;
            }

            var compareWith = validator.getFieldElements(options.field);
            if (compareWith == null) {
                return true;
            }

            if (value != compareWith.val()) {
                validator.updateStatus(options.field, validator.STATUS_VALID, 'different');
                return true;
            } else {
                return false;
            }
        }
    };
}(window.jQuery));


;(function($) {
    $.fn.bootstrapValidator.validators.emailAddress = {
        enableByHtml5: function($field) {
            return ('email' == $field.attr('type'));
        },

        /**
         * Return true if and only if the input value is a valid email address
         *
         * @param {BootstrapValidator} validator Validate plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = $field.val();
            if (value == '') {
                return true;
            }

            // Email address regular expression
            // http://stackoverflow.com/questions/46155/validate-email-address-in-javascript
            var emailRegExp = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            return emailRegExp.test(value);
        }
    }
}(window.jQuery));
;(function($) {
    $.fn.bootstrapValidator.validators.identical = {
        html5Attributes: {
            message: 'message',
            field: 'field'
        },

        /**
         * Check if input value equals to value of particular one
         *
         * @param {BootstrapValidator} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consists of the following key:
         * - field: The name of field that will be used to compare with current one
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = $field.val();
            if (value == '') {
                return true;
            }

            var compareWith = validator.getFieldElements(options.field);
            if (compareWith == null) {
                return true;
            }

            if (value == compareWith.val()) {
                validator.updateStatus(options.field, validator.STATUS_VALID, 'identical');
                return true;
            } else {
                return false;
            }
        }
    };
}(window.jQuery));

;(function($) {
    $.fn.bootstrapValidator.validators.notEmpty = {
        enableByHtml5: function($field) {
            var required = $field.attr('required') + '';
            return ('required' == required || 'true' == required);
        },

        /**
         * Check if input value is empty or not
         *
         * @param {BootstrapValidator} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var type = $field.attr('type');
            if ('radio' == type || 'checkbox' == type) {
                return validator
                            .getFieldElements($field.attr('data-bv-field'))
                            .filter(':checked')
                            .length > 0;
            }

            return $.trim($field.val()) != '';
        }
    };
}(window.jQuery));
;(function($) {
    $.fn.bootstrapValidator.validators.phone = {
        html5Attributes: {
            message: 'message',
            country: 'country'
        },

        /**
         * Return true if the input value contains a valid US phone number only
         *
         * @param {BootstrapValidator} validator Validate plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consist of key:
         * - message: The invalid message
         * - country: The ISO 3166 country code
         * Currently it only supports United State (US) country
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = $field.val();
            if (value == '') {
                return true;
            }

            var country = (options.country || 'US').toUpperCase();
            switch (country) {
                case 'US':
                default:
                    // Make sure US phone numbers have 10 digits
                    // May start with 1, +1, or 1-; should discard
                    // Area code may be delimited with (), & sections may be delimited with . or -
                    // Test: http://regexr.com/38mqi
                    value = value.replace(/\D/g, '');
                    return (/^(?:(1\-?)|(\+1 ?))?\(?(\d{3})[\)\-\.]?(\d{3})[\-\.]?(\d{4})$/).test(value) && (value.length == 10);
            }
        }
    }
}(window.jQuery));
;(function($) {
    $.fn.bootstrapValidator.validators.regexp = {
        html5Attributes: {
            message: 'message',
            regexp: 'regexp'
        },

        enableByHtml5: function($field) {
            var pattern = $field.attr('pattern');
            if (pattern) {
                return {
                    regexp: pattern
                };
            }

            return false;
        },

        /**
         * Check if the element value matches given regular expression
         *
         * @param {BootstrapValidator} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consists of the following key:
         * - regexp: The regular expression you need to check
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = $field.val();
            if (value == '') {
                return true;
            }

            var regexp = ('string' == typeof options.regexp) ? new RegExp(options.regexp) : options.regexp;
            return regexp.test(value);
        }
    };
}(window.jQuery));
;(function($) {
    $.fn.bootstrapValidator.validators.stringLength = {
        html5Attributes: {
            message: 'message',
            min: 'min',
            max: 'max'
        },

        enableByHtml5: function($field) {
            var maxLength = $field.attr('maxlength');
            if (maxLength) {
                return {
                    max: parseInt(maxLength, 10)
                };
            }

            return false;
        },

        /**
         * Check if the length of element value is less or more than given number
         *
         * @param {BootstrapValidator} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consists of following keys:
         * - min
         * - max
         * At least one of two keys is required
         * - message: The invalid message
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = $field.val();
            if (value == '') {
                return true;
            }

            var length = $.trim(value).length;
            if ((options.min && length < options.min) || (options.max && length > options.max)) {
                return false;
            }

            return true;
        }
    };
}(window.jQuery));
;(function($) {
    $.fn.bootstrapValidator.validators.zipCode = {
        html5Attributes: {
            message: 'message',
            country: 'country'
        },

        /**
         * Return true if and only if the input value is a valid country zip code
         *
         * @param {BootstrapValidator} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options Consist of key:
         * - message: The invalid message
         * - country: The ISO 3166 country code
         *
         * Currently it supports the following countries:
         * - US (United State)
         * - CA (Canada)
         * - DK (Denmark)
         * - GB (United Kingdom)
         * - IT (Italy)
         * - NL (Netherlands)
         * - SE (Sweden)
         * @returns {Boolean}
         */
        validate: function(validator, $field, options) {
            var value = $field.val();
            if (value == '' || !options.country) {
                return true;
            }

            var country = (options.country || 'US').toUpperCase();
            switch (country) {
                case 'BE': return /^\d{4}$/.test(value);
                case 'CA': return /(?:A|B|C|E|G|J|K|L|M|N|P|R|S|T|V|X|Y){1}[0-9]{1}(?:A|B|C|E|G|J|K|L|M|N|P|R|S|T|V|X|Y){1}\s?[0-9]{1}(?:A|B|C|E|G|J|K|L|M|N|P|R|S|T|V|X|Y){1}[0-9]{1}/i.test(value);
                case 'DK': return /^(DK(-|\s)?)?\d{4}$/i.test(value);
                case 'GB': return this._gb(value);

                // http://en.wikipedia.org/wiki/List_of_postal_codes_in_Italy
                case 'IT': return /^(I-|IT-)?\d{5}$/i.test(value);

                // http://en.wikipedia.org/wiki/Postal_codes_in_the_Netherlands
                case 'NL': return /^[1-9][0-9]{3} ?(?!sa|sd|ss)[a-z]{2}$/i.test(value);

                case 'SE': return /^(S-)?\d{3}\s?\d{2}$/i.test(value);
                case 'US':
                default: return /^\d{4,5}([\-]\d{4})?$/.test(value);
            }
        },

        /**
         * Validate United Kingdom postcode
         * Examples:
         * - Standard: EC1A 1BB, W1A 1HQ, M1 1AA, B33 8TH, CR2 6XH, DN55 1PT
         * - Special cases:
         * AI-2640, ASCN 1ZZ, GIR 0AA
         *
         * @see http://en.wikipedia.org/wiki/Postcodes_in_the_United_Kingdom
         * @param {String} value The postcode
         * @returns {Boolean}
         */
        _gb: function(value) {
            var firstChar  = '[ABCDEFGHIJKLMNOPRSTUWYZ]',     // Does not accept QVX
                secondChar = '[ABCDEFGHKLMNOPQRSTUVWXY]',     // Does not accept IJZ
                thirdChar  = '[ABCDEFGHJKPMNRSTUVWXY]',
                fourthChar = '[ABEHMNPRVWXY]',
                fifthChar  = '[ABDEFGHJLNPQRSTUWXYZ]',
                regexps    = [
                    // AN NAA, ANN NAA, AAN NAA, AANN NAA format
                    new RegExp('^(' + firstChar + '{1}' + secondChar + '?[0-9]{1,2})(\\s*)([0-9]{1}' + fifthChar + '{2})$', 'i'),
                    // ANA NAA
                    new RegExp('^(' + firstChar + '{1}[0-9]{1}' + thirdChar + '{1})(\\s*)([0-9]{1}' + fifthChar + '{2})$', 'i'),
                    // AANA NAA
                    new RegExp('^(' + firstChar + '{1}' + secondChar + '{1}?[0-9]{1}' + fourthChar + '{1})(\\s*)([0-9]{1}' + fifthChar + '{2})$', 'i'),

                    new RegExp('^(BF1)(\\s*)([0-6]{1}[ABDEFGHJLNPQRST]{1}[ABDEFGHJLNPQRSTUWZYZ]{1})$', 'i'),        // BFPO postcodes
                    /^(GIR)(\s*)(0AA)$/i,                       // Special postcode GIR 0AA
                    /^(BFPO)(\s*)([0-9]{1,4})$/i,               // Standard BFPO numbers
                    /^(BFPO)(\s*)(c\/o\s*[0-9]{1,3})$/i,        // c/o BFPO numbers
                    /^([A-Z]{4})(\s*)(1ZZ)$/i,                  // Overseas Territories
                    /^(AI-2640)$/i                              // Anguilla
                ];
            for (var i = 0; i < regexps.length; i++) {
                if (regexps[i].test(value)) {
                    return true;
                }
            }

            return false;
        }
    };
}(window.jQuery));

;(function ($) {
    $.fn.bootstrapValidator.validators.updatePhoneInformationChecking = {
        /**
         * Check if phone number is valid and update it
         *
         * @param {BootstrapValidator} validator The validator plugin instance
         * @param {jQuery} $field Field element
         * @param {Object} options
         * @returns {Boolean}
         */
        validate: function (validator, $field, options) {
            // Hack for One Click UK
            if (Utils.Common.getCountry() === 'co.uk' && contextInfo.Customer.IsLoggedIn === false) {
                return true;
            } else {
                var response;
                var fieldValue = $field.val();
                if(fieldValue.length === 11) {
                    var disableSubmitButtons = function () {
                        $('#oneClickNext').find('button').attr('disabled', true);
                        $('.checkout-sticky-button').attr('disabled', true);
                    };

                    var enableSubmitButtons = function () {
                        $('#oneClickNext').find('button').removeAttr('disabled');
                        $('.checkout-sticky-button').removeAttr('disabled');
                    };
                    $.ajax({
                        cache: false,
                        url: '/customerservices/updatemobile/',
                        data: {
                            telephone: fieldValue,
                            customerNumber: contextInfo.Customer.UserId
                        },
                        beforeSend: function () {
                            $field.attr('disabled', true).addClass('disabled');
                            disableSubmitButtons();
                        },
                        success: function (data) {
                            if (data[0].Value === true) {
                                response = true;
                            }
                            else {
                                response = false;
                            }
                            $field.removeAttr('disabled').removeClass('disabled');
                            enableSubmitButtons();
                        },
                        error: function (xhr, status, error) {
                            console.error("AJAX on " + this.url + " method " + this.type + " status " + xhr.status + " statusText " + xhr.statusText + " error " + error + " response " + xhr.responseText);
                            response = false;
                        },
                        complete: function () {
                            $field.removeAttr('disabled').removeClass('disabled');
                            enableSubmitButtons();
                        }
                    });
                    return true;
                }
                return response;
            }
        }
    };
}(window.jQuery));
;
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	!function() {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};

;// CONCATENATED MODULE: external "jQuery"
var external_jQuery_namespaceObject = jQuery;
var external_jQuery_default = /*#__PURE__*/__webpack_require__.n(external_jQuery_namespaceObject);
;// CONCATENATED MODULE: ./js_next/utils.ts

var $window = external_jQuery_default()(window);
var screenSizes;
(function (screenSizes) {
    screenSizes["xs"] = "xs";
    screenSizes["sm"] = "sm";
    screenSizes["md"] = "md";
    screenSizes["lg"] = "lg";
    screenSizes["xl"] = "xl";
})(screenSizes || (screenSizes = {}));
function addCustomEvent(name, fn) {
    $window.on(name, fn);
}
function triggerCustomEvent(name, data) {
    $window.trigger(name, [data]);
}
/**
 * * Available cases for `src`
 * https://cdn.laredoute.com/products/72by72/d/6/c/d6ced63fcdad20ab3d53611ccda0fd49.jpg
 * https://cdn.laredoute.com/|Dimension|/d/6/c/d6ced63fcdad20ab3d53611ccda0fd49.jpg
 * https://cdn.laredoute.com/products/d/6/c/d6ced63fcdad20ab3d53611ccda0fd49.jpg?width=72
 *
 * * Should return
 * https://cdn.laredoute.com/products/d/6/c/d6ced63fcdad20ab3d53611ccda0fd49.jpg?width=680
 */
function getSizedImageSrc(src, size) {
    var newSrc = src;
    // Remove params
    newSrc = newSrc.split('?')[0];
    // Remove '|Dimension|'
    newSrc = newSrc.replace('|Dimension|', 'products');
    // Remove old size
    newSrc = newSrc.replace('72by72/', '');
    newSrc = newSrc.replace('250by250/', '');
    newSrc = newSrc.replace('640by640/', '');
    newSrc = newSrc.replace('680by680/', '');
    newSrc = newSrc.replace('1200by1200/', '');
    // return `${newSrc}?width=${size}`
    return newSrc.replace('products/', "products/" + size + "by" + size + "/");
}
function getNosizedImageSrc(src) {
    var newSrc = src;
    // Remove params
    newSrc = newSrc.split('?')[0];
    // Remove '|Dimension|'
    newSrc = newSrc.replace('|Dimension|', 'products');
    // Remove domain name
    newSrc = newSrc.replace('https://cdn.laredoute.com', '');
    newSrc = newSrc.replace('https://cdn.laredoute.ru', '');
    // Remove old size
    newSrc = newSrc.replace('72by72/', '');
    newSrc = newSrc.replace('250by250/', '');
    newSrc = newSrc.replace('640by640/', '');
    newSrc = newSrc.replace('680by680/', '');
    newSrc = newSrc.replace('1200by1200/', '');
    // return
    return newSrc;
}
function getScreenSize() {
    var screenSize = __webpack_require__.g.innerWidth;
    if (screenSize < 768) {
        return screenSizes.xs;
    }
    else if (screenSize < 992) {
        return screenSizes.sm;
    }
    else if (screenSize < 1200) {
        return screenSizes.md;
    }
    else if (screenSize < 1360) {
        return screenSizes.lg;
    }
    return screenSizes.xl;
}

;// CONCATENATED MODULE: ./js_next/Common/Widget_Modal.ts
/**
 * MODAL: POPIN, ICEBERG AND PANEL MANAGEMENT
 *
 * Opening, closing and destroying a simple popin use only one argument as string: $('#myElementToOpen').modal('open');
 *
 * Opening with parameters using an object: $('#myElementToOpen').modal({method: 'open', type: 'panel', id: 'myId'});
 * element:    mandatory, the div that should be opened in the modal.
 * type:        mandatory, 'popin' | 'panel', opening from one side of the screen, right by default | 'iceberg', opening from bottom
 * id:          mandatory, id to add to the modal, so that open, close and remove methods can be used on this id
 * source:      mandatory, set correctly the focus for keyboard accessibility. With jQuery, use {source: $(this)} on your button/link
 * title:       mandatory for accessibility, add a title on top of the modal
 * classList:   optional, allow to add classes in specific cases (mainly for styling)
 * fullscreen:  optional, only for popin, use all screen space
 * unfixHeight: optional, specify if a panel should take the whole height (false, by default) or the size of its content (true)
 * url:         optional, load a local url inside the modal
 * block:       optional, works with 'url': get a specific block of the loaded url to display inside the modal
 * gradientOnScroll: optional, display a white to transparent background at the bottom of the modal if scroll is possible
 *
 * NOTE #1: 'id' must be - as it's name says - a unique identifier. Modal will not be generated if the 'id' already exists in the DOM.
 * NOTE #2: when using URL parameter, target the trigger element to keep the popin in the DOM flow order for accessibility:
 * $('#myTriggerElement').modal({method: 'open', type: 'popin', id: 'myAwesomePopin', url: 'testUrl', fullscreen: true, title: 'TestPopin'})
 *
 */


var modalEvent;
(function (modalEvent) {
    modalEvent["close"] = "modal.close";
    modalEvent["open"] = "modal.open";
})(modalEvent || (modalEvent = {}));
var _modal = /** @class */ (function () {
    /**
     * Modal constructor.
     * @constructor
     * @param {JQuery} element - The div that should be opened in the modal.
     * @param {modalProperties} data - The options of display and execution of the modal.
     */
    function _modal($element, data) {
        var _this = this;
        this.$panelClass = 'modal__panelElement';
        this.$eventContainer = external_jQuery_default()('#eventContainer');
        this.nextPanel = function () {
            _this.updatePanelList();
            var $activePanel = _this.getWrapperElement(_this.panelActiveId);
            var $nextPanel = _this.getWrapperElement(_this.panelActiveId + 1);
            if ($nextPanel) {
                _this.prepareNextPanel($nextPanel);
                $activePanel.style.overflowY = 'hidden';
                _this.setTranslateX($activePanel, '-' + _this.panelWidth + 'px');
                setTimeout(function () {
                    _this.setTranslateX($nextPanel, '0');
                }, 50);
                $nextPanel.classList.add('active');
                $activePanel.classList.remove('active');
                _this.panelActiveId++;
                _this.$eventContainer.trigger('modal.nextPanel', _this.element.id);
            }
        };
        this.prevPanel = function () {
            _this.updatePanelList();
            var $activePanel = _this.wrappers.item(_this.panelActiveId);
            var $prevPanel = _this.wrappers.item(_this.panelActiveId - 1);
            if ($prevPanel) {
                _this.setTranslateX($activePanel, _this.panelWidth + 'px');
                _this.setTranslateX($prevPanel, '0');
                $prevPanel.classList.add('active');
                setTimeout(function () {
                    $activePanel.classList.remove('active');
                    $activePanel.removeAttribute('style');
                }, 200);
                $prevPanel.style.overflowY = 'auto';
                _this.panelActiveId--;
                _this.$eventContainer.trigger('modal.prevPanel', _this.element.id);
            }
        };
        var _a = data.type, type = _a === void 0 ? 'popin' : _a, _b = data.id, id = _b === void 0 ? 'modalId' + $element.attr('id') : _b, _c = data.classList, classList = _c === void 0 ? '' : _c, _d = data.fullscreen, fullscreen = _d === void 0 ? getScreenSize() == screenSizes.xs : _d, title = data.title, source = data.source, _e = data.url, url = _e === void 0 ? '' : _e, _f = data.block, block = _f === void 0 ? '' : _f, _g = data.unfixHeight, unfixHeight = _g === void 0 ? false : _g, _h = data.gradientOnScroll, gradientOnScroll = _h === void 0 ? false : _h, _j = data.scrollbarWidth, scrollbarWidth = _j === void 0 ? window.innerWidth - document.body.clientWidth : _j, _k = data.putToLeftSide, putToLeftSide = _k === void 0 ? false : _k, _l = data.showBackButton, showBackButton = _l === void 0 ? false : _l;
        this.element = document.getElementById($element === null || $element === void 0 ? void 0 : $element.attr('id'));
        this.id = id;
        this.source = source;
        this.title = title || '';
        this.classList = classList;
        this.type = type;
        this.fullscreen = fullscreen;
        this.url = url;
        this.block = block;
        this.unfixHeight = unfixHeight;
        this.gradientOnScroll = gradientOnScroll;
        this.scrollbarWidth = scrollbarWidth;
        this.putToLeftSide = putToLeftSide;
        this.showBackButton = showBackButton;
        this.wrappers = null;
        this.panelActiveId = 0;
        this.panelWidth = 0;
        // this.$eventContainer.on('modal.panel_next', { me: this, data: level1 }, this.nextPanel)
        this.$eventContainer.on('modal.panel_next', function (e, data) {
            var _a;
            if (((_a = _this.element) === null || _a === void 0 ? void 0 : _a.id) == data) {
                _this.nextPanel();
            }
        });
        this.$eventContainer.on('modal.panel_prev', function (e, data) {
            var _a;
            if (((_a = _this.element) === null || _a === void 0 ? void 0 : _a.id) == data) {
                _this.prevPanel();
            }
        });
    }
    // Open modal
    _modal.prototype.open = function () {
        var _this = this;
        var _a;
        this.eventsOnBeforeOpen();
        // Automatically swap depth of the modal with the last known zIndex.
        // 100 is an arbitrary value added to avoid other elements of the page to come on top of modal
        // That means even if a modal has already been generated, its zIndex will be updated on re-open
        var modalReference = this;
        var modalId = this.url !== '' ? modalReference.id : this.id;
        if (external_jQuery_default()("#" + modalReference.id).length === 0 || this.url !== '')
            this.wrap();
        // Delay execution to ensure modal exists before to animate with class
        // Accessibility: give focus to modal
        setTimeout(function () {
            modalReference.eventsOnOpen();
            var modal = document.getElementById(modalId);
            modal === null || modal === void 0 ? void 0 : modal.classList.add('modal--isOpen');
            modal === null || modal === void 0 ? void 0 : modal.setAttribute('tabindex', '0');
            modal === null || modal === void 0 ? void 0 : modal.setAttribute('aria-modal', 'true');
        }, 300);
        document.getElementById('website-container').style.top = ((_a = document.getElementById('banner-container')) === null || _a === void 0 ? void 0 : _a.clientHeight) + 'px';
        /* hide the scrollbar, add a padding equivalent to scrollbar to avoid shift, and place the body at minus is position */
        var getCurrentScrollPosition = window.pageYOffset;
        document.body.style.overflow = 'hidden';
        document.body.style.top = -getCurrentScrollPosition + 'px';
        document.body.style.paddingRight = this.scrollbarWidth + 'px';
        if (this.fullscreen) {
            document.getElementById(this.id).classList.add('modal--fullscreen');
        }
        this.resetPanel();
        setTimeout(function () {
            var _a;
            var buttonClose = (_a = document.getElementById(_this.id)) === null || _a === void 0 ? void 0 : _a.getElementsByClassName('modal_close')[0];
            buttonClose.focus();
        }, 500);
    };
    // Remove class, and keep the modal in DOM, in case it should be re-opened
    _modal.prototype.close = function () {
        var _a;
        var element = document.getElementById(this.id);
        element === null || element === void 0 ? void 0 : element.classList.remove('modal--isOpen');
        element === null || element === void 0 ? void 0 : element.classList.remove('modal--fullscreen');
        element === null || element === void 0 ? void 0 : element.setAttribute('tabindex', '-1');
        element === null || element === void 0 ? void 0 : element.setAttribute('aria-modal', 'false');
        // Remove no scroll on body only if there's no more modal opened
        var nbModal = document.getElementsByClassName('modal_wrapper modal--isOpen').length;
        if (nbModal <= 0) {
            document.getElementById('website-container').style.top = ((_a = document.getElementById('banner-container')) === null || _a === void 0 ? void 0 : _a.clientHeight) + 'px';
            /* Give back the default position of the body */
            document.body.style.overflow = '';
            document.body.style.top = window.pageYOffset + 'px';
            document.body.style.paddingRight = '0px';
        }
        this.eventsOnClose();
    };
    // Remove from DOM
    _modal.prototype.destroy = function () {
        window.Utils.Common.stopNoScroll();
        external_jQuery_default()("#" + this.id).remove();
        this.eventsOnDestroy();
    };
    // Generate the modal DOM structure
    _modal.prototype.wrap = function () {
        var depth = parseInt(external_jQuery_default()('.modal_wrapper').last().css('zIndex')) + 10001 || 10001;
        var modalReference = this;
        var modalType = this.type;
        var $modalWrapper = document.createElement('section');
        $modalWrapper.id = this.id;
        $modalWrapper.ariaModal = 'false';
        $modalWrapper.classList.add('modal_wrapper', "modal--" + modalType);
        $modalWrapper.style.zIndex = (depth + 1).toString();
        if (this.classList)
            $modalWrapper.classList.add(this.classList);
        if (this.unfixHeight)
            $modalWrapper.classList.add('modal--unfixHeight');
        if (this.putToLeftSide)
            $modalWrapper.classList.add('modal--leftSide');
        var $modalContainer = document.createElement('div');
        $modalContainer.id = 'modalContainer';
        $modalContainer.classList.add('modal_container');
        var $modalContent = document.createElement('div');
        $modalContent.classList.add('modal_content');
        var $modalTitleBar = document.createElement('div');
        $modalTitleBar.classList.add('modal_titleBar');
        var $modalCloseContainer = document.createElement('div');
        $modalCloseContainer.classList.add('modal_close_container');
        var $modalClose = document.createElement('button');
        $modalClose.classList.add('modal_close');
        $modalClose.ariaLabel = window.labels.MobileV3_Common.Return;
        $modalClose.addEventListener('click', function () {
            modalReference.close();
        });
        var $modalIcon = document.createElement('i');
        $modalIcon.classList.add('lr-icon', 'lr-icon-cross-small');
        $modalClose.append($modalIcon);
        $modalCloseContainer.append($modalClose);
        $modalTitleBar.append($modalCloseContainer);
        if (this.showBackButton) {
            var $modalBackButton = document.createElement('button');
            $modalBackButton.classList.add('modal_back');
            $modalBackButton.addEventListener('click', function () {
                modalReference.close();
            });
            var $modalBackIcon = document.createElement('i');
            $modalBackIcon.classList.add('lr-icon', 'lr-icon-back');
            $modalBackButton.append($modalBackIcon);
            $modalTitleBar.append($modalBackButton);
        }
        // Accessibility: give an aria-describedby to modal to give it a speakable title
        if (this.title !== '' || this.title !== undefined) {
            var modalTitleId = this.title.replace(/\s+/g, '').trim();
            if (modalType !== 'iceberg') {
                var $modalTitle = document.createElement('h3');
                $modalTitle.id = modalTitleId;
                $modalTitle.textContent = this.title;
                $modalTitle.classList.add('modal_title', 'lrTitle', 'lrTitle--3', 'lrTitle--semiBold');
                $modalWrapper.setAttribute('aria-describedby', modalTitleId);
                $modalContainer.append($modalTitleBar);
                if (this.title.length > 0) {
                    $modalContent.append($modalTitle);
                }
            }
            else {
                var $modalTitle = document.createElement('h5');
                $modalTitle.id = modalTitleId;
                $modalTitle.textContent = this.title;
                $modalTitle.classList.add('modal_title', 'lrTitle', 'lrTitle--5', 'lrTitle--semiBold');
                $modalWrapper.setAttribute('aria-describedby', modalTitleId);
                $modalTitleBar.append($modalTitle);
                $modalContent.append($modalTitleBar);
            }
        }
        $modalContainer.append(this.setOverlay());
        if (this.url !== '' && this.block !== '') {
            var selector_1 = this.block;
            external_jQuery_default()($modalContent).addLoading();
            external_jQuery_default().ajax({
                url: this.url,
                success: function (data) {
                    var $content = document.createElement('div');
                    $content.innerHTML = data;
                    if (selector_1 !== '') {
                        $content = $content.querySelector(selector_1);
                    }
                    if ($content) {
                        $modalContent.append($content);
                    }
                },
                complete: function () {
                    external_jQuery_default()($modalContent).removeLoading();
                },
            });
        }
        else {
            $modalContent.append(this.element);
        }
        if (this.element != null) {
            this.element.style.display = 'block';
        }
        $modalContainer.append($modalContent);
        // Accessibility and experience: close modal with Esc key
        document.addEventListener('keyup', function (event) {
            if (event.key === 'Escape')
                modalReference.close();
        });
        // Append in the DOM flow right after the clicked element (source)
        external_jQuery_default()('body').append($modalWrapper);
        var $modalGradient = document.createElement('div');
        $modalGradient.classList.add('modal_gradient');
        var gradientScroll = this.gradientOnScroll;
        if (gradientScroll) {
            $modalContainer.append($modalGradient);
        }
        $modalWrapper.append($modalContainer);
        // Place dynamically the gradient at the bottom of the popin
        var placeGradientInPopin = function () {
            if (gradientScroll && modalType === 'popin') {
                $modalGradient.style.bottom = '16px';
            }
        };
        placeGradientInPopin();
        var lastScrollTop = 0;
        $modalContent.addEventListener('scroll', function () {
            var st = external_jQuery_default()(this).scrollTop();
            if (st > 1) {
                $modalTitleBar.classList.add('modal_titleBar--hasShadow');
            }
            else if (lastScrollTop < 8) {
                $modalTitleBar.classList.remove('modal_titleBar--hasShadow');
            }
            else if (st === window.innerHeight) {
            }
            lastScrollTop = st;
            if (gradientScroll) {
                placeGradientInPopin();
                var scrollToCheck = Math.round(external_jQuery_default()($modalContent).scrollTop() + external_jQuery_default()($modalContent).innerHeight());
                if (scrollToCheck >= $modalContent.scrollHeight - 20) {
                    external_jQuery_default()($modalGradient).fadeOut('200');
                }
                else {
                    external_jQuery_default()($modalGradient).fadeIn('200');
                }
            }
        });
    };
    _modal.prototype.setOverlay = function () {
        var modalReference = this;
        var $modalOverlay = document.createElement('div');
        $modalOverlay.classList.add('modal_overlay');
        $modalOverlay.addEventListener('click', function () {
            modalReference.close();
        });
        return $modalOverlay;
    };
    _modal.prototype.eventsOnBeforeOpen = function () { };
    _modal.prototype.eventsOnOpen = function () {
        var _a;
        // If content is short, we hide the gradient at the bottom of the screen
        if (external_jQuery_default()("#" + this.id).find('.modal_content > div').not('.modal_titleBar').first().innerHeight() + external_jQuery_default()("#" + this.id).find('.modal_titleBar').innerHeight() < window.innerHeight - 32) {
            ;
            [].forEach.call((_a = document.getElementById(this.id)) === null || _a === void 0 ? void 0 : _a.getElementsByClassName('.modal_gradient'), function (el) {
                el.style.display = 'none';
            });
            // Avoid scrolling on background on Mobile Safari
            document.addEventListener('touchmove', function (event) {
                event.preventDefault;
            }, { passive: false });
            document.addEventListener('touchforcechange', function (event) {
                event.preventDefault;
            }, { passive: false });
        }
    };
    _modal.prototype.eventsOnClose = function () {
        var _a;
        external_jQuery_default()('#eventContainer').trigger(modalEvent.close);
        (_a = this.source) === null || _a === void 0 ? void 0 : _a.trigger('focus');
        // Remove event that avoid scrolling on background on Mobile Safari
        document.removeEventListener('touchmove', function () { });
        document.removeEventListener('touchforcechange', function () { });
    };
    _modal.prototype.eventsOnDestroy = function () { };
    _modal.prototype.prepareNextPanel = function (panel) {
        var offset = window.getComputedStyle(document.getElementsByClassName('modal_content')[0]).width;
        panel.style.display = 'flex';
        panel.style.flexDirection = 'column';
        panel.style.transition = '0s';
        panel.style.transform = 'translateX(' + offset + ')';
        panel.style.position = 'absolute';
        panel.style.left = '0';
        panel.style.top = '0';
        panel.style.width = '100%';
        panel.style.height = '100%';
        panel.style.overflowY = 'hidden';
        setTimeout(function () { }, 300);
        var el = panel.nextElementSibling;
        while (el) {
            var sib = el.nextElementSibling;
            sib.style.left = parseInt(offset) * 2 + 'px';
            el = el.nextElementSibling;
        }
    };
    _modal.prototype.setTranslateX = function (element, value) {
        element.style.transition = '0.2s';
        element.style.transform = 'translateX(' + value + ')';
    };
    _modal.prototype.getWrapperElement = function (id) {
        return this.wrappers.item(id);
    };
    _modal.prototype.resetPanel = function () {
        var $modal = document.getElementById(this.id);
        if ($modal) {
            this.wrappers = $modal.getElementsByClassName(this.$panelClass);
            var alreadyActive = $modal.getElementsByClassName(this.$panelClass + ' active').length > 0;
            if (this.wrappers && this.wrappers.length > 0 && !alreadyActive) {
                this.wrappers[0].classList.add('active');
            }
        }
    };
    _modal.prototype.updatePanelWidth = function () {
        this.panelWidth = parseInt(window.getComputedStyle(document.getElementsByClassName('modal_content')[0]).width);
    };
    _modal.prototype.updatePanelList = function () {
        this.updatePanelWidth();
        var $modal = document.getElementById(this.id);
        if ($modal) {
            this.wrappers = $modal.getElementsByClassName(this.$panelClass);
        }
    };
    return _modal;
}());
var modal = function (data) {
    return this.each(function () {
        // Initialize modal and attach data for manipulation
        external_jQuery_default()(this).data('modal', new _modal(external_jQuery_default()(this), data));
        if (typeof data === 'string') {
            // Case: opening a popin with no parameters: $('.element').modal('open')
            external_jQuery_default()(this).data('modal')[data]();
        }
        else if (typeof data === 'object' && typeof data.method === 'string') {
            // Case: opening a modal with parameters: $('.element').modal({method:'open'})
            external_jQuery_default()(this).data('modal')[data.method]();
        }
    });
};
/* harmony default export */ var Widget_Modal = (modal);

;// CONCATENATED MODULE: ./js_next/Common/Widget_FooterServiceWithPicto.ts
var Widget_FooterServiceWithPicto = function (widgets) {
    var _a;
    var isMobile = ((_a = document.querySelector('body')) === null || _a === void 0 ? void 0 : _a.classList.contains('is-mobile')) ? true : false;
    var modalOpening = isMobile ? 'iceberg' : 'panel';
    var triggerModal = function (item, index) {
        $(item).modal({
            method: 'open',
            type: modalOpening,
            url: item.dataset.url,
            id: 'reinsurancePanel_' + index,
            block: '.staticContent',
        });
    };
    var setModalListener = function (reinsuranceItem, index) {
        if (reinsuranceItem && reinsuranceItem.dataset.url && reinsuranceItem.dataset.ispanel && reinsuranceItem.dataset.url.length > 0) {
            reinsuranceItem.addEventListener("click", function () { return triggerModal(reinsuranceItem, index); });
        }
    };
    var applyLightSlider = function (nbElements) {
        var mobileSize = 1;
        var tabletSize = 2;
        var desktopSize = 4;
        var getNbElementsOrSize = function (size) {
            if (nbElements > size) {
                return size;
            }
            else {
                return nbElements;
            }
        };
        var getAutoSetting = function (size) {
            return nbElements > size;
        };
        $('.pdp-landing-services-container').lightSlider({
            item: getNbElementsOrSize(desktopSize),
            speed: 1000,
            auto: getAutoSetting(desktopSize),
            controls: false,
            pager: false,
            loop: true,
            pause: 6000,
            enableDrag: false,
            responsive: [
                {
                    breakpoint: 1200,
                    settings: {
                        item: getNbElementsOrSize(tabletSize),
                        auto: getAutoSetting(tabletSize)
                    }
                },
                {
                    breakpoint: 768,
                    settings: {
                        item: getNbElementsOrSize(mobileSize),
                        auto: getAutoSetting(mobileSize)
                    }
                }
            ]
        });
        $('.pdp-landing-services .marginWidget').css({ "opacity": "100" });
    };
    return widgets.each(function (index) {
        var _a;
        var reinsuranceItem = this.querySelector(".reinsurance__item");
        if (reinsuranceItem)
            setModalListener(reinsuranceItem, index);
        var container = (_a = this.parentElement) === null || _a === void 0 ? void 0 : _a.parentElement;
        if ((container === null || container === void 0 ? void 0 : container.classList.contains("pdp-landing-services-container")) && !(container === null || container === void 0 ? void 0 : container.classList.contains("lightSlider"))) {
            var nbElements = $('.pdp-landing-services-container > [data-widgettemplate = FooterServiceWithPicto]').length;
            applyLightSlider(nbElements);
        }
    }).each(function () {
        var widgetid = $(this).data('widgetid');
        $(".marginWidget.clone[data-widgetid='" + widgetid + "']").each(function (index) {
            var reinsuranceItem = this.querySelector(".reinsurance__item");
            if (reinsuranceItem)
                setModalListener(reinsuranceItem, index);
        });
    });
};
/* harmony default export */ var Common_Widget_FooterServiceWithPicto = (Widget_FooterServiceWithPicto);

;// CONCATENATED MODULE: ./js_next/Common/Widget_FooterBlockOfLogos.ts
var Widget_FooterBlockOfLogos = function (widgets) {
    // variables
    var nextId = 0;
    var gap = 10;
    var TO = { RIGHT: "->", LEFT: "<-" };
    // handlers
    var hide = function (item) { if (item) {
        item.style.display = "none";
    } };
    var show = function (item) { if (item) {
        item.style.display = "flex";
    } };
    var toggleIcons = function (elem) {
        if (elem != null) {
            var list = elem;
            if (list.scrollLeft <= (list.scrollWidth - list.offsetWidth))
                show(list.nextElementSibling);
            if (list.scrollLeft >= (list.scrollWidth - list.offsetWidth))
                hide(list.nextElementSibling);
            if (list.scrollLeft > 0)
                show(list.previousElementSibling);
            if (list.scrollLeft <= 0)
                hide(list.previousElementSibling);
        }
    };
    var getSiblings = function (list) {
        var sibling = null;
        var nextElement = null;
        var selector = list.dataset.name ? "[data-id=\"" + nextId + "\"]" : null;
        if (selector) {
            nextElement = list.querySelector(selector);
            if (nextElement)
                sibling = nextElement.nextElementSibling;
        }
        return { nextElement: nextElement, sibling: sibling };
    };
    var getOffset = function (next, sib) {
        var nextElement = next;
        var sibling = sib;
        if (nextElement) {
            if (sibling)
                return nextElement.offsetWidth > sibling.offsetWidth ? nextElement.offsetWidth : sibling.offsetWidth;
            else
                return nextElement.offsetWidth;
        }
        return 0;
    };
    var scroll = function (direction, list) {
        // update current Id 
        nextId += direction === TO.RIGHT ? 2 : -2;
        // get elements
        var _a = getSiblings(list), nextElement = _a.nextElement, sibling = _a.sibling;
        // compute column offset
        var nextOffset = getOffset(nextElement, sibling) + gap;
        // update list scrollLeft
        direction === TO.RIGHT ? list.scrollLeft += nextOffset : list.scrollLeft -= nextOffset;
    };
    var setListListnener = function (list) {
        var childrenWidth = 0;
        var index = 0;
        for (index; index < list.children.length; index++) {
            var child = list.children[index];
            childrenWidth += child.offsetWidth;
            child.dataset.id = index.toString();
        }
        list.addEventListener("scroll", function () { return toggleIcons(list); });
        if (childrenWidth / 2 > list.offsetWidth)
            show(list.nextElementSibling);
    };
    var setIconsListeners = function (widget) {
        var prevIcon = widget.previousElementSibling;
        var nextIcon = widget.nextElementSibling;
        var icons = [];
        prevIcon && nextIcon ? icons = [prevIcon, nextIcon] : icons = [];
        icons.forEach(function (icon) {
            icon.classList.contains('prev-icon') ?
                icon.addEventListener('click', function () { return scroll(TO.LEFT, icon.nextElementSibling); }) :
                icon.addEventListener('click', function () { return scroll(TO.RIGHT, icon.previousElementSibling); });
        });
    };
    return widgets.each(function () {
        setListListnener(this);
        setIconsListeners(this);
        this.classList.add('hasScroll');
    });
};
/* harmony default export */ var Common_Widget_FooterBlockOfLogos = (Widget_FooterBlockOfLogos);

;// CONCATENATED MODULE: ./js_next/Common/Widget_FooterBlockOfLinks.ts
var Widget_FooterBlockOfLinks = function (widgets) {
    var isMobile = document.querySelector('body').classList.contains('is-mobile') ? true : false;
    var modalOpening = isMobile ? 'iceberg' : 'panel';
    var triggerModal = function (panelItem, index) {
        console.log(panelItem.dataset.url);
        $(panelItem).modal({
            method: 'open',
            type: modalOpening,
            url: panelItem.dataset.url,
            id: 'reinsurancePanel_' + index,
            block: '.staticContent',
        });
    };
    var setModalListener = function (panelItem, index) {
        if (panelItem && panelItem.dataset.url) {
            panelItem.addEventListener("click", function () { return triggerModal(panelItem, index); });
        }
    };
    return widgets.each(function (index) {
        var panelItems = this.querySelectorAll(".footer-services-link--isPanel");
        panelItems.forEach(function (panelItem) {
            if (panelItem != null)
                setModalListener(panelItem, index);
        });
    });
};
/* harmony default export */ var Common_Widget_FooterBlockOfLinks = (Widget_FooterBlockOfLinks);

;// CONCATENATED MODULE: ./js_next/PDP/Ui_Widgets.ts

var UiWidgets = function () {
    var $widgetsContainer;
    var $widgetsContainerIds;
    var $widgetsIds;
    // DOM
    setTimeout(function () {
        $widgetsContainer = external_jQuery_default()('#widgetsContainer');
        $widgetsContainerIds = external_jQuery_default()("#widgetsContainerIds");
        if ($widgetsContainerIds.length)
            $widgetsIds = JSON.parse($widgetsContainerIds.text());
        if ($widgetsContainer.length && $widgetsContainerIds.length)
            requestWidgetsInfos();
    }, 500);
    // Methods
    var requestWidgetsInfos = function () {
        var request = '/ServiceWidgets/LoadWidgets';
        external_jQuery_default().ajax({
            url: request,
            type: 'POST',
            dataType: 'json',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({
                "request": {
                    "WidgetIds": $widgetsIds.widgetsIds,
                    "WidgetPageType": $widgetsIds.widgetPageType,
                    "LoadBundles": true
                }
            }),
            success: function (data) {
                var widgets2Display = external_jQuery_default()('<div></div>').append(data.Html);
                $widgetsContainer.html(widgets2Display.html());
            },
            error: function (error) {
                console.log('An error has occured while fetching widgets data: ' + error);
            },
        });
    };
    // Init
};
/* harmony default export */ var Ui_Widgets = (UiWidgets);

;// CONCATENATED MODULE: ./js_next/Common/Common.ts






var Common = function () {
    // Properties
    // DOM
    // Methods
    // Events
    // Init
    (external_jQuery_default()).fn.modal = Widget_Modal;
    (external_jQuery_default()).fn.widgetFooterServiceWithPicto = Common_Widget_FooterServiceWithPicto;
    (external_jQuery_default()).fn.widgetFooterBlockOfLogos = Common_Widget_FooterBlockOfLogos;
    (external_jQuery_default()).fn.widgetFooterBlockOfLinks = Common_Widget_FooterBlockOfLinks;
    Ui_Widgets();
};
Common();

/******/ })()
;;
/* Simple JavaScript Inheritance for ES 5.1
 * based on http://ejohn.org/blog/simple-javascript-inheritance/
 * (inspired by base2 and Prototype)
 * MIT Licensed.
 * GitHub  https://gist.github.com/mikecao/dfabf098b5540f0bba9a
 */
(function (global) {
    "use strict";
    var fnTest = /xyz/.test(function () { xyz; }) ? /\b_super\b/ : /.*/;

    // The base Class implementation (does nothing)
    function BaseClass() { }

    // Create a new Class that inherits from this class
    BaseClass.extend = function (props) {
        var _super = this.prototype;

        // Set up the prototype to inherit from the base class
        // (but without running the init constructor)
        var proto = Object.create(_super);

        // Copy the properties over onto the new prototype
        for (var name in props) {
            // Check if we're overwriting an existing function
            proto[name] = typeof props[name] === "function" &&
              typeof _super[name] == "function" && fnTest.test(props[name])
              ? (function (name, fn) {
                  return function () {
                      var tmp = this._super;

                      // Add a new ._super() method that is the same method
                      // but on the super-class
                      this._super = _super[name];

                      // The method only need to be bound temporarily, so we
                      // remove it when we're done executing
                      var ret = fn.apply(this, arguments);
                      this._super = tmp;

                      return ret;
                  };
              })(name, props[name])
              : props[name];
        }

        // The new constructor
        var newClass = typeof proto.init === "function"
          ? proto.hasOwnProperty("init")
            ? proto.init // All construction is actually done in the init method
            : function SubClass() { _super.init.apply(this, arguments); }
          : function EmptyClass() { };

        // Populate our constructed prototype object
        newClass.prototype = proto;

        // Enforce the constructor to be what we expect
        proto.constructor = newClass;

        // And make this class extendable
        newClass.extend = BaseClass.extend;

        return newClass;
    };

    // export
    global.Class = BaseClass;
})(this);;
(function (global, $) {
    'use strict';

  global.LR_App = {
    Components: {},
    events: {}
  };

    var app = global.LR_App;

  global.pageEvent = {
    loaded: 'page.loaded'
  };

  global.Page = global.Class.extend({
    init: function (listBlocks, properties, modelName, trackingNameOverride) {
      // Private properties
      var me = this;
      var Components = global.LR_App.Components;
      var instances = {};

      // Public properties
      me.instances = instances;

      // DOM picks
      var dataLayerDomPick = $('#LR_dataLayer');
      var dataLayerObj = Utils.Common.strCanBeParse(dataLayerDomPick.text()) ? JSON.parse(dataLayerDomPick.text()) : {};

      // DOM building element

      // DOM adjustments

      // Private methods
      /**
       * @param {string} type - ex. 'UI', 'widget'...
       * @param {string} comp - ex. 'UiFooter'
       * @param {string} name - ex. 'footer'
       */
      var initiateComponent = function (type, name, component) {
        if (!instances[type]) {
          instances[type] = {};
        }
        if (!instances[type][name]) {
          if (typeof Components[component] === 'function') {
            instances[type][name] = new Components[component](me);
          } else if (typeof component === 'function') {
            instances[type][name] = new component(me);
          } else {
            $(global).one(component + ':available', function () {
              instances[type][name] = new Components[component](me);
            });
          }
        }
      };

      var setLocalPersoData = function (apiDataResponse) {
        global.perso_data = apiDataResponse;
        var dataToLocal = apiDataResponse;
        dataToLocal.hasBeenSet = new Date();
        dataToLocal.userLogged = dataLayerObj.isIdentified;
        localStorage.setItem('localPersoData', JSON.stringify(dataToLocal));
      };

      // Public methods
      /**
       * @param {string} comp - The name of the component, ex. 'UiFooter'
       * @param {string} name - The name of the instance, ex. 'footer'
       */
      me.initiateUiComponent = function (name, comp) {
        initiateComponent('ui', name, comp);
      };

      // Events

      // Init

      // To refacto
      this.$container = $('#corePage');
      this.$eventContainer = $('#eventContainer');

      $.extend(this, JSON.parse($('#dataGlobal').text()));
      this.shortCountry = this.country.replace('co.', '');
      this.appPath = '';
      this.screenSize = global._LaRedoute.getScreenType();
      this.isMobile = this.screenSize === 1;
      this.isTablet = this.screenSize > 1 && this.screenSize < 4;
      this.isDesktop = this.screenSize === 4;
      this.tracking = {};
      $.extend(this.tracking, global.wa_data);
      this.isLogged = dataLayerObj.isLoggedIn;

      this.asyncBlocs = {};
      this.postInitCb = [];
      this.state = 'init';
      this.urlSuffixe = '.aspx';
      this.lang = this.getLang();

      if (typeof properties === global.varType.fn) properties.apply(this);

      if (global.defaultBlocsAlreadyLoaded === undefined) {
        this.defaultListBlocks = JSON.parse($('#dataDefaultListBlocks').text());
        if (typeof listBlocks === 'object') this.Blocs = $.extend(this.defaultListBlocks, listBlocks);
        else this.Blocs = this.defaultListBlocks;
        global.defaultBlocsAlreadyLoaded = 'loaded';
      } else if (typeof listBlocks === 'object') {
        this.Blocs = listBlocks;
      } else {
        this.Blocs = {};
      }
      delete this.defaultListBlocks;

      var pageNameJS = global.pageNameJS[me.name],
        // modelName = 'Model' + pageNameJS,
        Model = global[modelName];

      this.Model = typeof Model === global.varType.fn ? new Model(modelName, properties) : new global.Model('Generic', properties);

      // properties.isChildPage is a temp fix only for the layerlogin page on the basket
      // layerlogin has to be improved as a component (and not a page)
      if (!properties) properties = {};
      if (!properties.isChildPage) {
        var servicesName = 'Services' + pageNameJS,
          Services = global[servicesName],
          trackingName = trackingNameOverride || 'Tracking' + pageNameJS,
          Tracking = global[trackingName];

        this.Services = typeof Services === global.varType.fn ? new Services(servicesName, this) : new global.Services('Generic', this);
        this.Tracking = typeof Tracking === global.varType.fn ? new Tracking(trackingName, this) : new global.Tracking('Generic', this);
      }

      if (!me.Model.isChildProduct && !properties.isChildPage) {
        global.FinaliseTracking();
      }

      if (typeof this.Blocs === 'object') {
        var i = 0;
        for (i in this.Blocs) {
          if (this.Blocs[i].indexOf(',') !== -1) {
            this.asyncBlocs[i] = this.Blocs[i];
          } else {
            try {
              this.Blocs[i] = new global[this.Blocs[i]](this, this.Blocs[i]);

              this.Blocs[i].isLoaded();
            } catch (e) {
              console.error('Page.ctor : can`t create blocs instance ' + i + ' for page ' + global.location.pathname + ' [' + e.message + ']');
            }
          }
        }
      }

      if (!me.Model.isChildProduct && !me.Model.isChildPage) {
        initiateComponent('handler', 'master', 'HandlerMaster');
      }

      $(global).on('load', function () {
        for (i in me.asyncBlocs) {
          // console.log('==> async UiBloc ' + i);
          var bloc = me.asyncBlocs[i].split(',')[0];
          me.Blocs[i] = new global[bloc](me, bloc);
          me.Blocs[i].isLoaded();
        }

        me.postInitCb.forEach(function (e) {
          e.cb.call(me, e.params);
        });

        me.state = 'ready';
      });

      // Check PersonnalisationData Cache
      var $apiDataFromBackEnd = $('#ApiDataResponse');

      if ($apiDataFromBackEnd.length !== 0 && Utils.Common.strCanBeParse($apiDataFromBackEnd.text())) {
        setLocalPersoData(JSON.parse($apiDataFromBackEnd.text()));
      } else {
        var haveToCallPersoDataApi = true;
        var localPersoData = null;
        var localStoragePersoData = localStorage.getItem('localPersoData');
        if (localStoragePersoData && localStoragePersoData !== 'undefined') {
          localPersoData = JSON.parse(localStoragePersoData);
        }

        if (localPersoData !== null) {
          var timestamp = new Date(localPersoData.hasBeenSet);
          var dataLogged = localPersoData.userLogged;
          var now = new Date();
          var diff = (now.getTime() - timestamp.getTime()) / (1000 * 60 * 60);
          if (diff < 2 && dataLogged === dataLayerObj.isIdentified) {
            haveToCallPersoDataApi = false;
            global.perso_data = localPersoData;
          }
        }
        if (global.contextInfo.Configuration.ConfigFlags.EnableGetCustomerPersonalisationData && haveToCallPersoDataApi) {
          me.Model.$eventContainer.trigger(global.globalServiceEvent.getPersonnalisationDataRequested).on(global.globalServiceEvent.getPersonnalisationDataSucceeded, function (e, data) {
            setLocalPersoData(data);
          });
        }
      }
    },
    PushPostInitCallback: function (cb, params) {
      if (typeof cb === 'function') {
        if (this.state === 'init') {
          this.postInitCb.push({ cb: cb, params: params });
        } else cb.call(this, params);
      }
    },
    waitForBlockLoad: function (blockName, context, callback, callbackParams) {
      if (typeof blockName !== 'string' || typeof callback !== 'function') {
        return;
      }

      var bloc = this.Blocs[blockName];
      if ($.inArray(typeof bloc, ['object', 'undefined']) > -1) {
        return callback.apply(context, callbackParams);
      } else if (typeof bloc === 'string') {
        bloc = bloc.replace(',async', ''); // fix for async bloc
        this.$container.on(bloc + '.loaded', function () {
          return callback.apply(context, callbackParams);
        });
      }
    },
    Update: function () {
      for (var i in this.Blocs) {
        this.Blocs[i].Update();
      }
    },
    DisplayErrorMessage: function (buttonSelector, errorMessage, css) {
      css = css === undefined ? 'default' : css;
      var selector, $elem;
      if (typeof buttonSelector === 'string') {
        selector = buttonSelector;
        $elem = $(selector);
      } else {
        $elem = buttonSelector;
        selector = $elem.selector;
      }
      if ($elem.prev('.error-tooltip').length === 0) {
        global
          .$('<div>', {
            class: 'error-tooltip ' + css,
            html: errorMessage
          })
          .insertBefore(selector);
      } else {
        var $errorBlock = $elem.prev('.error-tooltip');

        $errorBlock.removeClass().addClass('error-tooltip ' + css);
        $errorBlock.find('span').text('errorMessage');
        $errorBlock.slideDown(300);
      }
    },
    HideErrorMessage: function (buttonSelector) {
      var $elem;
      if (typeof buttonSelector === 'string') $elem = $(buttonSelector);
      else $elem = buttonSelector;
      $elem.prev('.error-tooltip').slideUp(300);
    },
    DisplayPopOverMessage: function (elementSelector, message, customDuration, customPosition) {
      global
        .$(elementSelector)
        .attr('data-toggle', 'popover')
        .popover({
          html: true,
          trigger: 'manual',
          placement: customPosition !== undefined ? customPosition : 'top',
          content: message
        })
        .popover('toggle');

      setTimeout(
        function () {
          $(elementSelector).popover('hide');
        },
        customDuration !== undefined ? customDuration : 4000
      );
    },
    HidePopOverMessage: function (elementSelector) {
      $(elementSelector).popover('hide');
    },
    GetCurrentPage: function () {
      return $('body').data('pagename');
    },
    getLang: function () {
      return this.countryCode.substring(0, 2);
    },
    isSite: function (siteId) {
      return this.siteId == siteId;
    },
    isSiteBE: function () {
      return this.isSite(global.Utils.Enum.SiteId.BE);
    },
    isSiteNL: function () {
      return this.isSite(global.Utils.Enum.SiteId.NL);
    },
    isSiteCH: function () {
      return this.isSite(global.Utils.Enum.SiteId.CH);
    },
    isSiteCOM: function () {
      return this.isSite(global.Utils.Enum.SiteId.COM);
    },
    isSiteES: function () {
      return this.isSite(global.Utils.Enum.SiteId.ES);
    },
    isSiteFR: function () {
      return this.isSite(global.Utils.Enum.SiteId.FR);
    },
    isSiteIT: function () {
      return this.isSite(global.Utils.Enum.SiteId.IT);
    },
    isSitePL: function () {
      return this.isSite(global.Utils.Enum.SiteId.PL);
    },
    isSitePT: function () {
      return this.isSite(global.Utils.Enum.SiteId.PT);
    },
    isSiteRU: function () {
      return this.isSite(global.Utils.Enum.SiteId.RU);
    },
    isSiteUK: function () {
      return this.isSite(global.Utils.Enum.SiteId.UK);
    },
    isLoaded: function () {
      global.$eventContainer.trigger(global.pageEvent.loaded);
    }
  });

  global.UiBloc = app.CoreComponent = global.Class.extend({
    init: function (page, name, parent) {
      this.Page = page;
      this.Name = name || 'Unnamed component';
      if (page) {
        this.Model = page.Model;
      }
      if (typeof parent === 'object') this.Parent = parent;
    },
    isLoaded: function () {
      this.Page.$container.trigger(this.Name + '.loaded');
      global.$eventContainer.trigger(this.Name + '.loaded');
    }
  });

  global.Model = global.Class.extend({
    init: function (name, properties) {
      // Private properties
      var me = this;

      // Public properties
      me.Name = name;
      $.extend(me, JSON.parse($('#mainModel').text()));
      $.extend(me, JSON.parse($('#LR_dataLayer').text()));
      me.siteName = global.siteName[me.site];
      if (typeof properties === global.varType.obj) $.extend(me, properties);
      if (!me.pageName) me.pageName = 'no value';

      // DOM picks
      me.$container = $('#corePage');
      me.$eventContainer = $('#eventContainer');

      // DOM building element

      // DOM adjustments

      // Private methods

      // Public methods
      /**
       * Get the search informations
       * @param {string} keyword the keyword used for the search
       * @param {string | undefined} type the type of the search (design for eVar105: https://laredoute.atlassian.net/wiki/spaces/WEBA/pages/723091460/eVar105+-+Search+Description)
       * @returns A stringified JSON with two properties, searchType and searchKeyword
       */
      me.get_searchInfo = function (keyword, type) {
        var getKeywordType = function () {
          if (type !== undefined) {
            return type;
          }
          var isProductId = keyword.match(/^3|5[0-9]{8}$/);
          var isPrintCode = !isProductId && keyword.match(/^[0-9]{3}[. ]?[0-9]{4}$/);
          var isConceptNumber = !isProductId && !isPrintCode && keyword.match(/^[a-zA-Z]{3}[0-9]{3}$/);
          if (isProductId) return 'type_number_productid';
          if (isPrintCode) return 'type_number_printcode';
          if (isConceptNumber) return 'type_number_conceptnumber';
          return 'type_keyword_text';
        };
        return JSON.stringify({
          searchType: getKeywordType(),
          searchKeyword: keyword
        });
      };

      // Events

      // Init
    }
  });

  /**
   * @param {string} name The name of the component
   * @param {{init: function}} compObject The component constructor. All the code should be in an init method
   * @param {string} extendedFrom [Optionnal] the name of the extended component
   */
  app.addComponent = function (name, init, extendedFrom) {
    var BaseComponent;

    if (extendedFrom && app.Components[extendedFrom]) {
      BaseComponent = app.Components[extendedFrom];
    } else {
      BaseComponent = app.CoreComponent;
    }

    app.Components[name] = BaseComponent.extend({
      init: init
    });
  };

  /**
   * @param {string} name
   * @param {{init: function}} compObject
   */
  app.extendComponent = function (name, init) {
    app.addComponent(name, init, name);
  };
})(window, window.jQuery);
;
(function (global, $) {
    'use strict';

    global.globalServiceEvent = {
        addToCartRequested: 'service.addToCart.requested',
        addToCartAnswered: 'service.addToCart.answered',
        addToCartSucceeded: 'service.addToCart.succeeded',
        addToCartFailed: 'service.addToCart.failed',
        addLoyaltyToCartRequested: 'service.addLoyaltyToCart.requested',
        addLoyaltyToCartAnswered: 'service.addLoyaltyToCart.answered',
        addLoyaltyToCartSucceeded: 'service.addLoyaltyToCart.succeeded',
        addLoyaltyToCartFailed: 'service.addLoyaltyToCart.failed',
        removeLoyaltyToCartRequested: 'service.removeLoyaltyToCart.requested',
        removeLoyaltyToCartAnswered: 'service.removeLoyaltyToCart.answered',
        removeLoyaltyToCartSucceeded: 'service.removeLoyaltyToCart.succeeded',
        removeLoyaltyToCartFailed: 'service.removeLoyaltyToCart.failed',
        getPersonnalisationDataRequested:
            'service.getPersonnalisationData.requested',
        getPersonnalisationDataAnswered:
            'service.getPersonnalisationData.answered',
        getPersonnalisationDataSucceeded:
            'service.getPersonnalisationData.succeeded',
        getPersonnalisationDataFailed: 'service.getPersonnalisationData.failed'
    };

    global.Services = global.Class.extend({
        init: function (name, page) {
            // Private properties
            var me = this;
            var model = page.Model;

            // Public properties
            me.Name = name;

            // DOM picks

            // DOM building element

            // DOM adjustments

            // Private methods
            var addToCart = function (args) {
                var baseDirectoryPrefix = '';
                if (contextInfo.EnvironmentBaseDirectory != '') {
                    baseDirectoryPrefix = '/' + contextInfo.EnvironmentBaseDirectory;
                }
                return $.ajax({
                    async: false,
                    cache: false,
                    dataType: 'json',
                    url: baseDirectoryPrefix + '/shoppingbasket/additemtocart',
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    data: JSON.stringify(args)
                });
            };
                        
            var addLoyaltyToCart = function (args) {
                var antiForgeryToken = $("#antiForgeryToken").val();
                var AJAXobject = {
                    async: true,
                    cache: false,
                    url: '/serviceproduct/addloyaltytocart',
                    headers:
                    {
                        'RequestVerificationToken': antiForgeryToken
                    },
                    type: 'POST',
                    success: function () {
                        global._LaRedoute.updateBasketCountItem();
                    },
                    error: function (error) {
                        console.log(
                            'An error has occured while fetching LoyaltyLRAndMeBox : ' +
                                error
                        );
                    }
                };
                if (args) AJAXobject.data = JSON.stringify(args);
                global._LaRedoute.updateBasketCountItem();
                return $.ajax(AJAXobject);
            };

            var removeLoyaltyToCart = function (args) {
                var AJAXobject = {
                    async: true,
                    cache: false,
                    url: '/serviceproduct/removeloyaltyfromcart',
                    type: 'POST',
                    success: function () {
                        global._LaRedoute.updateBasketCountItem();
                    },
                    error: function (error) {
                        console.log(
                            'An error has occured while fetching LoyaltyLRAndMeBox : ' +
                                error
                        );
                    }
                };
                if (args) AJAXobject.data = JSON.stringify(args);
                global._LaRedoute.updateBasketCountItem();
                return $.ajax(AJAXobject);
            };

            var getPersonnalisationData = function () {
                return $.ajax({
                    cache: true,
                    dataType: 'json',
                    type: 'GET',
                    url: '/servicemyaccount/getcustomerpersonalisation.aspx',
                    contentType: 'application/json;charset=utf-8',
                    processData: false
                });
            };

            // Public methods
            me.catchError = function (context, xhr) {
                console.error(
                    'AJAX on: ' +
                        context.url +
                        ' --- method: ' +
                        context.type +
                        ' --- status: ' +
                        xhr.status +
                        ' --- statusText: ' +
                        xhr.statusText
                );
            };
            me.initiateEvents = function (serviceEvents, serviceEnum) {
                serviceEvents.forEach(function (service) {
                    var serviceName = service[0],
                        serviceCall = service[1];

                    model.$eventContainer.on(
                        serviceEnum[serviceName + 'Requested'],
                        function (e, serviceArgs, providerArgs) {
                            serviceCall(serviceArgs)
                                .done(function (data) {
                                    setTimeout(function () {
                                        model.$eventContainer.trigger(
                                            serviceEnum[
                                                serviceName + 'Succeeded'
                                            ],
                                            [data, providerArgs]
                                        );
                                    }, 10);
                                })
                                .fail(function (xhr) {
                                    me.catchError(this, xhr);
                                    model.$eventContainer.trigger(
                                        serviceEnum[serviceName + 'Failed'],
                                        [providerArgs]
                                    );
                                })
                                .complete(function () {
                                    model.$eventContainer.trigger(
                                        serviceEnum[serviceName + 'Answered'],
                                        [providerArgs]
                                    );
                                });
                        }
                    );
                });
            };

            // Init
            me.initiateEvents(
                [
                    // ['eventName', function]
                    ['addToCart', addToCart],
                    ['addLoyaltyToCart', addLoyaltyToCart],
                    ['removeLoyaltyToCart', removeLoyaltyToCart],
                    ['getPersonnalisationData', getPersonnalisationData]
                ],
                global.globalServiceEvent
            );
        }
    });
})(window, window.jQuery);
;
(function (global, $) {
  'use strict';

  global.DC_Data = {};
  global.trackingRule = {
    global: {
      PRODUCT_ADDTOCART: 'DC_Global_Product_AddToBasket',
      LOYALTY_ADDTOCART: 'DC_Global_LoyaltyProgram_AddToBasket',
      LOYALTY_REMOVETOCART: 'DC_Global_LoyaltyProgram_RemoveFromBasket',
      INBENTA_POPINDISPLAYED: 'DC_MRS_Inbenta_PopInDisplayed'
    }
  };
  global.globalTrackingEvent = {
    EARLYBIRDS_NOT_LOADED: 'eb.notLoaded',
    SHOPPING_TOOL_USED: 'global.shoppingTool.used',
    dataLayerUpdated: 'tracking.dataLayer.updated',
    ADOBE_DATALAYER_READY: 'dataLayerReadyforAdobe',
    WIDGET_LOADED: 'widget.loaded',
    WIDGET_CLICKED: 'widget.clicked',
    HEADERFEATUREDLINK_CLICKED: 'headerLink.clicked'
  };

  global.Tracking = global.Class.extend({
    init: function (name, page) {
      // Private properties
      var me = this;
      var model = page.Model;

      var _track = global._satellite.track;
      var utils_ = global.Utils;
      var trackingRule = global.trackingRule.global;
      var trackingEvents = global.globalTrackingEvent;
      var dataLayer = {};
      var serviceEvent = global.globalServiceEvent;
      var storage_ = utils_.StorageManager;
      var storageName = utils_.Enum.StorageName;
      var userId = global.contextInfo.Customer.UserId;
      var tc_vars = global.tc_vars;

      var LOYALTY_ID = '522008758';
      var INTERACTION_TIMER = storageName.INTERACTION_TIMER;
      var PAGE_ORIGIN = storageName.PAGE_ORIGIN;
      var PRODUCT_ORIGIN = storageName.PRODUCT_ORIGIN;
      var EVAR71 = 'eVar71';

      var shoppingTool = storage_.readLocalStorageValue(storageName.USED_TOOL) || '';
      var opeco = global.Utils.UrlManager.GetHashValue('opeco');
      var flashsaleOrigin = storage_.readLocalStorageValue(storageName.FLASHSALE_ORIGIN);

      //EB tracker key/data source
      var ebDataSourceId = model.earlyBirdsAPITrackerDataSource;
      var ebTrackerKey = model.earlyBirdsAPITrackerKey;

      var ADOBE_TRACKING_NAME = 'wa_data';
      var isTrackedPage = !model.isChildProduct && !model.isChildPage;
      var pageOrigin = null;
      var sessionDuration = 30 * 60 * 1000;
      var sessionTimeout;
      var searchInfo = localStorage.getItem('LR_searchInfo');

      // Public properties
      me.Name = name;
      me._track = _track;
      me.dataLayer = dataLayer;
      me.storage_ = storage_;
      me.storageName = storageName;
      if (isTrackedPage && searchInfo !== null) {
        try {
          me.searchInfo = JSON.parse(searchInfo);
        } catch (error) {
          console.error(error);
        }
        localStorage.removeItem('LR_searchInfo');
      }

      // DOM picks
      var $window = $(global);
      var $inbentaButton = $('#inbenta-start');

      // DOM building element

      // DOM adjustments

      // Private methods
      var concatenateEvent = function (newEvent, eventString) {
        if (!eventString) {
          return newEvent;
        }
        var eventRegex = new RegExp('(' + newEvent + ',)|(' + newEvent + ')$');
        /**
         * Check if the `newEvent` is not already in the `eventString`
         * * 'event1' should match with 'event1' and 'event1,event2'
         * ! 'event1' should not match with 'event101,event102' for exemple
         * */
        if (!eventRegex.test(eventString)) {
          return eventString + ',' + newEvent;
        }
        return eventString;
      };

      var generateStorageData = function (stringOrJSON) {
        if (stringOrJSON === null) {
          return '';
        } else if (typeof stringOrJSON === global.varType.str) {
          return stringOrJSON;
        } else {
          var separator = '_';
          var channel = dataLayer.channel || '';
          var storage = stringOrJSON.type + separator + stringOrJSON.subType + separator + channel.toUpperCase();

          var extraData = stringOrJSON.extraData;
          if (extraData) {
            if (typeof extraData === global.varType.obj) {
              extraData.forEach(function (el) {
                storage += separator + el;
              });
            } else {
              storage += separator + extraData;
            }
          }

          return storage;
        }
      };
      var getCleanedReferrer = function () {
        return document.referrer.replace(/^(https?:\/\/)|(\/.*$)/g, '');
      };
      var handleSession = function () {
        if (sessionIsActive()) {
          refreshSession();
        } else {
          removeSession();
        }

        storage_.createLocalStorageValue(INTERACTION_TIMER, new Date().getTime());
      };
      var handleTimeout = function () {
        if (sessionTimeout !== undefined) {
          clearTimeout(sessionTimeout);
        }
      };
      var initiateDataLayer = function (dataJSON) {
        me.dataLayer = dataLayer = dataJSON;
        global[ADOBE_TRACKING_NAME] = dataLayer;
      };

      var launchLoyaltyTracking = function (componant) {
        delete global.DC_Data[trackingRule.LOYALTY_REMOVETOCART];
        global.DC_Data[trackingRule.LOYALTY_ADDTOCART] = {
          ProductId: LOYALTY_ID,
          Zone: componant || 'landing'
        };
        _track(trackingRule.LOYALTY_ADDTOCART);
      };

      var launchRemoveLoyaltyTracking = function (componant) {
        delete global.DC_Data[trackingRule.LOYALTY_ADDTOCART];
        global.DC_Data[trackingRule.LOYALTY_REMOVETOCART] = {
          ProductId: LOYALTY_ID,
          Zone: componant || 'landing'
        };
        _track(trackingRule.LOYALTY_REMOVETOCART);
      };

      var refreshSession = function () {
        storage_.createLocalStorageValue(PAGE_ORIGIN, dataLayer.pageName);
        sessionTimeout = setTimeout(removeSession, sessionDuration);
      };
      var removeSession = function () {
        storage_.eraseLocalStorageValue(PAGE_ORIGIN);
      };
      var sessionIsActive = function () {
        var lastInteraction = storage_.readLocalStorageValue(INTERACTION_TIMER);

        return lastInteraction === null || new Date().getTime() - lastInteraction < sessionDuration;
      };
      var setLastSearchId = function (stringOrInt) {
        if (typeof stringOrInt === global.varType.str) stringOrInt = stringOrInt.toLowerCase();
        return storage_.createLocalStorageValue(storageName.LAST_SEARCH_ID, stringOrInt);
      };
      var setLocalShoppingTool = function (string) {
        return storage_.createLocalStorageValue(storageName.SHOPPING_TOOL, string);
      };

      var EB_getProfile = function () {
        var profile = {};
        if (!profile.info) {
          profile.info = {};
        }
        if (userId) {
          profile.datasources = [
            {
              id: ebDataSourceId,
              original_id: userId
            }
          ];
          profile.info.ebRecoId = userId;
        }
        if (global.tC.internalvars) {
          profile.info.cUserIdCriteo = global.tC.internalvars.email_sha256;
          profile.info.pUserIdCriteo = global.tC.internalvars.visitor_id;
        }
        var ctoBundleCriteo = utils_.CookieManager.ReadCookie('cto_bundle');
        profile.info.ctoBundleCriteo = ctoBundleCriteo !== null ? ctoBundleCriteo : '';
        var cookieSegmentation = utils_.CookieManager.ReadCookie('Segmentation');
        if (cookieSegmentation !== null) {
          var parts = cookieSegmentation.split('&');
          for (var i = 0; i < parts.length; i++) {
            var valueParts = parts[i].split('=');
            if (valueParts[0] === 'engagement') {
              profile.info.audiences = valueParts[1];
            }
          }
        }
        return profile;
      };

      var toPascalCase = function (propValue) {
        return propValue
          .match(/[a-z]+/gi)
          .map(function (word) {
            return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();
          })
          .join('');
      };

      // Public methods
      me.destroy_tracking = function () {
        // Tracking has to be destroyed when a layer page is closed
        $window.off('focus', handleSession).off('blur', handleTimeout);
      };
      me.expose_dataLayer = function () {
        handleSession();
        global[ADOBE_TRACKING_NAME] = dataLayer;
      };
      me.launchDirectCall = function (name, data) {
        if (typeof data === global.varType.obj) {
          global.DC_Data[name] = data;
        }
        _track(name);
      };
      me.set_shoppingTool = function (stringOrJSON) {
        shoppingTool = generateStorageData(stringOrJSON);
        if (model.channel === 'pdp') {
          me.productOrigin = shoppingTool;
        } else if (document.hasFocus()) {
          setLocalShoppingTool(shoppingTool);
        }
      };
      me.set_productOrigin = function (stringOrJSON) {
        return storage_.createLocalStorageValue(PRODUCT_ORIGIN, generateStorageData(stringOrJSON));
      };
      me.update_dataLayer = function (dataJSON) {
        $.extend(dataLayer, dataJSON);
      };
      me.update_dataLayer_error = function (statusText, code, url) {
        var currentEvents = me.dataLayer.events.split(',');
        currentEvents.push('event31=1');

        me.update_dataLayer({
          pageName: model.countryCode + ':RE:ERROR:TechnicalError',
          events: currentEvents.join(),
          prop48: window.location.href,
          prop49: 'TechnicalErrorInternal',
          prop56: statusText ? statusText : 'AjaxError',
          prop47: url || '',
          prop50: code || ''
        });
      };
      me.addEventToTracking = function (eventName) {
        window.wa_data.events = concatenateEvent(eventName, window.wa_data.events);
      };
      me.removeEventFromTracking = function (eventName) {
        if (window.wa_data.events.indexOf(eventName) !== -1) {
          window.wa_data.events.replace(',' + eventName, '');
        }
      };

      // Events
      model.$eventContainer
        .on(serviceEvent.addToCartSucceeded, function (e, data, providerArgs) {
          var productOrigin = storage_.readLocalStorageValue(PRODUCT_ORIGIN);
          var dcData = JSON.parse(data.AnalyticsDataLayer);
          var hasATBlayerFromProviderArgs = false;
          if (providerArgs) {
            hasATBlayerFromProviderArgs = providerArgs.hasATBlayer;
          }

          dcData.hasATBlayer = hasATBlayerFromProviderArgs || false;
          dcData.prop26 = dcData.eVar68 = data.ServicesDataLayer.SiteName || '';

          if (productOrigin !== null) {
            dcData.eVar80 = productOrigin;
            dcData.prop60 = productOrigin;
            storage_.eraseLocalStorageValue(PRODUCT_ORIGIN);
          }
          if (providerArgs && (providerArgs.addedFromBasketWishlist || providerArgs.addedFromWishlistProduct)) {
            typeof dcData.events === global.varType.str ? (dcData.events += ',event102') : (dcData.events = 'event102');
            dcData.prop12 = dcData.eVar12 = 'wishlist';
          }

          if (providerArgs) {
            if (providerArgs.fromOtherVendor) {
              dcData.events = concatenateEvent('event114', dcData.events);
            } else if (providerArgs.hasOtherVendors) {
              dcData.events = concatenateEvent('event113', dcData.events);
            }
          }

          me.launchDirectCall(trackingRule.PRODUCT_ADDTOCART, dcData);

          if (providerArgs && providerArgs.hasLoyalty) {
            launchLoyaltyTracking(providerArgs.componant);
          }
        })

        .on(serviceEvent.addLoyaltyToCartSucceeded, function (e, dataJSON, providerArgs) {
          var componant;
          if (providerArgs) {
            componant = providerArgs.componant;
          }
          launchLoyaltyTracking(componant);
        })

        .on(serviceEvent.removeLoyaltyToCartSucceeded, function (e, dataJSON, providerArgs) {
          var componant;
          if (providerArgs) componant = providerArgs.componant;
          launchRemoveLoyaltyTracking(componant);
        })

        .on(trackingEvents.SHOPPING_TOOL_USED, function (e, data) {
          // A shopping tool has been used, we have to catch the related infos
          storage_.createLocalStorageValue(
            storageName.USED_TOOL,
            generateStorageData({
              type: data.type,
              subType: data.subType,
              extraData: data.extraData
            })
          );

          if (data.searchInfo) {
            localStorage.setItem('LR_searchInfo', data.searchInfo);
          }

          if (data.isCatSearch) {
            localStorage.setItem('LR_catSearch', 'true');
          }

          if (data.keyword || data.guidedNavId) {
            setLastSearchId(data.keyword || data.guidedNavId);
          }

          if (data.type === 'SEARCH' && data.extraData.length >= 2) {
            if (data.extraData[1] === 'keyword-autocompletion') {
              storage_.createLocalStorageValue(EVAR71, 'autocompletion');
            } else if (data.extraData[1] === 'cat-autocompletion') {
              storage_.createLocalStorageValue(EVAR71, 'cat-autocompletion');
            } else if (data.extraData[1] === 'history') {
              storage_.createLocalStorageValue(EVAR71, 'search-history');
            } else if (data.extraData[1] === 'internal') {
              storage_.createLocalStorageValue(EVAR71, 'no-autocompletion');
            }
          }
        })

        .on(trackingEvents.HEADERFEATUREDLINK_CLICKED, function () {
          storage_.createLocalStorageValue('headerFeaturedLink_evar23', wa_data.eVar23, 1);
        })

        .on(trackingEvents.WIDGET_LOADED, function () {
          /* Widgets have been loaded */
        })

        .on(trackingEvents.WIDGET_CLICKED, function () {
          storage_.createLocalStorageValue('widgetClicked_prop27', wa_data.prop27, 1);
          storage_.createLocalStorageValue('widgetClicked_prop60', wa_data.prop60, 1);
          storage_.createLocalStorageValue('widgetHasBeenClicked', true, 1);
          storage_.createLocalStorageValue('comesFromWidget', true, 1);
        });

      // Init
      if (isTrackedPage) {
        $window
          .on('focus', function () {
            handleSession();
            if (model.channel !== 'pdp') {
              setLocalShoppingTool(shoppingTool);
            }
          })
          .on('blur', handleTimeout);

        var widgetClicked = storage_.readLocalStorageValue('widgetHasBeenClicked');
        var widgetClicked_prop60 = storage_.readLocalStorageValue('widgetClicked_prop60');

        if ((widgetClicked && widgetClicked_prop60 !== undefined) || widgetClicked_prop60 !== '') {
          me.update_dataLayer({
            prop60: widgetClicked_prop60
          });

          storage_.eraseLocalStorageValue('widgetClicked_prop60');
          storage_.eraseLocalStorageValue('widgetHasBeenClicked');
        }

        if (model.channel !== 'pdp') {
          /* This is used to know if prop60 has to be deleted on PDP (if you come from a PLP) or not (direct access from widget to pdp) */
          storage_.eraseLocalStorageValue('comesFromWidget');
        }

        $.ajaxSetup({
          error: function (xhr, error) {
            me.update_dataLayer_error(this.type + '_' + xhr.statusText + '_' + error, xhr.status, this.url);
          }
        });

        dataLayer = JSON.parse($('#analyticsDataLayer').text());

        var headerFeaturedLink_evar23 = storage_.readLocalStorageValue('headerFeaturedLink_evar23');

        if (headerFeaturedLink_evar23 !== undefined || headerFeaturedLink_evar23 !== '') {
          me.update_dataLayer({
            eVar23: headerFeaturedLink_evar23
          });

          dataLayer.eVar23 = headerFeaturedLink_evar23;

          storage_.eraseLocalStorageValue('headerFeaturedLink_evar23');
        }

        if (sessionIsActive()) {
          pageOrigin = storage_.readLocalStorageValue(PAGE_ORIGIN);
        }

        if (model.customer !== undefined && model.customer.customerNumber !== undefined) {
          dataLayer.eVar6 = dataLayer.prop10 = model.customer.customerNumber;
        }

        if (pageOrigin !== null) dataLayer.prop66 = pageOrigin;

        if (model.isLoggedIn) {
          dataLayer.prop39 = 'islogged';
        } else if (model.isIdentified) {
          dataLayer.prop39 = 'isidentified';
        } else {
          dataLayer.prop39 = 'isnotlogged';
        }
        if (flashsaleOrigin !== null) {
          var flashsaleOriginInfos = flashsaleOrigin.split('_');
          // eVar72 = the id of the flashsale
          dataLayer.eVar72 = flashsaleOriginInfos[1];
          // eVar115 = the position of the flashsale in the flashsales page
          dataLayer.eVar115 = flashsaleOriginInfos[0];
          storage_.eraseLocalStorageValue(storageName.FLASHSALE_ORIGIN);
        }

        var eVar71 = storage_.readLocalStorageValue(EVAR71);
        if (eVar71) {
          dataLayer.eVar71 = eVar71;
          storage_.eraseLocalStorageValue(EVAR71);
        }

        if (document.hasFocus()) handleSession();

        // specific shopping tool attribution
        if (opeco) {
          opeco = opeco.replace(/_/g, '-');
          // if the product is displayed from a marketing operation
          me.set_shoppingTool({
            type: 'INTERNAL',
            subType: opeco.indexOf('hubvf') > -1 || opeco.indexOf(':vf') > -1 ? 'VentesFlash' : 'Opeco',
            extraData: ['other', opeco]
          });
        } else if (document.referrer.indexOf('laredoute') === -1) {
          // if the product is displayed from another site
          me.set_shoppingTool({
            type: 'EXTERNAL',
            subType: getCleanedReferrer() || 'null'
          });
        } else if (shoppingTool && Utils.UrlManager.GetHashValue('shoppingtool') != null && Utils.UrlManager.GetHashValue('shoppingtool').toLowerCase() === 'redirmoteur') {
          var pos = shoppingTool.lastIndexOf('_');
          shoppingTool = shoppingTool.substring(0, pos) + '_redirect';
        }

        if (model.channel !== 'pdp') {
          if (shoppingTool) {
            me.update_dataLayer({ prop60: shoppingTool });
          }
          if (document.hasFocus()) {
            setLocalShoppingTool(shoppingTool);
          }
        }

        dataLayer.prop26 = dataLayer.eVar68 = model.siteName;

        if (model.breadcrumb !== undefined) {
          dataLayer.prop6 = dataLayer.prop7 = dataLayer.prop8 = dataLayer.prop9 = '';
          model.breadcrumb.forEach(function (element) {
            switch (element.level) {
              case 0:
                if (model.pageType !== 'SearchPage') {
                  dataLayer.prop26 = dataLayer.eVar68 = element.name; // needed for "plus size" pages
                }
                break;
              case 1:
                dataLayer.prop6 = element.name;
                break;
              case 2:
                dataLayer.prop7 = element.name;
                break;
              case 3:
                dataLayer.prop8 = element.name;
                break;
              case 4:
                dataLayer.prop9 = element.name;
                break;
            }
          });
        }

        dataLayer.prop43 = model.isLRAndMe ? 'loyaltyprogram' : 'notloyaltyprogram';

        if (!dataLayer.pageName) dataLayer.pageName = 'no value';

        // coronavirus fix (dsp2)
        dataLayer.pageName.replace('GB:', 'UK:');
        // end fix

        global.pageType = dataLayer.pageType; // Only for tracking.js
        global.virtualSite = dataLayer.virtualSite; // Only for tracking.js

        // [ For old DC rules
        global.wa_data_backup = {};
        $.extend(global.wa_data_backup, dataLayer);
        // ]

        initiateDataLayer(dataLayer);

        setTimeout(function () {
          // Wait for specific page tracking before to trigger the event
          try {
            /**
             * Use native custom event so that the Web Analytics team
             * can attach to this event to trigger other actions.
             * https://makandracards.com/makandra/71890-events-triggered-by-jquery-cannot-be-observed-by-native-event-listeners
             */
            if (global.dispatchEvent && global.CustomEvent) {
              model.$eventContainer[0].dispatchEvent(new CustomEvent(trackingEvents.ADOBE_DATALAYER_READY));
            } else {
              console.log('Custom Events are not available');
            }
          } catch (e) {
            /**
             * CustomEvent is not supported on Internet Explorer
             * https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Browser_compatibility
             * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent#Browser_Compatibility
             *
             * Browser compatibility should be ok (plus we already checked for
             * availability of `dispatchEvent` and `CustomEvent`) but better be safe
             */
            console.error('Error while trying to dispatch a CustomEvent');
          }

          model.$eventContainer.trigger(trackingEvents.dataLayerUpdated);
        }, 50);

        // Code for tracking EarlyBirds
        global.Utils.Common.onEarlyBirdsLoad(function () {
          global._ebq.push(['init', ebTrackerKey], ['identify', EB_getProfile()]);
        });

        // Code for tracking Inbenta
        me.isScriptInitClickForInbentaScript = true;
        $inbentaButton.on('click', function () {
          if (me.isScriptInitClickForInbentaScript) {
            me.isScriptInitClickForInbentaScript = false;
          } else {
            me.launchDirectCall(trackingRule.INBENTA_POPINDISPLAYED);
          }
        });

        if (page.pageType === 'ErrorPage' && (model.channel === 'moteurderecherche' || model.channel === 'search')) {
          me.update_dataLayer({
            eVar107: 'noresult',
            eVar108: 'standard'
          });
        }

        if (me.searchInfo !== undefined) {
          me.update_dataLayer({
            eVar105: me.searchInfo.searchType,
            eVar106: me.searchInfo.searchKeyword + '_' + me.searchInfo.searchKeyword
          });
        }

        // DEFINE prop27 IF COMING FROM A WIDGET CLICKED
        // Check TrackingWidgets.ts for prop explanation
        var widgetProp27 = storage_.readLocalStorageValue('widgetClicked_prop27');
        if (widgetProp27 !== undefined) {
          dataLayer.prop27 = widgetProp27;
          me.update_dataLayer({ prop27: widgetProp27 });
          storage_.eraseLocalStorageValue('widgetClicked_prop27');
        }
      }
    }
  });
})(window, window.jQuery);
;
$(function () {

   

    $("#layerLogin").on("click", function (e) {
        window.location.href = "/login/login";
    });

    // Layout specific header for tab
    if (_LaRedoute.getScreenType() > 1) {
        // Hide by default for phone
        $(".title-hamburger").show();
        $("#layerLogin").show();
    }
    if (Utils.Common.getCountry() === "fr") {
        $(".tooltip-popin").popin();
    }
    // FULLR : display footer service information in a popin
    $('.reinsurance-popin').popin({
        onLoad: function($el) {
            $el.find('.container').css('width', 'auto');
            $el.find('#ct_services').css('width', 'auto');
            $el.find('#ct_services').find('h2').first().hide();
            $el.find('#ct_ctn').css('width', 'auto');
            $el.find('#ct_menu').hide();
            $el.find('#ct_main').css('width', 'auto');
            $el.find('#contenu_service .encadre').css('width', 'auto');
            $el.find('#contenu_service .encadre .right').css({'width': 'auto', 'float': 'none', 'padding-left': '45px'});
            $el.find('.lienback').hide();
            $el.find('#contenu_service .right').css({'width': 'auto', 'float': 'none'});
        }
    });

    $("#openCountryChoice").on("mouseenter", function () {
        if (!$("#ulCountryLinks").length) {
            var tooltipCountries = null;
            $.ajax({
                url: '/servicefooter/rendercountrylinks',
                success: function (res) {
                    if (res != null) {
                        var links = document.createElement('ul');
                            links.id = "ulCountryLinks";
                            links.classList.add("apply-tooltip");
                            links.classList.add("tooltip");
                            links.setAttribute("data-trigger","#openCountryChoice");
                            links.setAttribute("data-position","top");
                            links.setAttribute("data-style","black");
                            links.setAttribute("data-show-close","false");

                        for (i = 0; i < res.length; i++) {
                            var generatedLi = document.createElement('li');
                            var generatedLink = document.createElement('a');
                                generatedLink.classList.add('last-bottom-footer-country-link');
                                generatedLink.href = res[i].URL;
                                generatedLink.innerHTML = res[i].Name;

                                generatedLi.appendChild(generatedLink);
                                links.appendChild(generatedLi);
                        }

                        let countryHtmlLinks = $(links).find('a');
                        let countryNames = [];
                        for (let i=0; i<countryHtmlLinks.length; i++) {
                            countryNames.push(countryHtmlLinks[i].innerText)
                        }

                        $(links).on("keyup", function (event) {
                            let currentIndex = countryHtmlLinks.index($(event.target));
                            let $elToFocus = $([]);
                            switch (event.key) {
                                case "Escape":
                                    $elToFocus = $('#openCountryChoice').trigger("mouseout");
                                    $elToFocus = $('#openCountryChoice');
                                    break;
                                case "ArrowUp":
                                    if (currentIndex > 0) {
                                        $elToFocus = $(countryHtmlLinks[currentIndex - 1]);
                                    }
                                    break;
                                case "ArrowDown":
                                case " ":
                                    if (currentIndex < countryHtmlLinks.length - 1) {
                                        $elToFocus = $(countryHtmlLinks[currentIndex + 1]);
                                    }
                                    break;
                                case "PageUp":
                                    if (currentIndex - 10 > 0) {
                                        $elToFocus = $(countryHtmlLinks[currentIndex - 10]);
                                    } else {
                                        $elToFocus = $(countryHtmlLinks[0]);
                                    }
                                    break;
                                case "PageDown":
                                    if (currentIndex + 10 < countryHtmlLinks.length - 1 ) {
                                        $elToFocus = $(countryHtmlLinks[currentIndex + 10]);
                                    } else {
                                        $elToFocus = $(countryHtmlLinks[countryHtmlLinks.length - 1]);
                                    }
                                    break;
                                default:
                                    if (event.key.length == 1) {
                                        let sameFirstLetterPositions = countryNames.reduce(function (accumulator, value, index) {
                                            return accumulator.concat(value.toLowerCase().startsWith(event.key) ? index : []);
                                        }, []);
                                        if (sameFirstLetterPositions.length > 0) {
                                            if (sameFirstLetterPositions.length >= 2 && sameFirstLetterPositions.includes(currentIndex)) {
                                                let indexInPositionsArray = sameFirstLetterPositions.findIndex(pos => pos == currentIndex);
                                                if (indexInPositionsArray == sameFirstLetterPositions.length - 1) {
                                                    $(countryHtmlLinks[sameFirstLetterPositions[0]]).trigger("focus");
                                                } else {
                                                    $elToFocus = $(countryHtmlLinks[sameFirstLetterPositions[indexInPositionsArray + 1]]);
                                                }
                                            } else {
                                                $elToFocus = $(countryHtmlLinks[sameFirstLetterPositions[0]]);
                                            }
                                        }
                                    }
                            }
                            if ($elToFocus != $([])) {
                                $elToFocus.trigger("focus");
                            }
                        })

                        var openCountryChoiceElement = document.getElementById("openCountryChoice");
                        if (openCountryChoiceElement) {
                            openCountryChoiceElement.insertAdjacentElement("afterend", links);
                        }

                        tooltipCountries = $('#ulCountryLinks.apply-tooltip').tooltip();
                        tooltipCountries.tooltip('open');
                    }
                }
            });
            $('#ulCountryLinks.apply-tooltip').tooltip('open');
        }
        this.setAttribute("aria-expanded","true");
    })
    .on("focusout", function (event) {
        let $triggerEl = $(this);
        if ($(event.relatedTarget).hasClass('last-bottom-footer-country-link')) {
            $('#ulCountryLinks li:last-child .last-bottom-footer-country-link').on("focusout", function (e) {
                if (!$(e.relatedTarget).hasClass('last-bottom-footer-country-link')) {
                    $triggerEl.trigger("mouseout");
                }
            });
        } else {
            $triggerEl.trigger("mouseout");
        }
    })
    .on("keyup", function (event) {
        if (event.key == 'ArrowUp' || event.key ==  'ArrowDown' || event.key == 'Enter' || event.key == 'End' || event.key == 'Home' || event.key.length == 1) {
            $(this).trigger("mouseenter");
            let outsideClickListener = (event) => {
                const $target = $(event.target);
                if (!$target.closest('#ulCountryLinks').length && $('#ulCountryLinks').is(':visible')) {
                    $('#ulCountryLinks').trigger("mouseout");
                    document.removeEventListener('click', outsideClickListener);
                }
            }
            document.addEventListener('click', outsideClickListener);
            
            if (event.key.length == 1 || event.key == 'ArrowUp' || event.key == 'Home' || event.key == 'End') {
                let triggerSecondaryEvent = (key) => {
                    if (key.length == 1) {
                        $('#ulCountryLinks a').trigger(jQuery.Event("keyup", event));
                    } else if (key == 'ArrowUp' || key == 'Home') {
                        $('#ulCountryLinks li:first-child a').trigger("focus");
                    } else if (key == 'End') {
                        $('#ulCountryLinks li:last-child a').trigger("focus");
                    }
                };

                if ($('#ulCountryLinks a').length == 0) {
                    const targetNode = document.querySelector(".footer__countrySelector");
                    const config = { childList: true, subtree: true };
                    const callback = (mutationList, observer) => {
                        for (const mutation of mutationList) {
                            if (mutation.type === "childList") {
                                triggerSecondaryEvent(event.key);
                                observer.disconnect();
                            }
                        }
                    };
                    const observer = new MutationObserver(callback);
                    observer.observe(targetNode, config);
                } else {
                    triggerSecondaryEvent(event.key);
                }
            }
        } else if (event.key == 'Escape') {
            $(this).trigger("mouseout");
        } 
    }).on("mouseout", function () {
        this.setAttribute("aria-expanded","false");
    });

    $('.footer-reinsurance-row').find('.reinsurance-link').each(function () {
        var popinId = $(this).attr('data-popin-id');
        var popinUrl = $(this).attr('data-url');
        var divAttributes = {'class':'popin reinsurance-popin', 'data-url':popinUrl, 'data-preload':"false", 'data-block':".static-page-container",'data-trigger':".reinsurance-popin-"+popinId,'data-track-name':"STATICPAGE",'data-track-merge-url':"true"};
        $(this).find('.reinsurance-popin').remove();
        $(this).append($('<div>', divAttributes));
    });

    $('#footerExpandServices').click(function () {
        var $self = $(this);
        $.ajax({
            url: '/servicefooter/loadcolumns',
            success: function (data) {
                if (data.IsSuccess === true) {
                    $self.hide().prev().replaceWith(data.Html);
                    $self.remove();
                    $('#footer').trigger('footer.expanded');
                }
            }
        });
    });

    $('.footer-cta-show-privacy-center').on('click', function(event) {
        tC.privacyCenter.showPrivacyCenter();
    });
});
;
var _UiHeader = (function (window, $, model) {
    return {
        Init: function () {
            var me = this
            var header = document.getElementById('header')

            var dataPageName = document.body.getAttribute('data-pagename')

            function _toConsumableArray(arr) {
                return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread()
            }

            function _nonIterableSpread() {
                throw new TypeError('Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.')
            }

            function _unsupportedIterableToArray(o, minLen) {
                if (!o) return
                if (typeof o === 'string') return _arrayLikeToArray(o, minLen)
                var n = Object.prototype.toString.call(o).slice(8, -1)
                if (n === 'Object' && o.constructor) n = o.constructor.name
                if (n === 'Map' || n === 'Set') return Array.from(o)
                if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen)
            }

            function _iterableToArray(iter) {
                if ((typeof Symbol !== 'undefined' && iter[Symbol.iterator] != null) || iter['@@iterator'] != null) return Array.from(iter)
            }

            function _arrayWithoutHoles(arr) {
                if (Array.isArray(arr)) return _arrayLikeToArray(arr)
            }

            function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length) len = arr.length
                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                    arr2[i] = arr[i]
                }
                return arr2
            }

            var headerLogos = document.getElementsByClassName('headerLogo')

            var logoPathElements = _toConsumableArray(headerLogos).map(function (logo) {
                return logo.getElementsByTagName('path')
            })

            var logoSvgElements = _toConsumableArray(headerLogos).map(function (logo) {
                return logo.getElementsByTagName('svg')
            })

            if (!header || !dataPageName || !headerLogos || !logoPathElements) return

            var opeco_data = document.getElementById('header_opeco_data') != null ? JSON.parse(document.getElementById('header_opeco_data').innerText) : null

            var isMobile, isOpeco, isHomePage, primaryColour, secondaryColour, tertiaryColour, gradientendColour, maskImageUrl

            if (opeco_data != null) {
                isMobile = $('body').hasClass('is-mobile') ? true : false
                isOpeco = opeco_data.isOpeco == null ? false : opeco_data.isOpeco == 'True'
                isHomePage = opeco_data.isHomePage == 'True'
                primaryColour = opeco_data.primaryColour
                secondaryColour = opeco_data.secondaryColour
                tertiaryColour = opeco_data.tertiaryColour
                gradientendColour = opeco_data.gradientendColour
                maskImageUrl = opeco_data.maskImageUrl
            } else {
                isOpeco == false
            }
            /* Opeco Management */
            if (isOpeco) {
                if (gradientendColour != null && gradientendColour != '' && gradientendColour != undefined && maskImageUrl == '') {
                    logoSvgElements.forEach(function (element) {
                        for (var i = 0; i < element.length; i++) {
                            element.item(i).classList.add('opeco')
                            element.item(i).style.fill = 'url(#redoute-logo-gradient) ' + primaryColour
                        }
                    })
                }
            }

            /* Try to account for the COM free shipping banner */
            setTimeout(function () {
                var freeShippingBanner = document.getElementById('FreeShippingBanner')
                if (freeShippingBanner) header.prepend(freeShippingBanner)
            }, 3000)

            /* Fix or unfix header according to scroll position */
            var fixedClass = 'isFixed'

            var unfix = function () {
                var buffer = document.getElementById('buffer')

                if (!isHomePage) buffer.style.height = '0px'

                header.classList.remove(fixedClass)
            }

            var fix = function () {
                var buffer = document.getElementById('buffer')

                if (header.classList.contains(fixedClass)) return

                if (!isHomePage) buffer.style.height = header.getBoundingClientRect().height + 'px'

                header.classList.add(fixedClass)
            }

            var canExecuteScrollEvent = false
            if (dataPageName != 'MobileV3_Delivery' && dataPageName != 'MobileV3_Basket' && dataPageName != 'MobileV3_Payment' && dataPageName !== 'MobileV3_Register' && dataPageName !== 'MobileV3_BasketThankYou' && dataPageName !== 'MobileV3_Login' && dataPageName !== 'MobileV3_StyleAccount') {
                window.addEventListener('scroll', function (e) {
                    if (canExecuteScrollEvent && window.scrollY != 0) return
                    canExecuteScrollEvent = true

                    e.stopPropagation()
                    handleHeaderStatus()

                    window.setTimeout(function () {
                        canExecuteScrollEvent = false
                    }, 0)
                })
            }

            var handleHeaderStatus = function () {
                window.scrollY >= 64 ? fix() : unfix()
            }

            handleHeaderStatus()

            /* Change destination of account icon in header according to context */
            var headerAccountIcon = document.getElementById('headerAccount')
            if (headerAccountIcon) {
                headerAccountIcon.addEventListener('click', function () {
                    if (typeof _page.Blocs.AccountLayer === 'undefined') {
                        if (_LaRedoute.getScreenType() == 1 && _page.isMobileDevice) {
                            window.location = '/myaccount/myaccount' + _LaRedoute.urlSuffixe
                        } else {
                            if (window._page.isSiteUK()) {
                                window.location = '/myaccount/myaccount' + _LaRedoute.urlSuffixe
                            } else {
                                window.location = '/myaccount/ordertracingall' + _LaRedoute.urlSuffixe
                            }
                        }
                    }
                })
            }

            var burgerMenu = document.getElementById('headerMenu')
            if (burgerMenu) {
                burgerMenu.addEventListener('click', function () {
                    $('#headerMenuPanel').modal({
                        method: 'open',
                        id: 'menuPanel',
                        type: 'panel',
                        putToLeftSide: true,
            source: $(this),
                        classList: 'menu__panel'
                    })
                    window.$eventContainer.trigger('menu.open')

                    var closeButton = document.getElementById('menuPanel').querySelector('.modal_close')
                    if (!!closeButton && closeButton.dataset != 'mainmenu-close') {
                        closeButton.dataset.cerberus = 'mainmenu-close'
                    }
                })
            }

            /* Add specific tracking for featured links in header */
            var headerLinks = isMobile ? document.querySelectorAll('#headerFeatured.header__links--small a') : document.querySelectorAll('#headerFeatured.header__links--small a, #headerFeatured.header__links--large a')

            var cleanTrackingValue = function (value) {
                var cleanValue = value

                cleanValue = cleanValue.trim()
                cleanValue = cleanValue.replace(/\s+/g, '')
                cleanValue = Utils.Common.RemoveAccents(cleanValue)
                cleanValue = Utils.Common.removePunctuation(cleanValue)
                cleanValue = cleanValue.toLowerCase()

                return cleanValue
            }

            if (headerLinks.length) {
                headerLinks.forEach(function (headerLink) {
                    headerLink.addEventListener('click', function () {
                        var trackingValue = cleanTrackingValue(headerLink.textContent)
                        wa_data.eVar23 = trackingValue.trim()
                        global.$eventContainer.trigger('headerLink.clicked')

                        global.$eventContainer.trigger(window.globalTrackingEvent.SHOPPING_TOOL_USED, [
                            {
                                type: 'TREE',
                                subType: 'Highlight',
                                extraData: [0, wa_data.eVar23]
                            }
                        ])
                    })
                })
            }

            var fromLeftSide = isMobile

            var modalOpening = isMobile ? 'iceberg' : 'panel'
            me.isLoyaltyInCart = $('#modalLRAndMe').attr('data-isLoyaltyInCart') === 'true' ? true : false

            if ($('#modalLRAndMe').length > 0) {
                $('#headerRPlus').on('click', function () {
                    $('#modalLRAndMe').modal({
                        method: 'open',
                        type: modalOpening,
                        id: 'LRAndMe_Panel',
                        gradientOnScroll: true,
                        putToLeftSide: fromLeftSide
                    })
                    var LrAndMeLocalPersoData = localStorage.getItem('localPersoData')
                    if (LrAndMeLocalPersoData && LrAndMeLocalPersoData !== 'undefined') {
                        var objetLrAndMeLocalPersoData = JSON.parse(LrAndMeLocalPersoData)
                    }

                    if (!objetLrAndMeLocalPersoData || objetLrAndMeLocalPersoData.IF == undefined) {
                        $('.lrandme_modal_zone_text').remove()
                        $('.lrandme_modal_creditCard').remove()
                    } else {
                        var oldDateFormatSubscription = objetLrAndMeLocalPersoData.IF.DATE_FINVAL.split('-')
                        var day = oldDateFormatSubscription[2]
                        var month = oldDateFormatSubscription[1]
                        var year = oldDateFormatSubscription[0][2] + oldDateFormatSubscription[0][3]
                        
                        var dateOldSubscription = new Date(year, month - 1, day, '12', '00', '00')
                        dateOldSubscription.setFullYear(aYearFromNow.getFullYear() + 1)

                        var newDateFormatSubscription = dateOldSubscription.getDate() + '/' + dateOldSubscription.getMonth() + 1 + '/' + dateOldSubscription.getFullYear()

                        if (objetLrAndMeLocalPersoData && objetLrAndMeLocalPersoData.IF.DATE_FINVAL !== undefined) {
                        var oldDateFormatCbExpiration = objetLrAndMeLocalPersoData.IF.DATE_FINVAL.split('-')
                        var dayCb = oldDateFormatCbExpiration[2]
                        var monthCb = oldDateFormatCbExpiration[1]
                        var yearCb = oldDateFormatCbExpiration[0][2] + oldDateFormatCbExpiration[0][3]
                        var newDateFormatCbExpiration = dayCb + '/' + monthCb + '/' + yearCb
                        }
                        if (objetLrAndMeLocalPersoData && objetLrAndMeLocalPersoData.IF.ECO_TOTAL !== undefined) {
                            if (objetLrAndMeLocalPersoData.IF.ECO_TOTAL < 15) {
                                $('.lrandme_modal_zone_text').remove()
                            } else {
                                $('.lrandme_modal_zone_text_price').text(objetLrAndMeLocalPersoData.IF.ECO_TOTAL)
                                $('.lrandme_modal_zone_text_date').text(newDateFormatSubscription)
                            }
                        }

                        if (objetLrAndMeLocalPersoData && objetLrAndMeLocalPersoData.IF.ALIAS_TACIT_AGREEMENT !== undefined) {
                            if (objetLrAndMeLocalPersoData.IF.ALIAS_TACIT_AGREEMENT.valueOf() === 'cb') {
                                if (objetLrAndMeLocalPersoData.IF.DATE_FINVAL === 'null') {
                                    $('.lrandme_modal_creditCard_text_subscription').remove()
                                } else {
                                    $('.lrandme_modal_creditCard_text').append(' ' + newDateFormatCbExpiration)
                                }
                            } else if (objetLrAndMeLocalPersoData.IF.ALIAS_TACIT_AGREEMENT.valueOf() === 'paypal') {
                                $('.lrandme_modal_creditCard_text_valid').remove()
                                if (objetLrAndMeLocalPersoData.IF.DATE_FINVAL === 'null') {
                                    $('.lrandme_modal_creditCard').remove()
                                } else {
                                    $('.lrandme_modal_creditCard_text').append(' ' + newDateFormatCbExpiration)
                                }
                            } else {
                                $('.lrandme_modal_creditCard').remove()
                            }
                        }
                    }
                })
            }

            var addLoyaltyToCart = function (args) {
            var antiForgeryToken = $("#antiForgeryToken").val();
            var AJAXobject = {
              async: true,
              cache: false,
              headers:
              {
                  'RequestVerificationToken': antiForgeryToken
              },
              url: '/serviceproduct/addloyaltytocart',
              type: 'POST',
              success: function () {
                global._LaRedoute.updateBasketCountItem();
              },
              error: function (error) {
                console.log('An error has occured while fetching LoyaltyLRAndMeBox : ' + error);
              }
            };
            if (args) AJAXobject.data = JSON.stringify(args);
            global._LaRedoute.updateBasketCountItem();
            return $.ajax(AJAXobject);
      };

            var removeLoyaltyToCart = function (args) {
                var AJAXobject = {
                    async: true,
                    cache: false,
                    url: '/serviceproduct/removeloyaltyfromcart',
                    type: 'POST',
                    success: function () {
                        global._LaRedoute.updateBasketCountItem()
                    },
                    error: function (error) {
                        console.log('An error has occured while fetching LoyaltyLRAndMeBox : ' + error)
                    }
                }
                if (args) AJAXobject.data = JSON.stringify(args)
                global._LaRedoute.updateBasketCountItem()
                return $.ajax(AJAXobject)
            }

			var labels;

            if ($('#switchButtonLRAndMeLabels').length > 0) {
                labels = JSON.parse($('#switchButtonLRAndMeLabels').text())
            }

            $('.btntry').on('click', function () {
                if (me.isLoyaltyInCart === false) {
                    window.$eventContainer.trigger('service.addLoyaltyToCart.requested', [
                        null,
                        {
                            fromHeader: true,
                            componant: 'header'
                        }
                    ])
                }
            })

            //add LrAndMe to basket
            $('.checkLrAndMeBox').on('change', function () {
                var dataLoyalty = $(this).attr('data-loyalty') === 'pdp' ? 'pdp' : 'header'
                var isFromHeader = $(this).attr('data-loyalty') === 'pdp' ? false : true

                if (me.isLoyaltyInCart === false) {
                    $('.loyaltyLrAndMe_zone_switch').addClass('selected')
                    $('.checkLrAndMeBox').prop('checked', true).attr('checked', 'checked')
                    $('.switch_label').not(".AddToBasketLRPlusBasket .switch_label").html('<span class="bold">' + labels.switchLRAndMeOn + '</span>' + ' ' + labels.LoyaltyLRAndMePrice)
                    window.$eventContainer.trigger('service.addLoyaltyToCart.requested', [
                        null,
                        {
                            fromHeader: true,
                            componant: 'header'
                        }
                    ])
                    addLoyaltyToCart()

                    me.isLoyaltyInCart = true
                } else if (me.isLoyaltyInCart === true) {
                    $('.loyaltyLrAndMe_zone_switch').removeClass('selected')
                    $('.checkLrAndMeBox').prop('checked', false).removeAttr('checked')
                    $('.switch_label').not(".AddToBasketLRPlusBasket .switch_label").html('<span class="bold">' + labels.switchLRAndMeOff + '</span>' + '</br>' + labels.LoyaltyLRAndMePrice)
                    window.$eventContainer.trigger(window.globalServiceEvent.removeLoyaltyToCartRequested, [null, { fromHeader: isFromHeader, componant: dataLoyalty }])
                    me.isLoyaltyInCart = false
                    removeLoyaltyToCart()
                }
                global._LaRedoute.updateBasketCountItem()
            })
        }
    }
})(window, jQuery)
;
/*
 * File: iframeReizer.js
 * Desc: Force iframes to size to content.
 * Requires: iframeResizer.contentWindow.js to be loaded into the target frame.
 * Author: David J. Bradshaw - dave@bradshaw.net
 * Contributor: Jure Mav - jure.mav@gmail.com
 */
;(function() {
    'use strict';

	var
		count                 = 0,
		firstRun              = true,
		msgHeader             = 'message',
		msgHeaderLen          = msgHeader.length,
		msgId                 = '[iFrameSizer]', //Must match iframe msg ID
		msgIdLen              = msgId.length,
		page                  =  '', //:'+location.href, //Uncoment to debug nested iFrames
		pagePosition          = null,
		requestAnimationFrame = window.requestAnimationFrame,
		resetRequiredMethods  = {max:1,scroll:1,bodyScroll:1,documentElementScroll:1},
		settings              = {},

		defaults              = {
			autoResize                : true,
			bodyBackground            : null,
			bodyMargin                : null,
			bodyMarginV1              : 8,
			bodyPadding               : null,
			checkOrigin               : true,
			enablePublicMethods       : false,
			heightCalculationMethod   : 'offset',
			interval                  : 32,
			log                       : false,
			maxHeight                 : Infinity,
			maxWidth                  : Infinity,
			minHeight                 : 0,
			minWidth                  : 0,
			scrolling                 : false,
			sizeHeight                : true,
			sizeWidth                 : false,
			tolerance                 : 0,
			closedCallback            : function(){},
			initCallback              : function(){},
			messageCallback           : function(){},
			resizedCallback           : function(){},
			scrollCallback            : function(){return true;}
		};

	function addEventListener(obj,evt,func){
		if ('addEventListener' in window){
			obj.addEventListener(evt,func, false);
		} else if ('attachEvent' in window){//IE
			obj.attachEvent('on'+evt,func);
		}
	}

	function setupRequestAnimationFrame(){
		var
			vendors = ['moz', 'webkit', 'o', 'ms'],
			x;

		// Remove vendor prefixing if prefixed and break early if not
		for (x = 0; x < vendors.length && !requestAnimationFrame; x += 1) {
			requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
		}

		if (!(requestAnimationFrame)){
			log(' RequestAnimationFrame not supported');
		}
	}

	function getMyID(){
		var retStr = 'Host page';

		if (window.top!==window.self){
			if (window.parentIFrame){
				retStr = window.parentIFrame.getId();
			} else {
				retStr = 'Nested host page';
			}
		}

		return retStr;
	}

	function formatLogMsg(msg){
		return msgId + '[' + getMyID() + ']' + msg;
	}

	function log(msg){
		if (settings.log && ('object' === typeof window.console)){
			console.log(formatLogMsg(msg));
		}
	}

	function warn(msg){
		if ('object' === typeof window.console){
			console.warn(formatLogMsg(msg));
		}
	}

	function iFrameListener(event){
		function resizeIFrame(){
			function resize(){
				setSize(messageData);
				setPagePosition();
				settings.resizedCallback(messageData);
			}

			ensureInRange('Height');
			ensureInRange('Width');
			
			syncResize(resize,messageData,'resetPage');
		}

		function closeIFrame(iframe){
			var iframeID = iframe.id;

			log(' Removing iFrame: '+iframeID);
			iframe.parentNode.removeChild(iframe);
			settings.closedCallback(iframeID);
			log(' --');
		}

		function processMsg(){
			var data = msg.substr(msgIdLen).split(':');

			return {
				iframe: document.getElementById(data[0]),
				id:     data[0],
				height: data[1],
				width:  data[2],
				type:   data[3]
			};
		}

		function ensureInRange(Dimension){
			var
				max  = Number(settings['max'+Dimension]),
				min  = Number(settings['min'+Dimension]),
				dimension = Dimension.toLowerCase(),
				size = Number(messageData[dimension]);

			if (min>max){
				throw new Error('Value for min'+Dimension+' can not be greater than max'+Dimension);
			}

			log(' Checking '+dimension+' is in range '+min+'-'+max);

			if (size<min) {
				size=min;
				log(' Set '+dimension+' to min value');
			}

			if (size>max) {
				size=max;
				log(' Set '+dimension+' to max value');
			}

			messageData[dimension]=''+size;
		}

		function isMessageFromIFrame(){
			var
				origin     = event.origin,
				remoteHost = messageData.iframe.src.split('/').slice(0,3).join('/');

			if (settings.checkOrigin) {
				log(' Checking connection is from: '+remoteHost);

				if ((''+origin !== 'null') && (origin !== remoteHost)) {
					throw new Error(
						'Unexpected message received from: ' + origin +
						' for ' + messageData.iframe.id +
						'. Message was: ' + event.data +
						'. This error can be disabled by adding the checkOrigin: false option.'
					);
				}
			}

			return true;
		}

		function isMessageForUs(){
			return msgId === ('' + msg).substr(0,msgIdLen); //''+Protects against non-string msg
		}

		function isMessageFromMetaParent(){
			//test if this message is from a parent above us. This is an ugly test, however, updating
			//the message format would break backwards compatibity.
			var retCode = messageData.type in {'true':1,'false':1};

			if (retCode){
				log(' Ignoring init message from meta parent page');
			}

			return retCode;
		}

		function getMsgBody(offset){
			return msg.substr(msg.indexOf(':')+msgHeaderLen+offset);
		}

		function forwardMsgFromIFrame(msgBody){
			log(' MessageCallback passed: {iframe: '+ messageData.iframe.id + ', message: ' + msgBody + '}');
			settings.messageCallback({
				iframe: messageData.iframe,
				message: JSON.parse(msgBody)
			});
			log(' --');
		}

		function checkIFrameExists(){
			if (null === messageData.iframe) {
				throw new Error('iFrame ('+messageData.id+') does not exist on ' + page);
			}
			return true;
		}

		function getElementPosition(target){
			var
				iFramePosition = target.getBoundingClientRect();

			getPagePosition();

			return {
				x: parseInt(iFramePosition.left, 10) + parseInt(pagePosition.x, 10),
				y: parseInt(iFramePosition.top, 10)  + parseInt(pagePosition.y, 10)
			};
		}

		function scrollRequestFromChild(addOffset){
			function reposition(){
				pagePosition = newPosition;

				scrollTo();

				log(' --');
			}

			function calcOffset(){
				return {
					x: Number(messageData.width) + offset.x,
					y: Number(messageData.height) + offset.y
				};
			}

			var 
				offset = addOffset ? getElementPosition(messageData.iframe) : {x:0,y:0},
				newPosition = calcOffset();
			
			log(' Reposition requested from iFrame (offset x:'+offset.x+' y:'+offset.y+')');

			if(window.top!==window.self){
				if (window.parentIFrame){
					if (addOffset){
						parentIFrame.scrollToOffset(newPosition.x,newPosition.y);
					} else {
						parentIFrame.scrollTo(messageData.width,messageData.height);
					}
				} else {
					warn(' Unable to scroll to requested position, window.parentIFrame not found');
				}
			} else {
				reposition();
			}

		}

		function scrollTo(){
			if (false !== settings.scrollCallback(pagePosition)){
				setPagePosition();
			}
		}

		function findTarget(location){
			var hash = location.split("#")[1] || "";
			var hashData = decodeURIComponent(hash);

			function jumpToTarget(target){
				var jumpPosition = getElementPosition(target);

				log(' Moving to in page link (#'+hash+') at x: '+jumpPosition.x+' y: '+jumpPosition.y);
				pagePosition = {
					x: jumpPosition.x,
					y: jumpPosition.y
				};

				scrollTo();
				log(' --');
			}

			var target = document.getElementById(hashData) || document.getElementsByName(hashData)[0];

			if(window.top!==window.self){
				if (window.parentIFrame){
					parentIFrame.moveToAnchor(hash);
				} else {
					log(' In page link #'+hash+' not found and window.parentIFrame not found');
				}
			} else if (target){
				jumpToTarget(target);
			} else {
				log(' In page link #'+hash+' not found');
			}
		}

		function actionMsg(){
			switch(messageData.type){
				case 'close':
					closeIFrame(messageData.iframe);
					settings.resizedCallback(messageData); //To be removed.
					break;
				case 'message':
					forwardMsgFromIFrame(getMsgBody(6));
					break;
				case 'scrollTo':
					scrollRequestFromChild(false);
					break;
				case 'scrollToOffset':
					scrollRequestFromChild(true);
					break;
				case 'inPageLink':
					findTarget(getMsgBody(9));
					break;
				case 'reset':
					resetIFrame(messageData);
					break;
				case 'init':
					resizeIFrame();
					settings.initCallback(messageData.iframe);
					break;
				default:
					resizeIFrame();
			}
		}

		var
			msg = event.data,
			messageData = {};

		if (isMessageForUs()){
			log(' Received: '+msg);
			messageData = processMsg();

			if ( !isMessageFromMetaParent() && checkIFrameExists() && isMessageFromIFrame() ){
				actionMsg();
				firstRun = false;
			}
		}
	}


	function getPagePosition (){
		if(null === pagePosition){
			pagePosition = {
				x: (window.pageXOffset !== undefined) ? window.pageXOffset : document.documentElement.scrollLeft,
				y: (window.pageYOffset !== undefined) ? window.pageYOffset : document.documentElement.scrollTop
			};
			log(' Get page position: '+pagePosition.x+','+pagePosition.y);
		}
	}

	function setPagePosition(){
		if(null !== pagePosition){
			window.scrollTo(pagePosition.x,pagePosition.y);
			log(' Set page position: '+pagePosition.x+','+pagePosition.y);
			pagePosition = null;
		}
	}

	function resetIFrame(messageData){
		function reset(){
			setSize(messageData);
			trigger('reset','reset',messageData.iframe);
		}

		log(' Size reset requested by '+('init'===messageData.type?'host page':'iFrame'));
		getPagePosition();
		syncResize(reset,messageData,'init');
	}

	function setSize(messageData){
		function setDimension(dimension){
			messageData.iframe.style[dimension] = messageData[dimension] + 'px';
			log(
				' IFrame (' + messageData.iframe.id +
				') ' + dimension +
				' set to ' + messageData[dimension] + 'px'
			);
		}

		if( settings.sizeHeight) { setDimension('height'); }
		if( settings.sizeWidth ) { setDimension('width'); }
	}

	function syncResize(func,messageData,doNotSync){
		if(doNotSync!==messageData.type && requestAnimationFrame){
			log(' Requesting animation frame');
			requestAnimationFrame(func);
		} else {
			func();
		}
	}

	function trigger(calleeMsg,msg,iframe){
		log('[' + calleeMsg + '] Sending msg to iframe ('+msg+')');
		iframe.contentWindow.postMessage( msgId + msg, '*' );
	}


	function setupIFrame(){
		function setLimits(){
			function addStyle(style){
				if ((Infinity !== settings[style]) && (0 !== settings[style])){
					iframe.style[style] = settings[style] + 'px';
					log(' Set '+style+' = '+settings[style]+'px');
				}
			}

			addStyle('maxHeight');
			addStyle('minHeight');
			addStyle('maxWidth');
			addStyle('minWidth');
		}

		function ensureHasId(iframeID){
			if (''===iframeID){
				iframe.id = iframeID = 'iFrameResizer' + count++;
				log(' Added missing iframe ID: '+ iframeID +' (' + iframe.src + ')');
			}

			return iframeID;
		}

		function setScrolling(){
			log(' IFrame scrolling ' + (settings.scrolling ? 'enabled' : 'disabled') + ' for ' + iframeID);
			iframe.style.overflow = false === settings.scrolling ? 'hidden' : 'auto';
			iframe.scrolling      = false === settings.scrolling ? 'no' : 'yes';
		}

		//The V1 iFrame script expects an int, where as in V2 expects a CSS
		//string value such as '1px 3em', so if we have an int for V2, set V1=V2
		//and then convert V2 to a string PX value.
		function setupBodyMarginValues(){
			if (('number'===typeof(settings.bodyMargin)) || ('0'===settings.bodyMargin)){
				settings.bodyMarginV1 = settings.bodyMargin;
				settings.bodyMargin   = '' + settings.bodyMargin + 'px';
			}
		}

		function createOutgoingMsg(){
			return iframeID +
				':' + settings.bodyMarginV1 +
				':' + settings.sizeWidth +
				':' + settings.log +
				':' + settings.interval +
				':' + settings.enablePublicMethods +
				':' + settings.autoResize +
				':' + settings.bodyMargin +
				':' + settings.heightCalculationMethod +
				':' + settings.bodyBackground +
				':' + settings.bodyPadding +
				':' + settings.tolerance;
		}

		function init(msg){
			//We have to call trigger twice, as we can not be sure if all
			//iframes have completed loading when this code runs. The
			//event listener also catches the page changing in the iFrame.
			addEventListener(iframe,'load',function(){
				var fr = firstRun;   // Reduce scope of var to function, because IE8's JS execution
                                     // context stack is borked and this value gets externally
                                     // changed midway through running this function.
				trigger('iFrame.onload',msg,iframe);
				if (!fr && settings.heightCalculationMethod in resetRequiredMethods){
					resetIFrame({
						iframe:iframe,
						height:0,
						width:0,
						type:'init'
					});
				}
			});
			trigger('init',msg,iframe);
		}

		var
            /*jshint validthis:true */
			iframe   = this,
			iframeID = ensureHasId(iframe.id);

		setScrolling();
		setLimits();
		setupBodyMarginValues();
		init(createOutgoingMsg());
	}

	function checkOptions(options){
		if ('object' !== typeof options){
			throw new TypeError('Options is not an object.');
		}
	}

	function processOptions(options){
		options = options || {};
		checkOptions(options);

		for (var option in defaults) {
			if (defaults.hasOwnProperty(option)){
				settings[option] = options.hasOwnProperty(option) ? options[option] : defaults[option];
			}
		}
	}

	function factory(){
		function init(element){
			if(!element.tagName) {
                throw new TypeError('Object is not a valid DOM element');
            } else if ('IFRAME' !== element.tagName.toUpperCase()) {
				throw new TypeError('Expected <IFRAME> tag, found <'+element.tagName+'>.');
			} else {
				setupIFrame.call(element);
			}
		}

		return function iFrameResizeF(options,target){
			processOptions(options);
			switch (typeof(target)){
				case 'undefined':
				case 'string':
					Array.prototype.forEach.call( document.querySelectorAll( target || 'iframe' ), init );
					break;
				case 'object':
					init(target);
					break;
				default:
					throw new TypeError('Unexpected data type ('+typeof(target)+').');
			}
			
		};
	}

	function createJQueryPublicMethod($){
		$.fn.iFrameResize = function $iFrameResizeF(options) {
			processOptions(options);
			return this.filter('iframe').each( setupIFrame ).end();
		};
	}

	setupRequestAnimationFrame();
	addEventListener(window,'message',iFrameListener);

	if (window.jQuery) { createJQueryPublicMethod(jQuery); }

	if (typeof define === 'function' && define.amd) {
		define([],factory);
	} else if (typeof module === 'object' && typeof module.exports === 'object') { //Node for browserfy
		module.exports = factory();
	} else {
		window.iFrameResize = factory();
	}

})();
;
/*! iFrame Resizer (iframeSizer.contentWindow.min.js) - v4.3.2 - 2021-04-26
 *  Desc: Include this file in any page being loaded into an iframe
 *        to force the iframe to resize to the content size.
 *  Requires: iframeResizer.min.js on host page.
 *  Copyright: (c) 2021 David J. Bradshaw - dave@bradshaw.net
 *  License: MIT
 */

!function(c){if("undefined"!=typeof window){var i=!0,o=10,r="",a=0,u="",s=null,d="",l=!1,f={resize:1,click:1},m=128,h=!0,g=1,n="bodyOffset",p=n,v=!0,y="",w={},b=32,T=null,E=!1,O=!1,S="[iFrameSizer]",M=S.length,I="",N={max:1,min:1,bodyScroll:1,documentElementScroll:1},A="child",C=!0,z=window.parent,k="*",R=0,x=!1,e=null,L=16,F=1,t="scroll",P=t,D=window,j=function(){re("onMessage function not defined")},q=function(){},H=function(){},W={height:function(){return re("Custom height calculation function not defined"),document.documentElement.offsetHeight},width:function(){return re("Custom width calculation function not defined"),document.body.scrollWidth}},B={},J=!1;try{var U=Object.create({},{passive:{get:function(){J=!0}}});window.addEventListener("test",ee,U),window.removeEventListener("test",ee,U)}catch(e){}var V,X,Y,K,Q,G,Z={bodyOffset:function(){return document.body.offsetHeight+pe("marginTop")+pe("marginBottom")},offset:function(){return Z.bodyOffset()},bodyScroll:function(){return document.body.scrollHeight},custom:function(){return W.height()},documentElementOffset:function(){return document.documentElement.offsetHeight},documentElementScroll:function(){return document.documentElement.scrollHeight},max:function(){return Math.max.apply(null,ye(Z))},min:function(){return Math.min.apply(null,ye(Z))},grow:function(){return Z.max()},lowestElement:function(){return Math.max(Z.bodyOffset()||Z.documentElementOffset(),ve("bottom",be()))},taggedElement:function(){return we("bottom","data-iframe-height")}},$={bodyScroll:function(){return document.body.scrollWidth},bodyOffset:function(){return document.body.offsetWidth},custom:function(){return W.width()},documentElementScroll:function(){return document.documentElement.scrollWidth},documentElementOffset:function(){return document.documentElement.offsetWidth},scroll:function(){return Math.max($.bodyScroll(),$.documentElementScroll())},max:function(){return Math.max.apply(null,ye($))},min:function(){return Math.min.apply(null,ye($))},rightMostElement:function(){return ve("right",be())},taggedElement:function(){return we("right","data-iframe-width")}},_=(V=Te,Q=null,G=0,function(){var e=Date.now(),t=L-(e-(G=G||e));return X=this,Y=arguments,t<=0||L<t?(Q&&(clearTimeout(Q),Q=null),G=e,K=V.apply(X,Y),Q||(X=Y=null)):Q=Q||setTimeout(Ee,t),K});te(window,"message",function(t){var n={init:function(){y=t.data,z=t.source,ae(),h=!1,setTimeout(function(){v=!1},m)},reset:function(){v?ie("Page reset ignored by init"):(ie("Page size reset by host page"),Me("resetPage"))},resize:function(){Oe("resizeParent","Parent window requested size check")},moveToAnchor:function(){w.findTarget(i())},inPageLink:function(){this.moveToAnchor()},pageInfo:function(){var e=i();ie("PageInfoFromParent called from parent: "+e),H(JSON.parse(e)),ie(" --")},message:function(){var e=i();ie("onMessage called from parent: "+e),j(JSON.parse(e)),ie(" --")}};function o(){return t.data.split("]")[1].split(":")[0]}function i(){return t.data.substr(t.data.indexOf(":")+1)}function r(){return t.data.split(":")[2]in{true:1,false:1}}function e(){var e=o();e in n?n[e]():("undefined"==typeof module||!module.exports)&&"iFrameResize"in window||"jQuery"in window&&"iFrameResize"in window.jQuery.prototype||r()||re("Unexpected message ("+t.data+")")}S===(""+t.data).substr(0,M)&&(!1===h?e():r()?n.init():ie('Ignored message of type "'+o()+'". Received before initialization.'))}),te(window,"readystatechange",Ae),Ae()}function ee(){}function te(e,t,n,o){e.addEventListener(t,n,!!J&&(o||{}))}function ne(e){return e.charAt(0).toUpperCase()+e.slice(1)}function oe(e){return S+"["+I+"] "+e}function ie(e){E&&"object"==typeof window.console&&console.log(oe(e))}function re(e){"object"==typeof window.console&&console.warn(oe(e))}function ae(){function e(e){return"true"===e}var t;function n(e){Ne(0,0,e.type,e.screenY+":"+e.screenX)}function o(e,t){ie("Add event listener: "+t),te(window.document,e,n)}t=y.substr(M).split(":"),I=t[0],a=c!==t[1]?Number(t[1]):a,l=c!==t[2]?e(t[2]):l,E=c!==t[3]?e(t[3]):E,b=c!==t[4]?Number(t[4]):b,i=c!==t[6]?e(t[6]):i,u=t[7],p=c!==t[8]?t[8]:p,r=t[9],d=t[10],R=c!==t[11]?Number(t[11]):R,w.enable=c!==t[12]&&e(t[12]),A=c!==t[13]?t[13]:A,P=c!==t[14]?t[14]:P,O=c!==t[15]?Boolean(t[15]):O,ie("Initialising iFrame ("+window.location.href+")"),function(){function e(e,t){return"function"==typeof e&&(ie("Setup custom "+t+"CalcMethod"),W[t]=e,e="custom"),e}"iFrameResizer"in window&&Object===window.iFrameResizer.constructor&&(function(){var e=window.iFrameResizer;ie("Reading data from page: "+JSON.stringify(e)),Object.keys(e).forEach(ue,e),j="onMessage"in e?e.onMessage:j,q="onReady"in e?e.onReady:q,k="targetOrigin"in e?e.targetOrigin:k,p="heightCalculationMethod"in e?e.heightCalculationMethod:p,P="widthCalculationMethod"in e?e.widthCalculationMethod:P}(),p=e(p,"height"),P=e(P,"width"));ie("TargetOrigin for parent set to: "+k)}(),function(){c===u&&(u=a+"px");ce("margin",function(e,t){-1!==t.indexOf("-")&&(re("Negative CSS value ignored for "+e),t="");return t}("margin",u))}(),ce("background",r),ce("padding",d),(t=document.createElement("div")).style.clear="both",t.style.display="block",t.style.height="0",document.body.appendChild(t),fe(),me(),document.documentElement.style.height="",document.body.style.height="",ie('HTML & body height set to "auto"'),ie("Enable public methods"),D.parentIFrame={autoResize:function(e){return!0===e&&!1===i?(i=!0,he()):!1===e&&!0===i&&(i=!1,de("remove"),null!==s&&s.disconnect(),clearInterval(T)),Ne(0,0,"autoResize",JSON.stringify(i)),i},close:function(){Ne(0,0,"close")},getId:function(){return I},getPageInfo:function(e){"function"==typeof e?(H=e,Ne(0,0,"pageInfo")):(H=function(){},Ne(0,0,"pageInfoStop"))},moveToAnchor:function(e){w.findTarget(e)},reset:function(){Ie("parentIFrame.reset")},scrollTo:function(e,t){Ne(t,e,"scrollTo")},scrollToOffset:function(e,t){Ne(t,e,"scrollToOffset")},sendMessage:function(e,t){Ne(0,0,"message",JSON.stringify(e),t)},setHeightCalculationMethod:function(e){p=e,fe()},setWidthCalculationMethod:function(e){P=e,me()},setTargetOrigin:function(e){ie("Set targetOrigin: "+e),k=e},size:function(e,t){Oe("size","parentIFrame.size("+((e||"")+(t?","+t:""))+")",e,t)}},!0===O&&(o("mouseenter","Mouse Enter"),o("mouseleave","Mouse Leave")),he(),w=function(){function i(e){var t=e.getBoundingClientRect(),e={x:window.pageXOffset!==c?window.pageXOffset:document.documentElement.scrollLeft,y:window.pageYOffset!==c?window.pageYOffset:document.documentElement.scrollTop};return{x:parseInt(t.left,10)+parseInt(e.x,10),y:parseInt(t.top,10)+parseInt(e.y,10)}}function n(e){var t,n=e.split("#")[1]||e,e=decodeURIComponent(n),o=document.getElementById(e)||document.getElementsByName(e)[0];c!==o?(t=i(t=o),ie("Moving to in page link (#"+n+") at x: "+t.x+" y: "+t.y),Ne(t.y,t.x,"scrollToOffset")):(ie("In page link (#"+n+") not found in iFrame, so sending to parent"),Ne(0,0,"inPageLink","#"+n))}function e(){var e=window.location.hash,t=window.location.href;""!==e&&"#"!==e&&n(t)}function t(){Array.prototype.forEach.call(document.querySelectorAll('a[href^="#"]'),function(e){"#"!==e.getAttribute("href")&&te(e,"click",function(e){e.preventDefault(),n(this.getAttribute("href"))})})}function o(){Array.prototype.forEach&&document.querySelectorAll?(ie("Setting up location.hash handlers"),t(),te(window,"hashchange",e),setTimeout(e,m)):re("In page linking not fully supported in this browser! (See README.md for IE8 workaround)")}w.enable?o():ie("In page linking not enabled");return{findTarget:n}}(),Oe("init","Init message from host page"),q()}function ue(e){var t=e.split("Callback");2===t.length&&(this[t="on"+t[0].charAt(0).toUpperCase()+t[0].slice(1)]=this[e],delete this[e],re("Deprecated: '"+e+"' has been renamed '"+t+"'. The old method will be removed in the next major version."))}function ce(e,t){c!==t&&""!==t&&"null"!==t&&ie("Body "+e+' set to "'+(document.body.style[e]=t)+'"')}function se(n){var e={add:function(e){function t(){Oe(n.eventName,n.eventType)}B[e]=t,te(window,e,t,{passive:!0})},remove:function(e){var t,n=B[e];delete B[e],t=window,e=e,n=n,t.removeEventListener(e,n,!1)}};n.eventNames&&Array.prototype.map?(n.eventName=n.eventNames[0],n.eventNames.map(e[n.method])):e[n.method](n.eventName),ie(ne(n.method)+" event listener: "+n.eventType)}function de(e){se({method:e,eventType:"Animation Start",eventNames:["animationstart","webkitAnimationStart"]}),se({method:e,eventType:"Animation Iteration",eventNames:["animationiteration","webkitAnimationIteration"]}),se({method:e,eventType:"Animation End",eventNames:["animationend","webkitAnimationEnd"]}),se({method:e,eventType:"Input",eventName:"input"}),se({method:e,eventType:"Mouse Up",eventName:"mouseup"}),se({method:e,eventType:"Mouse Down",eventName:"mousedown"}),se({method:e,eventType:"Orientation Change",eventName:"orientationchange"}),se({method:e,eventType:"Print",eventName:["afterprint","beforeprint"]}),se({method:e,eventType:"Ready State Change",eventName:"readystatechange"}),se({method:e,eventType:"Touch Start",eventName:"touchstart"}),se({method:e,eventType:"Touch End",eventName:"touchend"}),se({method:e,eventType:"Touch Cancel",eventName:"touchcancel"}),se({method:e,eventType:"Transition Start",eventNames:["transitionstart","webkitTransitionStart","MSTransitionStart","oTransitionStart","otransitionstart"]}),se({method:e,eventType:"Transition Iteration",eventNames:["transitioniteration","webkitTransitionIteration","MSTransitionIteration","oTransitionIteration","otransitioniteration"]}),se({method:e,eventType:"Transition End",eventNames:["transitionend","webkitTransitionEnd","MSTransitionEnd","oTransitionEnd","otransitionend"]}),"child"===A&&se({method:e,eventType:"IFrame Resized",eventName:"resize"})}function le(e,t,n,o){return t!==e&&(e in n||(re(e+" is not a valid option for "+o+"CalculationMethod."),e=t),ie(o+' calculation method set to "'+e+'"')),e}function fe(){p=le(p,n,Z,"height")}function me(){P=le(P,t,$,"width")}function he(){var e;!0===i?(de("add"),e=b<0,window.MutationObserver||window.WebKitMutationObserver?e?ge():s=function(){function t(e){function t(e){!1===e.complete&&(ie("Attach listeners to "+e.src),e.addEventListener("load",i,!1),e.addEventListener("error",r,!1),u.push(e))}"attributes"===e.type&&"src"===e.attributeName?t(e.target):"childList"===e.type&&Array.prototype.forEach.call(e.target.querySelectorAll("img"),t)}function o(e){ie("Remove listeners from "+e.src),e.removeEventListener("load",i,!1),e.removeEventListener("error",r,!1),e=e,u.splice(u.indexOf(e),1)}function n(e,t,n){o(e.target),Oe(t,n+": "+e.target.src)}function i(e){n(e,"imageLoad","Image loaded")}function r(e){n(e,"imageLoadFailed","Image load failed")}function a(e){Oe("mutationObserver","mutationObserver: "+e[0].target+" "+e[0].type),e.forEach(t)}var u=[],c=window.MutationObserver||window.WebKitMutationObserver,s=function(){var e=document.querySelector("body");return s=new c(a),ie("Create body MutationObserver"),s.observe(e,{attributes:!0,attributeOldValue:!1,characterData:!0,characterDataOldValue:!1,childList:!0,subtree:!0}),s}();return{disconnect:function(){"disconnect"in s&&(ie("Disconnect body MutationObserver"),s.disconnect(),u.forEach(o))}}}():(ie("MutationObserver not supported in this browser!"),ge())):ie("Auto Resize disabled")}function ge(){0!==b&&(ie("setInterval: "+b+"ms"),T=setInterval(function(){Oe("interval","setInterval: "+b)},Math.abs(b)))}function pe(e,t){var n=0;return t=t||document.body,n=null!==(n=document.defaultView.getComputedStyle(t,null))?n[e]:0,parseInt(n,o)}function ve(e,t){for(var n,o=t.length,i=0,r=ne(e),a=Date.now(),u=0;u<o;u++)i<(n=t[u].getBoundingClientRect()[e]+pe("margin"+r,t[u]))&&(i=n);return a=Date.now()-a,ie("Parsed "+o+" HTML elements"),ie("Element position calculated in "+a+"ms"),L/2<(a=a)&&ie("Event throttle increased to "+(L=2*a)+"ms"),i}function ye(e){return[e.bodyOffset(),e.bodyScroll(),e.documentElementOffset(),e.documentElementScroll()]}function we(e,t){var n=document.querySelectorAll("["+t+"]");return 0===n.length&&(re("No tagged elements ("+t+") found on page"),document.querySelectorAll("body *")),ve(e,n)}function be(){return document.querySelectorAll("body *")}function Te(e,t,n,o){function i(){e in{init:1,interval:1,size:1}||!(p in N||l&&P in N)?e in{interval:1}||ie("No change in size detected"):Ie(t)}var r,a;function u(e,t){return!(Math.abs(e-t)<=R)}r=c!==n?n:Z[p](),a=c!==o?o:$[P](),u(g,r)||l&&u(F,a)||"init"===e?(Se(),Ne(g=r,F=a,e)):i()}function Ee(){G=Date.now(),Q=null,K=V.apply(X,Y),Q||(X=Y=null)}function Oe(e,t,n,o){x&&e in f?ie("Trigger event cancelled: "+e):(e in{reset:1,resetPage:1,init:1}||ie("Trigger event: "+t),("init"===e?Te:_)(e,t,n,o))}function Se(){x||(x=!0,ie("Trigger event lock on")),clearTimeout(e),e=setTimeout(function(){x=!1,ie("Trigger event lock off"),ie("--")},m)}function Me(e){g=Z[p](),F=$[P](),Ne(g,F,e)}function Ie(e){var t=p;p=n,ie("Reset trigger event: "+e),Se(),Me("reset"),p=t}function Ne(e,t,n,o,i){var r;!0===C&&(c===i?i=k:ie("Message targetOrigin: "+i),ie("Sending message to host page ("+(r=I+":"+(e+":"+t)+":"+n+(c!==o?":"+o:""))+")"),z.postMessage(S+r,i))}function Ae(){"loading"!==document.readyState&&window.parent.postMessage("[iFrameResizerChild]Ready","*")}}();
//# sourceMappingURL=iframeResizer.contentWindow.map;
var _UiLayerWaiting = (function (window, $) {

    var me = null;

    return {
        Show: function (e) {
            if ($('#waitingDiv').length == 0) {
                if (e == null || e == "")
                    e = "";
                $('body').append('<div id="waitingDiv" class="modalPaiement"><div class="waitingText loading loading-bottom" >' + e + '</div></div>');
            }
        },
        Hide: function () {
            if ($('#waitingDiv').length != 0)
                $('#waitingDiv').remove();
        }
    };

})(window, jQuery);
;
(function (global, $) {
    //do not use stict in this file

    // Plugins
    var fieldPluginName = 'field';
    var popinPluginName = 'popin';

    // Classes
    var hasErrorClassName = 'has-error';
    var hideClassName = 'hide';

    global.UiLoginLayer = global.UiBloc.extend({
        init: function (page, name) {
            var me = this;
            me._super(page, name);

            // Private properties
            var emailId = 'textBox_loginPage_alreadyCustomer_loginMail';
            var emailSelector = '#' + emailId;
            var passwordId = 'textBox_loginPage_alreadyCustomer_password';
            var passwordSelector = '#' + passwordId;
            var submittedDataName = 'submitted';

            // Public properties
            me.loaded = false;
            me.shouldOpen = false;
            me.redirectToLocation = null;

            // DOM
            var $el = $('<div>', {
                id: 'loginLayer',
                class: 'popin',
                'data-url': '/login/login.aspx?isLoginLayer=true',
                'data-position': 'defined',
                'data-track-name': 'MRS:Login',
                'data-track-merge-url': 'false'
            });

            // Private methods
            var hideLoginError = function () {
                $('#loginError')
                    .addClass(hideClassName)
                    .removeClass(hasErrorClassName);
                $('#inputEmail, #inputPassword').removeClass('has-error');
            };

            var showLoginError = function () {
                $('#loginError')
                    .removeClass(hideClassName)
                    .show()
                    .addClass(hasErrorClassName);
                $('#inputEmail, #inputPassword').addClass('has-error');

                global._satellite.track('DC_Login_FormSubmission_Errors');
            };

            /**
             * Init .field() plugin since popin is triggered once the page has been loaded
             * @param {*} $element popin div
             */
            var initPluginField = function ($element) {
                if ($element) {
                    var $emailSelector = $element.find(emailSelector);
                    var $passwordSelector = $element.find(passwordSelector);
                    var $registerEmailField = $(
                        '#textBox_loginPage_newCustomer_registerMail'
                    );
                    if (
                        $emailSelector &&
                        $passwordSelector &&
                        $registerEmailField
                    ) {
                        if (!$emailSelector.data(fieldPluginName)) {
                            $emailSelector.field();
                        }
                        if (!$passwordSelector.data(fieldPluginName)) {
                            $passwordSelector.field();
                        }
                        if (!$registerEmailField.data(fieldPluginName)) {
                            $registerEmailField.field();
                        }
                        if ($emailSelector.data(fieldPluginName)) {
                            $emailSelector.data(fieldPluginName).update();
                        }
                        if ($passwordSelector.data(fieldPluginName)) {
                            $passwordSelector.data(fieldPluginName).update();
                        }
                        if ($registerEmailField.data(fieldPluginName)) {
                            $registerEmailField.data(fieldPluginName).update();
                        }

                        if (
                            $passwordSelector.val() !== '' &&
                            $emailSelector.val() !== ''
                        ) {
                            $element.find('button').attr('disabled', false);
                        }
                    }
                }
            };

            /**
             * Note : me.open() can be called right after UiLoginLayer has been init
             * so the popin.onLoad and me.open methods sometimes run concurrently without the me.loaded boolean being set correctly
             * (me.loaded is checked at the beginning at me.open and being set at the end of me.open during popin's onLoad callback)
             * Hence the use of me.shouldOpen
             */
            var loadLogin = function ($element) {
                me.loaded = true;
                $element.find('.login-block h2').css({
                    marginBottom: '15px',
                    textAlign: 'left'
                });

                var $accountLogin = $element.find('#accountLogin');

                me.Page.Blocs.SocialLogin = new SocialProfileReach5(
                    me,
                    'SocialProfileReach5'
                );
                if (global.reach5) {
                    global.reach5('on', 'ready', function () {
                        me.Page.Blocs.SocialLogin.$containerSocialLogin.removeLoading();
                    });
                }

                $accountLogin.off('submit').on('submit', function (event) {
                    var $self = $(this);
                    event.preventDefault();
                    if ($element.data(submittedDataName) === true) {
                        return false;
                    }
                    var accountLoginBootstrapValidator = $self.data(
                        'bootstrapValidator'
                    );

                    // DOM
                    var $recaptcha = $('.g-recaptcha');

                    accountLoginBootstrapValidator.validateField(emailId);
                    accountLoginBootstrapValidator.validateField(passwordId);

                    if ($recaptcha.length > 0 && $recaptcha.is(':visible')) {
                        accountLoginBootstrapValidator.validateField('captcha');
                    }
                    if (accountLoginBootstrapValidator.isValid()) {
                        $element.addLoading();
                        $element.data(submittedDataName, true);
                        if (me.redirectToLocation) {
                            $self
                                .find('#redirectTo')
                                .val(me.redirectToLocation);
                        }

                        $.ajax({
                            url: '/serviceaccount/login',
                            type: 'POST',
                            data: $self.serialize(),
                            dataType: 'json',
                            success: function (data) {
                                if (
                                    data.IsSuccess === true &&
                                    data.RedirectUrl
                                ) {
                                    global.location.href = data.RedirectUrl;
                                } else if (
                                    data.IsSuccess === true &&
                                    (data.RedirectUrl === null ||
                                        data.RedirectUrl === '') &&
                                    typeof me.onLoginSuccess === 'function'
                                ) {
                                    me.onLoginSuccess();
                                } else {
                                    if (data.RedirectUrl) {
                                        global.location.href = data.RedirectUrl;
                                    }
                                    $element.removeLoading();
                                    if (typeof grecaptcha != 'undefined') {
                                        grecaptcha.reset();
                                    }
                                    if (data.ShowCaptcha) {
                                        $('#captchaArea').removeClass(
                                            hideClassName
                                        );
                                    }

                                    $.each(data.Errors, function (key, value) {
                                        if (value) {
                                            var newKey;
                                            $element.data(
                                                submittedDataName,
                                                false
                                            );
                                            if (
                                                key === 'ErrorMessagePassword'
                                            ) {
                                                newKey = 'AccountError';
                                                $('#' + newKey)
                                                    .children('.snackbar_content')
                                                    .html(value);
                                                showLoginError();
                                            } else if (
                                                key === 'ErrorMessageUsername'
                                            ) {
                                                newKey = 'notAnAccountError';
                                                $('#' + newKey)
                                                    .html(value);
                                            }
                                            $('#' + newKey)
                                                .show()
                                                .closest('.form-group')
                                                .removeClass('has-success')
                                                .addClass(hasErrorClassName);
                                        }
                                    });

                                    //-- Omniture --//
                                    var satelliteTrackCaptchaName =
                                        'DC_Login_Captcha';
                                    if (data.ForgotPasswordWarning) {
                                        global.wa_data.prop42 =
                                            'forgotpasswordreminder';
                                        global._satellite.track(
                                            satelliteTrackCaptchaName
                                        );
                                    } else if (data.ShowCaptcha) {
                                        global.wa_data.prop42 = 'captcha';
                                        global._satellite.track(
                                            satelliteTrackCaptchaName
                                        );
                                    }
                                }
                            },
                            error: function () {
                                $element.data(submittedDataName, false);
                                $element.removeLoading();
                            }
                        });
                    }
                });

                $element.find(emailSelector).click(function () {
                    $('#notAnAccountError').hide();
                    $('#inputEmail').removeClass(hasErrorClassName);
                    hideLoginError();
                });

                $element.find(passwordSelector).click(function () {
                    $('#AccountError').hide();
                    $('#inputPassword').removeClass(hasErrorClassName);
                    hideLoginError();
                });

                if (me.shouldOpen) {
                    $element.data(popinPluginName).open();
                    initPluginField($element);
                }
            };

            // Public methods
            me.open = function (callback) {
                if (me.loaded) {
                    if (!global._page.loginPage) {
                        global._page.loginPage = new global.loginPage();
                    }
                    $el.data(popinPluginName).open();
                    initPluginField($el);
                } else {
                    me.shouldOpen = true;
                }

                if (typeof callback === 'function') {
                    me.onLoginSuccess = callback;
                }
            };

            me.close = function () {
                $el.data(popinPluginName).close();
            };

            // DOM
            $el.popin({
                context: me,
                onLoad: loadLogin,
                preload: true
            });
        }
    });
})(window, jQuery);
;
var _LaRedoute = (function (window, $, undefined) {
  return {
    init: function () {
      this.enableBasketItemCount = $('body').data('enablebasketitemcount') && $('#basketIcon').length > 0;
      this.enableWishlistItemCount = $('body').data('enablewishlistitemcount') && $('#IconWishlist').length > 0;

      this.getBasketItemCountTries = 0;
      this.getWishlistItemCountTries = 0;
      this.noOfItemsInCart = 0;
      this.currentOrientation = this.getScreenType();
      this.appPath = '';
      this.urlSuffixe = '.aspx';

      this.newsletterMessageClass = 'newsletter-message';
      this.newsletterMessageEmptyClass = 'empty';
      this.newsletterMessageNoCheckClass = 'no-checked';
      this.newsletterMessageNotEmailClass = 'not-email';
      this.newsletterFormSelector = '#newsletter';
      this.newsletterCheckSelector = '#newsletter_check';
      this.newsletterInputSelector = '#newsletter_field';

      this.commonNewsletterMessageClass = 'common-newsletter-message';
      this.commonNewsletterMessageEmptyClass = 'common-empty';
      //this.commonNewsletterMessageNoCheckClass = 'common-no-checked';
      this.commonNewsletterMessageNotEmailClass = 'common-not-email';
      this.commonNewsletterFormSelector = '#common_newsletter';
      //this.commonNewsletterCheckSelector = '#common_newsletter_check';
      this.commonNewsletterInputSelector = '#common_newsletter_field';

      this.appPicture = $('#dl-app-picture');

      this.dataGlobal = $('#dataGlobal').length > 0 ? JSON.parse($.trim($('#dataGlobal').text())) : {};
      if ($('#customerProps').length > 0) {
        var customerProps = JSON.parse($.trim($('#customerProps').text()));

        if (window.contextInfo.Customer.IsLoggedIn) {
          localStorage.setItem('isEmployee', customerProps.isEmployee);
        }
      }

      window.callbackFunctions = {};
      this.initEvents();
    },
    initEvents: function () {
      var me = this;

      $('input').focusout(function () {
        input = $(this);
        inputId = $(this).attr('id');
        parentId = $(this).parents('.form-group').attr('id');
        if ($(input).val() == '' && !$('#' + parentId).hasClass('has-error')) {
          $('#' + inputId + '_Error').hide();
        }
      });

      // Hide displaying privacy cookie
      $('#cnil_privacy_btn_close').click(function () {
        $('#cnil_privacy').hide();
      });
      $('.close-layer').click(function () {
        $('#cnil_privacy').hide();
      });

      $('.mainSiteLink').on('click', function (e) {
        e.preventDefault();
        //-- #16550: Set sitemode cookie to expire after 30 minutes --//
        var date = new Date();
        date.setTime(date.getTime() + 30 * 60 * 1000);
        document.cookie = 'sitemode=full; path=/; expires=' + date.toGMTString() + '; domain=' + document.domain.substring(document.domain.indexOf('.laredoute'));

        location.href = $(this).data('href');
      });

      $(window).on('load', function () {
        if (me.enableBasketItemCount) {
          me.updateBasketCountItem();
        }
        if (me.enableWishlistItemCount) {
          me.updateWishlistCountItem();
        }

        $('.field > input:not(#passwordDisplaytextBox_loginPage_alreadyCustomer_password)').field();
        $('.open-option-panel').optionPanel();

        $('.plugin-popin').popin();
        $('.apply-popin').popin();
        $('.plugin-tooltip').tooltip();
        $('.apply-tooltip').tooltip();
        $('.apply-carousel').carousel();
        $('.apply-dropdown').dropdown();
        // $('.apply-side-panel').sidePanel();
        $('.apply-slider').slider();
        $('.apply-progressbar').progressBar();
        $('.apply-readmore').readmore();
      });

      var emailRegex = Utils.Enum.Form.Input.Email.ValidationRegExp;

      var newsletterInputSelector = me.newsletterInputSelector;
      var newsletterCheckSelector = me.newsletterCheckSelector;
      var newsletterMessageClass = me.newsletterMessageClass;
      var newsletterMessageNoCheckClass = me.newsletterMessageNoCheckClass;

      $('#header,#footer,#app').on('submit', me.newsletterFormSelector, function (event) {
        event.preventDefault();
        var newsletterEmailValue = $(this).find(newsletterInputSelector).val().trim();
        if (newsletterEmailValue != '') {
          $(this).find('.block-success').hide();
          if (emailRegex.test(newsletterEmailValue) === true) {
            if (($(this).find(newsletterCheckSelector).length > 0 && $(this).find(newsletterCheckSelector).isChecked()) || $(this).find(newsletterCheckSelector).length === 0) {
              var zone;
              if ($(this).parents('#header').length > 0) {
                zone = 'header';
              } else if ($(this).parents('#footer').length > 0) {
                zone = 'footer';
              } else if ($(this).parents('#app').length > 0) {
                zone = 'app';
              } else {
                zone = 'undefined';
              }
              _LaRedoute.newsletterRegistration(this, newsletterEmailValue, zone);
            } else {
              $('#newsletterNoCheck').snackbar({
                method: 'open',
                type: 'warning',
                icon: 'warning'
              });
            }
          } else {
            $('#newsletterNotEmail').snackbar({
              method: 'open',
              type: 'warning',
              icon: 'warning'
            });
          }
        } else {
          $('#newsletterEmpty').snackbar({
            method: 'open',
            type: 'warning',
            icon: 'warning'
          });
        }
      });

      $(me.commonNewsletterFormSelector).on('submit', function (event) {
        event.preventDefault();
        var newsletterEmailValue = $(me.commonNewsletterInputSelector).val();
        if (newsletterEmailValue != '') {
          if (emailRegex.test(newsletterEmailValue) === true) {
            if (($(me.commonNewsletterCheckSelector).length > 0 && $(me.commonNewsletterCheckSelector).isChecked()) || $(me.commonNewsletterCheckSelector).length === 0) {
              _LaRedoute.newsletterRegistration(this, newsletterEmailValue, 'common');
            } else {
              $('.' + me.commonNewsletterMessageClass + '.' + me.commonNewsletterMessageNoCheckClass)
                .show()
                .attr('id', 'newsletterErrorMsg');
            }
          } else {
            $('.' + me.commonNewsletterMessageClass + '.' + me.commonNewsletterMessageNotEmailClass)
              .show()
              .attr('id', 'newsletterErrorMsg');
          }
        } else {
          $('.' + me.commonNewsletterMessageClass + '.' + me.commonNewsletterMessageEmptyClass)
            .show()
            .attr('id', 'newsletterErrorMsg');
        }
      });

      $(newsletterInputSelector).on('keydown', function () {
        $('.' + newsletterMessageClass + ':not(.' + newsletterMessageNoCheckClass + ')').hide();
      });

      $(me.commonNewsletterInputSelector).on('keydown', function () {
        $('.' + me.commonNewsletterMessageClass + ':not(.' + me.commonNewsletterMessageNoCheckClass + ')')
          .hide()
          .attr('id', '');
      });

      $(newsletterCheckSelector).on('click', function () {
        $('.' + newsletterMessageClass + '.' + newsletterMessageNoCheckClass).hide();
        $('.' + newsletterMessageClass + '.' + Utils.Enum.Class.BlockInfo.Success).hide();
      });

      $(me.commonNewsletterCheckSelector).on('click', function () {
        $('.' + me.commonNewsletterMessageClass + '.' + me.commonNewsletterMessageNoCheckClass).hide();
        $('.' + me.commonNewsletterMessageClass + '.' + Utils.Enum.Class.BlockInfo.Success).hide();
      });

      var GoToTop = function () {
        $('html,body').animate({ scrollTop: 0 }, 300);
      };

      /**
       * Handle Inbenta FAQ Button mobile animation
       */
      var $inbentaButton = $('#inbenta-start');
      var debounceInbentaAnim;
      // Init with scroll position on page load
      var lastScrollPosition = $(window).scrollTop();

      function expandInbentaButton() {
        if (!$inbentaButton.hasClass('inbenta-start--full')) {
          toggleInbentaMobileAnimationClass();
        }
      }

      function reduceInbentaButton() {
        if (!$inbentaButton.hasClass('inbenta-start--reduced')) {
          toggleInbentaMobileAnimationClass();
        }
      }

      function toggleInbentaMobileAnimationClass() {
        $inbentaButton.toggleClass('inbenta-start--reduced');
        $inbentaButton.toggleClass('inbenta-start--full');
      }

      $(window).on('scroll', function () {
        if (debounceInbentaAnim) {
          window.clearTimeout(debounceInbentaAnim);
        }

        debounceInbentaAnim = window.setTimeout(function () {
          var currentScrollPosition = $(window).scrollTop();
          // handle mobiles "rebound" effect when at the bottom of the page which triggers a scroll up-scroll down
          // bottom of the page case
          if (window.innerHeight + window.pageYOffset >= document.body.offsetHeight) {
            reduceInbentaButton();
            return;
          }
          // top of the page case
          if (currentScrollPosition <= 0) {
            expandInbentaButton();
            return;
          }
          // scrolling down - reducing button
          if (currentScrollPosition > lastScrollPosition) {
            reduceInbentaButton();
          }
          // scrolling up - expanding button
          else if (lastScrollPosition > currentScrollPosition) {
            expandInbentaButton();
          }

          lastScrollPosition = currentScrollPosition;
        }, 25);
      });

      /**
       * Handle back to top button
       */
      var $backToTop = $('#backToTop');
      if ($backToTop.length > 0) {
        var inbentaButtonIsDisplayed = $inbentaButton && $inbentaButton.length > 0 && $inbentaButton.css('visibility') === 'visible';
        if (inbentaButtonIsDisplayed) {
          $backToTop.addClass('withInbentaButton--green');
        }
        $backToTop.on('click', function () {
          GoToTop();
          $(document).find(':focusable').first().focus();
        });

        var debounceTimer;
        var visibilityClass = 'visibility-h';
        var inbentaButtonBottomPosition = $inbentaButton.css('bottom');

        var showBackToTopButton = function () {
          $backToTop.addClass('in');
        };

        var hideBackToTopButton = function () {
          $backToTop.removeClass('in');
          setTimeout(function () {
            $backToTop.addClass(visibilityClass);
          }, 150);
        };

        var moveUpBackToTopButton = function () {
          $backToTop.css('bottom', inbentaButtonBottomPosition).addClass('withInbentaButton--black aboveInbenta').removeClass('withInbentaButton--green');
          setTimeout(function () {
            $backToTop.css('bottom', parseInt(inbentaButtonBottomPosition.replace('px', '')) + 64 + 'px');
          }, 100);
        };

        var moveDownBackToTopButton = function () {
          $backToTop.css('bottom', inbentaButtonBottomPosition).addClass('withInbentaButton--green').removeClass('withInbentaButton--black aboveInbenta');
        };

        $(window).on('scroll', function () {
          if (debounceTimer) {
            window.clearTimeout(debounceTimer);
          }

          debounceTimer = window.setTimeout(function () {
            var selfScrollTop = $(this).scrollTop();
            var bodyHeight = $('body').height();
            var delta = bodyHeight - selfScrollTop;
            var isBottomOfThePage = bodyHeight === window.pageYOffset + window.innerHeight;
            var isLowEnoughInThePage = selfScrollTop > 200 && delta > 900;

            if (isLowEnoughInThePage || isBottomOfThePage) {
              // Show button
              $backToTop.removeClass(visibilityClass);
              setTimeout(function () {
                showBackToTopButton();
                // Prevent backToTop and Inbenta button to overlap
                if (inbentaButtonIsDisplayed && !$backToTop.hasClass('aboveInbenta')) {
                  moveUpBackToTopButton();
                }
              }, 150);
            } else if (selfScrollTop < 150) {
              // Prevent backToTop and Inbenta button to overlap
              if (inbentaButtonIsDisplayed && $backToTop.hasClass('aboveInbenta')) {
                moveDownBackToTopButton();
                setTimeout(function () {
                  hideBackToTopButton();
                }, 150);
              } else {
                hideBackToTopButton();
              }
            }
          }, 100);
        });
      }
      if (this.appPicture.length > 0) {
        this.appPicture.attr('src', this.getAppPicto()).parent().show();
      }

      if (Utils.Common.isOldAndroid()) {
        $('body').addClass('old-android');
      }
    },
    getAppPicto: function () {
      var appPictureFilename = '/images/Common/';
      var countryCode = Utils.Common.getCountryCode().toLowerCase();
      if (Utils.Common.isAppleDevice()) {
        if (this.hasAppPicto('Apple')) {
          appPictureFilename += Utils.Enum.AppPicture.Apple[countryCode];
        } else {
          appPictureFilename += Utils.Enum.AppPicture.Apple['default'];
        }
      } else if (Utils.Common.isAndroidDevice()) {
        if (this.hasAppPicto('Android')) {
          appPictureFilename += Utils.Enum.AppPicture.Android[countryCode];
        } else {
          appPictureFilename += Utils.Enum.AppPicture.Android['default'];
        }
      } else {
        appPictureFilename = '';
      }
      return appPictureFilename;
    },
    hasAppPicto: function (device) {
      if (Utils.Enum.AppPicture[device][Utils.Common.getCountryCode().toLowerCase()] !== undefined) {
        return true;
      }
      return false;
    },
    updateBasketCountItem: function () {
      var me = this;
      return $.ajax({
        cache: false,
        url: this.appPath + '/shoppingbasket/basketitemcount/',
        data: {},
        success: function (data) {
          if (data > 0) {
            $('#basketIcon').find('.badge').text(data);
            _LaRedoute.getBasketItemCountTries = 0;
            _LaRedoute.noOfItemsInCart = data;
            $('#basketIcon').find('.badge').css({ display: 'flex' });
          } else {
            $('#basketIcon').find('.badge').hide();
          }
        },
        error: function (xhr, status, error) {
          if (++_LaRedoute.getBasketItemCountTries > 3) {
            console.error('AJAX on ' + this.url + ' method ' + this.type + ' status ' + xhr.status + ' statusText ' + xhr.statusText + ' error ' + error + ' response ' + xhr.responseText);
          } else {
            setTimeout(_LaRedoute.updateBasketCountItem.call(me), 500);
          }
        }
      });
    },
    updateWishlistCountItem: function () {
      var me = this;
      return $.ajax({
        cache: false,
        url: me.appPath + '/servicewishlistnosession/getwishlistitemcount',
        data: {},
        success: function (data) {
          var $wishlistBadge = $('#IconWishlist .badge');
          if (data > 0) {
            $wishlistBadge.text(data);
            _LaRedoute.getWishlistItemCountTries = 0;
            $wishlistBadge.css({ display: 'flex' });
          } else {
            $wishlistBadge.text('');
            $wishlistBadge.hide();
          }
        },
        error: function (xhr, status, error) {
          if (++_LaRedoute.getWishlistItemCountTries > 3) {
            console.error('AJAX on ' + this.url + ' method ' + this.type + ' status ' + xhr.status + ' statusText ' + xhr.statusText + ' error ' + error + ' response ' + xhr.responseText);
          } else {
            setTimeout(_LaRedoute.updateWishlistCountItem.call(me), 500);
          }
        }
      });
    },
    getAppleAppURL: function () {
      if (this.dataGlobal.country !== undefined) {
        var countryCodeISO;
        switch (this.dataGlobal.countryCode) {
          case 'nl-BE':
            countryCodeISO = 'nl';
            break;
          default:
            countryCodeISO = this.dataGlobal.country;
            break;
        }
        return 'https://itunes.apple.com/' + countryCodeISO + '/app/id393136788';
      }
      return $('#dl-app-link').data('apple');
    },
    loadAppPushFromDeviceType: function () {
      //If the push has been successfully loaded
      var $appLink = $('#dl-app-link');
      var $imgLink = $('#dl-app-picture');
      if ($appLink.length > 0) {
        $imgLink.attr('src', this.getAppPicto());
        if (Utils.Common.isAndroidDevice()) {
          $appLink.attr('href', $appLink.data('android')).show();
        } else if (Utils.Common.isAppleDevice()) {
          $appLink.attr('href', this.getAppleAppURL()).show();
        } else {
          // Not handled currently
          $('#divMobilePush').hide();
        }
      }
    },
    newsletterRegistration: function (form, email, zone) {
      var me = this;
      var $form = form instanceof $ ? form : $(form);
      var newsletterMessageClass = null;

      if (zone === 'header' || zone === 'footer') {
        newsletterMessageClass = [me.newsletterMessageClass, Utils.Enum.Class.BlockInfo.Default, Utils.Enum.Class.BlockInfo.Success];
      } else {
        newsletterMessageClass = [me.commonNewsletterMessageClass, Utils.Enum.Class.BlockInfo.Default, Utils.Enum.Class.BlockInfo.Success];
      }
      var newsletterMessageSelector = '.' + newsletterMessageClass.join('.');
      let newsletterMessage = $(newsletterMessageSelector);

      return $.ajax({
        cache: false,
        url: me.appPath + '/customerservices/newslettersubscribefr',
        data: {
          email: email,
          zone: zone,
          virtualsite: $('#idVirtualSite').val(),
          serviceName: ''
        },
        beforeSend: function (xhr) {
          $form.addLoading();
          if (xhr.status !== 200) {
            $form.removeLoading();
          }
        },
        success: function (data) {
          // If there is no success message
          if ($(newsletterMessageSelector).length === 0) {
            // We create it and append to its form
            $('<div />', {
              class: newsletterMessageClass.join(' ')
            }).appendTo($form);
          }
          $('.newsletter-message').hide();

          var snackbarType = data.isSuccess ? 'success' : 'error';

          $(newsletterMessageSelector).text(data.message).snackbar({
            method: 'open',
            type: snackbarType
          });
          if (!data.isSuccess) {
            if (data.code === 'alreadysubscribed') {
              $(newsletterMessageSelector).attr('role', 'alert').removeClass('block-success').removeClass('snackbar--success').addClass('snackbar--error');
            } else {
              $(newsletterMessageSelector).attr('role', 'alert').removeClass('block-success').removeClass('snackbar--success').addClass('text-danger');
            }
          } else {
            $(newsletterMessageSelector).attr('role', 'status');
          }
        },
        error: function () {
          throw 'Newsletter registration: Failure';
        },
        complete: function (data) {
          $form.removeLoading();
        }
      });
    },
    getScreenType: function (request) {
      var device = window.getComputedStyle(document.body, ':after').getPropertyValue('content');
      device = parseInt(device.replace(/'/g, '').replace(/"/g, ''));
      switch (request) {
        case 'object':
          if (device === 1) {
            return { id: 1, name: 'xs' };
          } else if (device === 2) {
            return { id: 2, name: 'sm' };
          } else if (device === 3) {
            return { id: 3, name: 'md' };
          } else if (device === 4) {
            return { id: 4, name: 'lg' };
          }
          break;
        case 'name':
          if (device === 1) {
            return 'xs';
          } else if (device === 2) {
            return 'sm';
          } else if (device === 3) {
            return 'md';
          } else if (device === 4) {
            return 'lg';
          }
          break;
        default:
          return device;
      }
    },
    updateOrientation: function (id) {
      var me = this;
      me.currentOrientation = me.getScreenType();
    },
    LoadMyRedouteLightBox: function (mediaId, allMedia, isMobile, callback) {
      var me = this;
      //-- Get Vanilla Javascript Instance --//

      var placeholder = $('#divMyRedouteLightboxPlaceholder');

      if (!placeholder) return;

      var args = {
        request: {
          MediaId: mediaId,
          IsMobile: isMobile
        }
      };

      $.ajax({
        url: _LaRedoute.appPath + '/servicemyredoute/loadmyredoutelightbox',
        data: JSON.stringify(args),
        contentType: 'application/json; charset=utf-8',
        dataType: 'json',
        type: 'POST'
      }).done(function (data, textStatus, jqXHR) {
        //-- .NET 4 Compatibility --//
        if (data.d != null) data = data.d;

        if (data.IsSuccess) {
          /* Utils.CookieManager.CreateCookie(
                        'quickzoomshoppingtool',
                        'UserGeneratedContent'
                    ); */

          //-- Replace Placeholder HTML --//
          var containerPopin = $('<div>', {
            id: 'myRedouteLightboxPopin',
            class: 'popin my-redoute-lightbox-popin',
            html: data.Html
          });
          placeholder.$container = containerPopin;
          containerPopin.popin('open');

          //-- Initialise --//
          _page.Blocs.MyRedoute = new UiMyRedouteLightbox(me, 'UiMyRedouteLightbox', mediaId, allMedia, callback);
        }
      });
    },
    ReportMyRedouteMedia: function (mediaId, email, reason, callback) {
      var me = this;

      var args = {
        request: {
          MediaId: mediaId,
          Email: email,
          Reason: reason
        }
      };

      $.ajax({
        url: _LaRedoute.appPath + '/servicemyredoute/reportmyredoutemedia',
        data: JSON.stringify(args),
        contentType: 'application/json; charset=utf-8',
        dataType: 'json',
        type: 'POST'
      }).done(function (data, textStatus, jqXHR) {
        //-- .NET 4 Compatibility --//

        if (data.d != null) data = data.d;

        callback(data.IsSuccess);
      });
    }
  };
})(window, jQuery);

$(function () {
  _LaRedoute.init();
  if (!$('.external').length) {
    _UiHeader.Init();
  }

  /* fix header opco */
  if ($(window).width() <= 768) {
    if (Utils.StorageManager.ReadStorageValue('lr-keyFrameSupported', false) === false) {
      animeJsKeyFrame();
    } else {
      keyFrameSupported();
    }
  }
});

function keyFrameSupported() {
  var $opBoutique = $('.op-boutique:visible');
  var animationOpCo1 = $opBoutique.find('.opco-animation-mobile1');
  var animationOpCo2 = $opBoutique.find('.opco-animation-mobile2');
  if (animationOpCo1.length > 0) {
    var isAnimated = false;
    var initialTransformValue = animationOpCo1.css('transform');

    setTimeout(function () {
      var keyFrameSupportedStorage = 'lr-keyFrameSupported';
      /*if anime is not start*/
      if (animationOpCo1.css('transform') === initialTransformValue) {
        /*create cookie false*/
        Utils.StorageManager.CreateStorageValue(keyFrameSupportedStorage, false);
        animeJsKeyFrame();
      } else {
        /*create cookie true*/
        Utils.StorageManager.CreateStorageValue(keyFrameSupportedStorage, true);
      }
    }, 2000);
  }
}

function animeJsKeyFrame() {
  var $opBoutique = $('.op-boutique:visible');
  var animationOpCo1 = $opBoutique.find('.opco-animation-mobile1');
  var animationOpCo2 = $opBoutique.find('.opco-animation-mobile2');
  setInterval(function () {
    animationOpCo1.animate({ top: '-42px' }, 'slow');
    animationOpCo1.animate({ opacity: 0 });
    animationOpCo1.animate({ opacity: 0, top: '42px' }, 'slow');
    animationOpCo2.animate({ opacity: 1, top: '0' }, 'slow');
    animationOpCo2.animate({ opacity: 1, top: '0' }, 'slow');
    animationOpCo1.animate({ opacity: 1, top: '0' }, 'slow');
    animationOpCo2.animate({ opacity: 1, top: '-42px' }, 'slow');
    animationOpCo2.animate({ opacity: 0 });
    animationOpCo2.animate({ opacity: 0, top: '42px' }, 'slow');
  }, 5000);
}

function getParentBootstrapValidator(obj) {
  if (obj == null) return null;
  if (obj.data('bootstrapValidator') == null) {
    return getParentBootstrapValidator(obj.parent());
  } else {
    return obj;
  }
}

function CheckKeyCodeNoNumberFNLN(n) {
  return (
    (keyPressed = String.fromCharCode(n.which || n.keyCode)),
    keyPressed == '1' || keyPressed == '2' || keyPressed == '3' || keyPressed == '4' || keyPressed == '5' || keyPressed == '6' || keyPressed == '7' || keyPressed == '8' || keyPressed == '9' || keyPressed == '0'
      ? !1
      : !0
  );
}

function applyNoNumber(textbox) {
  if (textbox == null || textbox.length == 0) return;
  textbox.attr('onkeypress', 'if(!CheckKeyCodeNoNumberFNLN(event)) return false');
}

function applyOnlyNumber(textbox) {
  if (textbox == null || textbox.length == 0) return;
  textbox.on('keypress', function (e) {
    if (CheckKeyCodeNoNumberFNLN(e)) e.preventDefault();
  });
}

function CheckKeyCodeNoSpace(n) {
  return (keyPressed = String.fromCharCode(n.which || n.keyCode)), keyPressed == ' ' ? !1 : !0;
}

function applyNoSpace(textbox) {
  if (textbox == null || textbox.length == 0) return;
  textbox.attr('onkeypress', 'if(!CheckKeyCodeNoSpace(event)) return false');
}

function LogVisit() {
  var refer = document.referrer;
  var currentURL = document.location.pathname + document.location.search; //page+query string
  currentURL = currentURL.replace(/\?/g, '$**$').replace(/&/g, '$*$');
  refer = refer.replace(/\?/g, '$**$').replace(/&/g, '$*$');
  refer = refer.substring(0, 600);

  $.ajax({
    async: true,
    cache: false,
    url: '/ServiceGeneric/LogVisit',
    data: {
      currentPage: currentURL,
      referrerPage: refer
    },
    success: function (data) {},
    error: function () {}
  });
}

function getEmailRegex() {
  return /^([A-Za-z0-9_\-\+\.]){1,32}\@([A-Za-z0-9_\-\.]){1,32}\.([A-Za-z]{2,10})$/;
}

if (typeof _satellite === 'undefined') {
  _satellite = {};
  _satellite.track = function () {};
}

$(function () {
  $('.op-boutique').attr('role', 'marquee');
});

/* Fix for Safari iOS : back button should go back to previous scroll position on previous PLP */
/*
$(function () {
  if (window.ModelPLP) console.log(Window, window.isMobileDevice);
  var pathName = document.location.pathname;
  window.onbeforeunload = function () {
    var scrollPosition = $(document).scrollTop();
    sessionStorage.setItem('scrollPosition_' + pathName, scrollPosition.toString());
  };
  if (sessionStorage['scrollPosition_' + pathName]) {
    $(document).scrollTop(sessionStorage.getItem('scrollPosition_' + pathName));
  }
});
*/
;
;(function (global, $) {
    'use strict';

    global.UiMenuV2 = global.UiBloc.extend({
        init: function (page, name) {
            var me = this;
            me._super(page, name);

            // Public properties
            this.trackingValues = [];

            // Private properties
            var MENU_HEADER_CLASS = 'headerMenuPanel';
            var NEXT_PANEL_CLASS = 'modal--nextPanel';
            var PREV_PANEL_CLASS = 'modal--prevPanel';
            var MENU_ITEMS = 'menu__listItem';
            var CROSS_BLACK = 'lr-icon-cross-small';
            var CROSS_WHITE = 'lr-icon-cross-small-white';
            var MENU_LABELS = 'menuLabels';

            var getTranslation = function () {
                var trad = '';
                if (document.getElementById(MENU_LABELS) && typeof JSON.parse(document.getElementById(MENU_LABELS).text) !== "undefined") {
                    var labels = JSON.parse(document.getElementById(MENU_LABELS).text);
                    if (typeof labels !== "undefined") return labels.MenuSeeUniverse;
                }

                return trad;
            };

            var nextButtons = document.getElementById(MENU_HEADER_CLASS).getElementsByClassName(NEXT_PANEL_CLASS);
            var prevButtons = document.getElementById(MENU_HEADER_CLASS).getElementsByClassName(PREV_PANEL_CLASS);
            var menuItems = document.getElementById(MENU_HEADER_CLASS).getElementsByClassName(MENU_ITEMS);

            // Private methods
            var refreshButtonEventListener = function () {
                refreshListener(nextButtons, 'click', nextFunction);
                refreshListener(prevButtons, 'click', prevFunction);
                refreshListener(menuItems, 'click', addTrackingLevel);
            };

            var refreshListener = function(list, eventName, callback) {
                [].forEach.call(list, function(item) {
                    item.removeEventListener(eventName, callback);
                    item.addEventListener(eventName, callback);
                });
            };

            var addStickyHeader = function(nextPanel) {
                var menuList = nextPanel.querySelector('.menu__list');
                var submenuHeader = nextPanel.querySelector('.submenu__header');
                menuList.addEventListener('scroll', function(event) {
                    var _event = event, target = _event.target;
                    var modalClose = document.querySelector('.modal_close');
                    var headerHeight = submenuHeader.offsetHeight;
                    if (target.scrollTop > headerHeight) {
                        submenuHeader.classList.add('submenu__header--sticky');                   
                        // prevents display from jumping from scrollable content to unscrollable content
                        target.style.paddingBottom = headerHeight + "px";
                        target.style.height = menuList.offsetHeight + submenuHeader.offsetHeight + "px";
                        target.style.marginTop = submenuHeader.offsetHeight + 'px';
                        if (!page.isDesktop) modalClose.style.display = 'none';
                    } else {
                        submenuHeader.classList.remove('submenu__header--sticky');
                        target.removeAttribute('style');
                        target.style.marginTop = 0;
                        if (!page.isDesktop) modalClose.removeAttribute('style');
                    }
                });
            };

            var nextFunction = function (e) {
                e.preventDefault();

                getNextPanel(e)
                    .then(function (data) {
                        var _data = data,
                            nextPanel = _data.nextPanel,
                            target = _data.target;
                
                        if (nextPanel.classList.contains('menu__listWrapper')) {
                            nextPanel.classList.add('hasWhiteBg');
                            var parentPanel = target.closest('.modal__panelElement');
    
                            nextPanel.classList.add('modal__panelElement');
                            parentPanel.parentElement.append(nextPanel);

                           if(!page.isDesktop) addStickyHeader(nextPanel);
                            
                            // changing color class of close button to light
                            var closeButton = document.getElementById('menuPanel').querySelector(".".concat(CROSS_BLACK));
                            if (document.getElementById('menuPanel').getElementsByClassName('modal__panelElement').length > 1 && !!closeButton) {
                                closeButton.classList.add(CROSS_WHITE);
                                closeButton.parentNode.classList.add("isSubmenu");
                            }

                            me.Page.$eventContainer.trigger('modal.panel_next', MENU_HEADER_CLASS);
                        }
                    })
                    .catch(
                        function(error) { error; }
                    );
            };

            var prevFunction = function (e) {
                e.preventDefault();
                e.stopPropagation();

                // changing back color class of close button to neutral
                var closeButton = document.getElementById('menuPanel').querySelector('.lr-icon-cross-small-white');
                if (document.getElementById('menuPanel').getElementsByClassName('modal__panelElement').length == 2 && !!closeButton) {
                    closeButton.classList.add(CROSS_BLACK);
                    closeButton.classList.remove(CROSS_WHITE);
                    closeButton.parentNode.classList.remove("isSubmenu");
                }

                me.Page.$eventContainer.trigger('modal.panel_prev', MENU_HEADER_CLASS);
                me.removeValueFromTracking();

                var target = e.currentTarget.closest('.modal__panelElement');

                setTimeout(function () {
                    target.remove();
                }, 200);
            };

            var getNextPanel = function (e) {
                var target = e.currentTarget;
                var category = target.parentElement;

                var baseDirectoryPrefix = '';
                if (contextInfo.EnvironmentBaseDirectory != '') {
                    baseDirectoryPrefix = '/' + contextInfo.EnvironmentBaseDirectory;
                }
                
                return new Promise(function (resolve, reject) {
                    if(!target.nextElementSibling && target.parentElement.dataset.haschild === "true") {
                        var url = baseDirectoryPrefix + '/servicemenu/loadchildmenuitemsforparent.aspx';
                        url += '?currentMenuItemId=' + category.dataset.menuid;
                        url += '&categoryid=' + category.dataset.categoryid;
                        url += '&level=' + category.dataset.lvl;
                        url += '&parentmenuitemid=' + category.dataset.parentMenuId;

                        var xhr = new XMLHttpRequest();
                        xhr.onreadystatechange = function () {
                            if (xhr.readyState === 4 && (xhr.status >= 200 && xhr.status < 300)) {
                                var wrapper = buildLvl3(category, xhr.responseText);

                                var nextPanel = wrapper.cloneNode(true);
                                resolve({
                                    nextPanel: nextPanel,
                                    target: target
                                  });
                            }
                        };
                        xhr.open('GET', url);
                        xhr.send();
                    }
                    else {
                        var nextPanel = target.nextElementSibling.cloneNode(true);

                        resolve({
                            nextPanel: nextPanel,
                            target: target
                          });
                    }
                });
            };

            var buildLvl3 = function (lvl2, content) {
                var wrapper = document.createElement('div');
                wrapper.classList.add('menu__listWrapper');
                wrapper.append(buildPanelTitle(lvl2));
                wrapper.append(buildPanelHeader(lvl2));

                wrapper.append(buildPanelMenuList(lvl2, content));

                lvl2.append(wrapper);

                Utils.Common.HighlightCustomerJourney(lvl2);

                return wrapper;
            };

            var buildPanelTitle = function (lvl2) {
                var title = document.createElement('h2');
                title.id = 'menuPanelTitle';
                title.classList.add('sr-only');
                title.innerHTML = 'Menu';

                return title;
            };

            var buildPanelHeader = function (lvl2) {
                var subMenuHeader = document.createElement('div');
                subMenuHeader.classList.add('submenu__header');

                subMenuHeader.style.backgroundColor = lvl2.dataset.background;
                subMenuHeader.style.color = lvl2.dataset.color;

                subMenuHeader.append(buildPanelHeaderTopActions(lvl2));
                subMenuHeader.append(buildPanelHeaderTitleAndBottom(lvl2));

                return subMenuHeader;
            };

            var buildPanelHeaderTopActions = function (lvl2) {
                var subMenuTopActions = document.createElement('div');
                subMenuTopActions.classList.add('submenu__topActions');

                var subMenutopActionArrow = null;

                var lvl2Header = lvl2.closest('.menu__listWrapper');
                var lvl2Svg = lvl2Header.getElementsByClassName('submenu__topActions--ArrowLeft')[0];

                if (lvl2Svg) {
                    subMenutopActionArrow = lvl2Svg.cloneNode(true);
                } else {
                    subMenutopActionArrow = document.createElement('a');
                    subMenutopActionArrow.classList.add('submenu__topActions--ArrowLeft', 'modal--prevPanel');
                }

                subMenuTopActions.append(subMenutopActionArrow);

                return subMenuTopActions;
            };

            var buildPanelHeaderTitleAndBottom = function (lvl2) {
                var subMenuTitleAndBottomWrapper = document.createElement('div');
                subMenuTitleAndBottomWrapper.classList.add('submenu__titleAndBottomWrapper');

                subMenuTitleAndBottomWrapper.append(buildPanelHeaderTitleWrapper(lvl2));

                var subMenuBottomAction = document.createElement('a');
                subMenuBottomAction.classList.add('submenu__bottomAction');
                subMenuBottomAction.attributes['aria-hidden'] = 'true';
                subMenuBottomAction.dataset.cerberus = 'mainmenu-l3-cat';

                if (lvl2.getElementsByTagName('a')[0]) {
                    subMenuBottomAction.href = lvl2.getElementsByTagName('a')[0].getAttribute('href');
                }

                var trad = getTranslation('MenuSeeUniverse');
                trad = trad.replace('|category|', lvl2.dataset.categorylabel);

                var subMenuBottomActionText = document.createElement('span');
                subMenuBottomActionText.classList.add('submenu__bottomAction--text');
                subMenuBottomActionText.innerHTML = trad;

                subMenuBottomAction.append(subMenuBottomActionText);

                var lvl2Header = lvl2.closest('.menu__listWrapper');
                var lvl2Svg = lvl2Header.getElementsByClassName('submenu__bottomAction--ArrowRight')[0];
                var subMenuBottomActionArrow = null;

                if (lvl2Svg) {
                    subMenuBottomActionArrow = lvl2Svg.cloneNode(true);
                } else {
                    subMenuBottomActionArrow = document.createElement('a');
                    subMenuBottomActionArrow.classList.add('submenu__topActions--ArrowLeft');
                }

                subMenuBottomAction.append(subMenuBottomActionArrow);

                subMenuTitleAndBottomWrapper.append(subMenuBottomAction);

                return subMenuTitleAndBottomWrapper;
            };

            var buildPanelHeaderTitleWrapper = function (lvl2) {
                var subMenuTittleWrapper = document.createElement('div');
                subMenuTittleWrapper.classList.add('submenu__titleWrapper');

                var subMenuTitle = document.createElement('p');
                subMenuTitle.classList.add('submenu__title');
                subMenuTitle.innerHTML = lvl2.getElementsByTagName('a')[0].innerHTML;
                subMenuTitle.dataset.cerberus = 'mainmenu-title';
                subMenuTittleWrapper.append(subMenuTitle);

                return subMenuTittleWrapper;
            };

            var buildPanelMenuList = function (lvl2, content) {
                var menuList = document.createElement('ul');
                menuList.classList.add('menu__list');
                menuList.dataset.brands = lvl2.LinkToBrands;

                buildPanelMenuListItem(lvl2, content, menuList);

                return menuList;
            };

            var buildPanelMenuListItem = function (lvl2, content, menuList) {
                var jsonContent = JSON.parse(content);
                jsonContent.forEach(function(item) {
                    var liItem = document.createElement('li');
                    liItem.classList.add('menu__listItem');
                    liItem.dataset.lvl = item.Level;
                    liItem.dataset.id = item.CategoryId;
                    liItem.dataset.haschild = item.HasChildren;
                    liItem.dataset.categoryid = item.CategoryId;
                    if(item.Theme) {
                        liItem.dataset.background = item.Theme.PrimaryColour;
                        liItem.dataset.color = item.Theme.SecondaryColour;
                    }

                    var aItem = document.createElement('a');
                    aItem.classList.add('menu__listItem--link');
                    aItem.href = item.Link + '#shoppingtool=treestructureflyout';
                    aItem.dataset.cerberus = 'mainmenu-l3-cat';
                    aItem.innerHTML = item.Label;
                    if (item.HasChildren) {
                        aItem.setAttribute('role', 'button')
                    }

                    liItem.append(aItem);

                    menuList.append(liItem);
                });
            };

            var cleanTrackingValue = function (value) {
                var cleanValue = value;

                cleanValue = cleanValue.trim();
                cleanValue = cleanValue.replace(/\s+/g, '');
                cleanValue = Utils.Common.removePunctuation(cleanValue);
                cleanValue = cleanValue.toLowerCase();

                cleanValue = Utils.Common.RemoveAccents(cleanValue);

                return cleanValue;
            };

            // Public Methods
            me.addValueToTracking = function (currentVal, level) {
                // When clicking on a link or going to a panel, add current clicked item to the tracking
                currentVal = cleanTrackingValue(currentVal);

                if (typeof virtualSite !== 'undefined' && me.trackingValues.indexOf(virtualSite) == -1)
                    // Mandatory virtualSite as first element
                    me.trackingValues[0] = virtualSite;

                // Check if already existing before to add
                if (currentVal && me.trackingValues.indexOf(currentVal) == -1) me.trackingValues[level] = currentVal;

                localStorage.setItem('lr-tracking-value', me.trackingValues);
            };

            me.removeValueFromTracking = function () {
                // When going back in panel, remove last clicked item from the tracking
                me.trackingValues.pop();
                localStorage.setItem('lr-tracking-value', me.trackingValues);
            };

            me.sendTrackingValue = function (trackingValues) {
                // Send final string of tracking with 5 items
                if (trackingValues.length < 5) {
                    // Push 'null' for all blank items of the array
                    for (var i = trackingValues.length; i < 5; i++) {
                        trackingValues.push('null');
                    }
                }
                localStorage.setItem('lr-tracking-value', trackingValues);

                var cookieValue = localStorage.getItem('lr-tracking-value');
                cookieValue = cookieValue.replace(/[#?!.;:%]/g, '');
                cookieValue = Utils.Common.RemoveAccents(cookieValue);
                cookieValue = cookieValue.replace(/\s+/g, '');
                cookieValue = cookieValue.replace(/,/g, '_');

                Utils.CookieManager.CreateCookie('OmnitureEntry_Header_SalesArea', cookieValue);
            };

            me.applyTracking = function (element, depth) {
                var finalElement = element.trim().toLowerCase().replace(/ /g, '');

                depth = depth ? depth : 0;

                this.Model.$eventContainer.trigger(
                    window.globalTrackingEvent.SHOPPING_TOOL_USED, 
                    [
                        {
                            type: 'TREE',
                            subType: 'MenuBurger',
                            extraData: [depth, finalElement]
                        }
                    ]
                );
            };
            
            var addTrackingLevel = function (e) {
                var currentLvl = e.currentTarget.dataset.lvl;

                if (e.target.parentElement.dataset.haschild !== true && currentLvl === undefined) currentLvl = 1;

                me.addValueToTracking(e.target.textContent, currentLvl);
                me.applyTracking(e.target.textContent, currentLvl);

                if (e.target.parentElement.dataset.haschild !== true) me.sendTrackingValue(me.trackingValues);
            };

            // Events
            me.Page.$eventContainer.on('modal.prevPanel', refreshButtonEventListener);
            me.Page.$eventContainer.on('modal.nextPanel', refreshButtonEventListener);

            // triggers the lr+ modal from the navigation panel
            // handles the differential display between desktop(panel) and mobile (iceberg)
            var lrPLusPanelTrigger = document.querySelector('.lrPLusPanel_trigger');
            if(lrPLusPanelTrigger) {
                lrPLusPanelTrigger.addEventListener('click', function (event) {
                    event.preventDefault();
                    $('#modalLRAndMe').modal({
                        method: 'open',
                        type: page.isDesktop ? 'panel' : 'iceberg',
                        id: 'LRAndMe_Panel',
                        gradientOnScroll: true
                    });
                });
            }

            // Actions
            refreshButtonEventListener(); 
        }
    });
})(window, window.jQuery);
;
(function (global, $) {

    var namespace = 'dropdown';

    $[namespace] = function (element, options) {
        // Private properties
        var plugin = this;
        var $element = $(element);
        var settings = options;
        var animationDuration = 200;
        var isOpened = false;
        var isMoving = false;
        var $header = $element.find('.custom-dropdown-header:first');
        var $content = $element.find('.custom-dropdown-content:first');
        var $arrow = $header.find('.lr-arrow');
        var arrowDownClass = 'lr-arrow-down';
        var arrowUpClass = 'lr-arrow-up';
        var chevronClass = global.isMobileDevice ?
            ['lr-icon-chevron-big-bottom', 'lr-icon-chevron-big-top'] :
            ['lr-icon-chevron-small-bottom', 'lr-icon-chevron-small-top'];
        var chevronDown = chevronClass[0];
        var chevronUp = chevronClass[1];
        var $chevron = $('<i>', {
            'class': 'custom-dropdown-chevron lr-icon ' + chevronDown
        });
        var openedClass = 'opened';
        var ariaExpanded = 'aria-expanded';


        // Private methods
        function hasArrow() {
            return $arrow && $arrow.length > 0;
        }

        function hasChevron() {
            return $chevron && $chevron.length > 0;
        }

        function needChevron() {
            return $header.hasClass('custom-dropdown-header--chevron');
        }

        // Public methods
        plugin.open = function () {
            if (!isOpened && !isMoving) {
                isMoving = true;
                isOpened = true;
                if (settings.group !== undefined && $(settings.group).find('.custom-dropdown.opened:first').length > 0) {
                    $(settings.group).find('.custom-dropdown.opened:first').data('dropdown').close();
                }
                $content.stop().slideDown({
                    duration: animationDuration,
                    start: function () {
                        if (hasArrow()) {
                            $arrow
                                .removeClass(arrowDownClass)
                                .addClass(arrowUpClass);
                        }
                        if (hasChevron()) {
                            $chevron
                                .removeClass(chevronDown)
                                .addClass(chevronUp);
                        }
                    },
                    complete: function () {
                        isMoving = false;

                        $element
                            .addClass(openedClass)
                            .attr(ariaExpanded, true)
                            .trigger(dropdownEvent.open);
                    }
                });
            }
        };
        plugin.close = function (hasAnimation) {
            if (isOpened && !isMoving) {
                isMoving = true;
                isOpened = false;
                var animDelay = !hasAnimation ? 0 : animationDuration;
                $content.stop().slideUp({
                    duration: animDelay,
                    start: function () {
                        if (hasArrow()) {
                            $arrow
                                .removeClass(arrowUpClass)
                                .addClass(arrowDownClass);
                        }
                        if (hasChevron()) {
                            $chevron
                                .removeClass(chevronUp)
                                .addClass(chevronDown);
                        }
                    },
                    complete: function () {
                        isMoving = false;

                        $element
                            .removeClass(openedClass)
                            .attr(ariaExpanded, false)
                            .trigger(dropdownEvent.close);
                    }
                });
            }
        };
        plugin.destroy = function () {
            plugin.close(false);
            $header.off('click');
            $element.removeData(namespace);
        };

        $header.on('click', function () {
            if (isOpened) {
                plugin.close();
            } else if (!$element.hasClass('disabled')) {
                plugin.open();
            }
        });

        if (hasArrow()) {
            $arrow.addClass(arrowDownClass);
        }

        if (needChevron()) {
            $header.append($chevron);
        }

        if($header.hasClass('preopened')) {
            if (isOpened) {
                plugin.close();
            } else if (!$element.hasClass('disabled')) {
                plugin.open();
                
                $('html, body').animate({
                    scrollTop: $(".preopened").offset().top
                }, 2000);
            }
        }
    };

    $.fn[namespace] = function (data) {
        return this.each(function () {
            var $this = $(this);

            if ($this.data(namespace) === undefined) {
                var options = $this.data();
                if (typeof data === varType.obj) {
                    $.extend(options, data);
                }
                var plugin = new $[namespace](this, options);
                $this.data(namespace, plugin);
            }

            var pluginMethod;
            if (typeof data === varType.str) {
                pluginMethod = $this.data(namespace)[data];
            } else if (typeof data === varType.obj && typeof data.method === varType.str) {
                pluginMethod = $this.data(namespace)[data.method];
            }

            if (typeof pluginMethod === varType.fn) {
                pluginMethod.apply(this);
            }
        });
    };
})(window, jQuery);

var
    dropdownEvent = {
        close: 'dropdown.close',
        open: 'dropdown.open'
    };;
/*
 * EaselJS
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2011 gskinner.com, inc.
 *
 * Distributed under the terms of the MIT license.
 * http://www.opensource.org/licenses/mit-license.html
 *
 * This notice shall be included in all copies or substantial portions of the Software.
 */
this.createjs = this.createjs || {};
(function () {
    var c = function () {
        throw 'UID cannot be instantiated';
    };
    c._nextID = 0;
    c.get = function () {
        return c._nextID++;
    };
    createjs.UID = c;
})();
this.createjs = this.createjs || {};
(function () {
    var c = function () {
            this.initialize();
        },
        b = c.prototype;
    c.initialize = function (a) {
        a.addEventListener = b.addEventListener;
        a.removeEventListener = b.removeEventListener;
        a.removeAllEventListeners = b.removeAllEventListeners;
        a.hasEventListener = b.hasEventListener;
        a.dispatchEvent = b.dispatchEvent;
    };
    b._listeners = null;
    b.initialize = function () {};
    b.addEventListener = function (a, m) {
        var b = this._listeners;
        b ? this.removeEventListener(a, m) : (b = this._listeners = {});
        var d = b[a];
        d || (d = b[a] = []);
        d.push(m);
        return m;
    };
    b.removeEventListener = function (a, m) {
        var b = this._listeners;
        if (b) {
            var d = b[a];
            if (d)
                for (var e = 0, c = d.length; e < c; e++)
                    if (d[e] == m) {
                        1 == c ? delete b[a] : d.splice(e, 1);
                        break;
                    }
        }
    };
    b.removeAllEventListeners = function (a) {
        a
            ? this._listeners && delete this._listeners[a]
            : (this._listeners = null);
    };
    b.dispatchEvent = function (a, m) {
        var b = !1,
            d = this._listeners;
        if (a && d) {
            'string' == typeof a && (a = { type: a });
            a.target = m || this;
            d = d[a.type];
            if (!d) return b;
            for (var d = d.slice(), c = 0, f = d.length; c < f; c++) {
                var h = d[c];
                h instanceof Function
                    ? (b = b || h.apply(null, [a]))
                    : h.handleEvent && (b = b || h.handleEvent(a));
            }
        }
        return !!b;
    };
    b.hasEventListener = function (a) {
        var m = this._listeners;
        return !(!m || !m[a]);
    };
    b.toString = function () {
        return '[EventDispatcher]';
    };
    createjs.EventDispatcher = c;
})();
this.createjs = this.createjs || {};
(function () {
    var c = function () {
        throw 'Ticker cannot be instantiated.';
    };
    c.useRAF = !1;
    c.addEventListener = null;
    c.removeEventListener = null;
    c.removeAllEventListeners = null;
    c.dispatchEvent = null;
    c.hasEventListener = null;
    c._listeners = null;
    createjs.EventDispatcher.initialize(c);
    c._listeners = null;
    c._pauseable = null;
    c._paused = !1;
    c._inited = !1;
    c._startTime = 0;
    c._pausedTime = 0;
    c._ticks = 0;
    c._pausedTicks = 0;
    c._interval = 50;
    c._lastTime = 0;
    c._times = null;
    c._tickTimes = null;
    c._rafActive = !1;
    c._timeoutID = null;
    c.addListener = function (a, m) {
        null != a &&
            (c.removeListener(a),
            (c._pauseable[c._listeners.length] = null == m ? !0 : m),
            c._listeners.push(a));
    };
    c.init = function () {
        c._inited = !0;
        c._times = [];
        c._tickTimes = [];
        c._pauseable = [];
        c._listeners = [];
        c._times.push((c._lastTime = c._startTime = c._getTime()));
        c.setInterval(c._interval);
    };
    c.removeListener = function (a) {
        var m = c._listeners;
        m &&
            ((a = m.indexOf(a)),
            -1 != a && (m.splice(a, 1), c._pauseable.splice(a, 1)));
    };
    c.removeAllListeners = function () {
        c._listeners = [];
        c._pauseable = [];
    };
    c.setInterval = function (a) {
        c._interval = a;
        c._inited && c._setupTick();
    };
    c.getInterval = function () {
        return c._interval;
    };
    c.setFPS = function (a) {
        c.setInterval(1e3 / a);
    };
    c.getFPS = function () {
        return 1e3 / c._interval;
    };
    c.getMeasuredFPS = function (a) {
        if (2 > c._times.length) return -1;
        null == a && (a = c.getFPS() | 0);
        a = Math.min(c._times.length - 1, a);
        return 1e3 / ((c._times[0] - c._times[a]) / a);
    };
    c.setPaused = function (a) {
        c._paused = a;
    };
    c.getPaused = function () {
        return c._paused;
    };
    c.getTime = function (a) {
        return c._getTime() - c._startTime - (a ? c._pausedTime : 0);
    };
    c.getTicks = function (a) {
        return c._ticks - (a ? c._pausedTicks : 0);
    };
    c._handleAF = function () {
        c._rafActive = !1;
        c._setupTick();
        c._getTime() - c._lastTime >= 0.97 * (c._interval - 1) && c._tick();
    };
    c._handleTimeout = function () {
        c.timeoutID = null;
        c._setupTick();
        c._tick();
    };
    c._setupTick = function () {
        if (!(c._rafActive || null != c.timeoutID)) {
            if (c.useRAF) {
                var a =
                    window.requestAnimationFrame ||
                    window.webkitRequestAnimationFrame ||
                    window.mozRequestAnimationFrame ||
                    window.oRequestAnimationFrame ||
                    window.msRequestAnimationFrame;
                if (a) {
                    a(c._handleAF);
                    c._rafActive = !0;
                    return;
                }
            }
            c.timeoutID = setTimeout(c._handleTimeout, c._interval);
        }
    };
    c._tick = function () {
        var a = c._getTime();
        c._ticks++;
        var m = a - c._lastTime,
            b = c._paused;
        b && (c._pausedTicks++, (c._pausedTime += m));
        c._lastTime = a;
        for (
            var d = c._pauseable,
                e = c._listeners.slice(),
                f = e ? e.length : 0,
                h = 0;
            h < f;
            h++
        ) {
            var j = e[h];
            null == j ||
                (b && d[h]) ||
                (j.tick ? j.tick(m, b) : j instanceof Function && j(m, b));
        }
        c.dispatchEvent({
            type: 'tick',
            paused: b,
            delta: m,
            time: a,
            runTime: a - c._pausedTime
        });
        for (
            c._tickTimes.unshift(c._getTime() - a);
            100 < c._tickTimes.length;

        )
            c._tickTimes.pop();
        for (c._times.unshift(a); 100 < c._times.length; ) c._times.pop();
    };
    var b =
        window.performance &&
        (performance.now ||
            performance.mozNow ||
            performance.msNow ||
            performance.oNow ||
            performance.webkitNow);
    c._getTime = function () {
        return (b && b.call(performance)) || new Date().getTime();
    };
    c.init();
    createjs.Ticker = c;
})();
this.createjs = this.createjs || {};
(function () {
    var c = function (a, m, b, d, c, f, h, j, k) {
            this.initialize(a, m, b, d, c, f, h, j, k);
        },
        b = c.prototype;
    b.stageX = 0;
    b.stageY = 0;
    b.rawX = 0;
    b.rawY = 0;
    b.type = null;
    b.nativeEvent = null;
    b.onMouseMove = null;
    b.onMouseUp = null;
    b.target = null;
    b.pointerID = 0;
    b.primary = !1;
    b.addEventListener = null;
    b.removeEventListener = null;
    b.removeAllEventListeners = null;
    b.dispatchEvent = null;
    b.hasEventListener = null;
    b._listeners = null;
    createjs.EventDispatcher.initialize(b);
    b.initialize = function (a, m, b, d, c, f, h, j, k) {
        this.type = a;
        this.stageX = m;
        this.stageY = b;
        this.target = d;
        this.nativeEvent = c;
        this.pointerID = f;
        this.primary = h;
        this.rawX = null == j ? m : j;
        this.rawY = null == k ? b : k;
    };
    b.clone = function () {
        return new c(
            this.type,
            this.stageX,
            this.stageY,
            this.target,
            this.nativeEvent,
            this.pointerID,
            this.primary,
            this.rawX,
            this.rawY
        );
    };
    b.toString = function () {
        return (
            '[MouseEvent (type=' +
            this.type +
            ' stageX=' +
            this.stageX +
            ' stageY=' +
            this.stageY +
            ')]'
        );
    };
    createjs.MouseEvent = c;
})();
this.createjs = this.createjs || {};
(function () {
    var c = function (a, m, b, d, c, f) {
            this.initialize(a, m, b, d, c, f);
        },
        b = c.prototype;
    c.identity = null;
    c.DEG_TO_RAD = Math.PI / 180;
    b.a = 1;
    b.b = 0;
    b.c = 0;
    b.d = 1;
    b.tx = 0;
    b.ty = 0;
    b.alpha = 1;
    b.shadow = null;
    b.compositeOperation = null;
    b.initialize = function (a, b, g, d, c, f) {
        null != a && (this.a = a);
        this.b = b || 0;
        this.c = g || 0;
        null != d && (this.d = d);
        this.tx = c || 0;
        this.ty = f || 0;
        return this;
    };
    b.prepend = function (a, b, g, d, c, f) {
        var h = this.tx;
        if (1 != a || 0 != b || 0 != g || 1 != d) {
            var j = this.a,
                k = this.c;
            this.a = j * a + this.b * g;
            this.b = j * b + this.b * d;
            this.c = k * a + this.d * g;
            this.d = k * b + this.d * d;
        }
        this.tx = h * a + this.ty * g + c;
        this.ty = h * b + this.ty * d + f;
        return this;
    };
    b.append = function (a, b, g, d, c, f) {
        var h = this.a,
            j = this.b,
            k = this.c,
            l = this.d;
        this.a = a * h + b * k;
        this.b = a * j + b * l;
        this.c = g * h + d * k;
        this.d = g * j + d * l;
        this.tx = c * h + f * k + this.tx;
        this.ty = c * j + f * l + this.ty;
        return this;
    };
    b.prependMatrix = function (a) {
        this.prepend(a.a, a.b, a.c, a.d, a.tx, a.ty);
        this.prependProperties(a.alpha, a.shadow, a.compositeOperation);
        return this;
    };
    b.appendMatrix = function (a) {
        this.append(a.a, a.b, a.c, a.d, a.tx, a.ty);
        this.appendProperties(a.alpha, a.shadow, a.compositeOperation);
        return this;
    };
    b.prependTransform = function (a, b, g, d, e, f, h, j, k) {
        if (e % 360) {
            var l = e * c.DEG_TO_RAD;
            e = Math.cos(l);
            l = Math.sin(l);
        } else (e = 1), (l = 0);
        if (j || k) (this.tx -= j), (this.ty -= k);
        f || h
            ? ((f *= c.DEG_TO_RAD),
              (h *= c.DEG_TO_RAD),
              this.prepend(e * g, l * g, -l * d, e * d, 0, 0),
              this.prepend(
                  Math.cos(h),
                  Math.sin(h),
                  -Math.sin(f),
                  Math.cos(f),
                  a,
                  b
              ))
            : this.prepend(e * g, l * g, -l * d, e * d, a, b);
        return this;
    };
    b.appendTransform = function (a, b, g, d, e, f, h, j, k) {
        if (e % 360) {
            var l = e * c.DEG_TO_RAD;
            e = Math.cos(l);
            l = Math.sin(l);
        } else (e = 1), (l = 0);
        f || h
            ? ((f *= c.DEG_TO_RAD),
              (h *= c.DEG_TO_RAD),
              this.append(
                  Math.cos(h),
                  Math.sin(h),
                  -Math.sin(f),
                  Math.cos(f),
                  a,
                  b
              ),
              this.append(e * g, l * g, -l * d, e * d, 0, 0))
            : this.append(e * g, l * g, -l * d, e * d, a, b);
        if (j || k)
            (this.tx -= j * this.a + k * this.c),
                (this.ty -= j * this.b + k * this.d);
        return this;
    };
    b.rotate = function (a) {
        var b = Math.cos(a);
        a = Math.sin(a);
        var g = this.a,
            d = this.c,
            c = this.tx;
        this.a = g * b - this.b * a;
        this.b = g * a + this.b * b;
        this.c = d * b - this.d * a;
        this.d = d * a + this.d * b;
        this.tx = c * b - this.ty * a;
        this.ty = c * a + this.ty * b;
        return this;
    };
    b.skew = function (a, b) {
        a *= c.DEG_TO_RAD;
        b *= c.DEG_TO_RAD;
        this.append(Math.cos(b), Math.sin(b), -Math.sin(a), Math.cos(a), 0, 0);
        return this;
    };
    b.scale = function (a, b) {
        this.a *= a;
        this.d *= b;
        this.tx *= a;
        this.ty *= b;
        return this;
    };
    b.translate = function (a, b) {
        this.tx += a;
        this.ty += b;
        return this;
    };
    b.identity = function () {
        this.alpha = this.a = this.d = 1;
        this.b = this.c = this.tx = this.ty = 0;
        this.shadow = this.compositeOperation = null;
        return this;
    };
    b.invert = function () {
        var a = this.a,
            b = this.b,
            g = this.c,
            d = this.d,
            c = this.tx,
            f = a * d - b * g;
        this.a = d / f;
        this.b = -b / f;
        this.c = -g / f;
        this.d = a / f;
        this.tx = (g * this.ty - d * c) / f;
        this.ty = -(a * this.ty - b * c) / f;
        return this;
    };
    b.isIdentity = function () {
        return (
            0 == this.tx &&
            0 == this.ty &&
            1 == this.a &&
            0 == this.b &&
            0 == this.c &&
            1 == this.d
        );
    };
    b.decompose = function (a) {
        null == a && (a = {});
        a.x = this.tx;
        a.y = this.ty;
        a.scaleX = Math.sqrt(this.a * this.a + this.b * this.b);
        a.scaleY = Math.sqrt(this.c * this.c + this.d * this.d);
        var b = Math.atan2(-this.c, this.d),
            g = Math.atan2(this.b, this.a);
        b == g
            ? ((a.rotation = g / c.DEG_TO_RAD),
              0 > this.a &&
                  0 <= this.d &&
                  (a.rotation += 0 >= a.rotation ? 180 : -180),
              (a.skewX = a.skewY = 0))
            : ((a.skewX = b / c.DEG_TO_RAD), (a.skewY = g / c.DEG_TO_RAD));
        return a;
    };
    b.reinitialize = function (a, b, g, d, c, f, h, j, k) {
        this.initialize(a, b, g, d, c, f);
        this.alpha = h || 1;
        this.shadow = j;
        this.compositeOperation = k;
        return this;
    };
    b.appendProperties = function (a, b, g) {
        this.alpha *= a;
        this.shadow = b || this.shadow;
        this.compositeOperation = g || this.compositeOperation;
        return this;
    };
    b.prependProperties = function (a, b, g) {
        this.alpha *= a;
        this.shadow = this.shadow || b;
        this.compositeOperation = this.compositeOperation || g;
        return this;
    };
    b.clone = function () {
        var a = new c(this.a, this.b, this.c, this.d, this.tx, this.ty);
        a.shadow = this.shadow;
        a.alpha = this.alpha;
        a.compositeOperation = this.compositeOperation;
        return a;
    };
    b.toString = function () {
        return (
            '[Matrix2D (a=' +
            this.a +
            ' b=' +
            this.b +
            ' c=' +
            this.c +
            ' d=' +
            this.d +
            ' tx=' +
            this.tx +
            ' ty=' +
            this.ty +
            ')]'
        );
    };
    c.identity = new c(1, 0, 0, 1, 0, 0);
    createjs.Matrix2D = c;
})();
this.createjs = this.createjs || {};
(function () {
    var c = function (a, b) {
            this.initialize(a, b);
        },
        b = c.prototype;
    b.x = 0;
    b.y = 0;
    b.initialize = function (a, b) {
        this.x = null == a ? 0 : a;
        this.y = null == b ? 0 : b;
    };
    b.clone = function () {
        return new c(this.x, this.y);
    };
    b.toString = function () {
        return '[Point (x=' + this.x + ' y=' + this.y + ')]';
    };
    createjs.Point = c;
})();
this.createjs = this.createjs || {};
(function () {
    var c = function (a, b, g, d) {
            this.initialize(a, b, g, d);
        },
        b = c.prototype;
    b.x = 0;
    b.y = 0;
    b.width = 0;
    b.height = 0;
    b.initialize = function (a, b, g, d) {
        this.x = null == a ? 0 : a;
        this.y = null == b ? 0 : b;
        this.width = null == g ? 0 : g;
        this.height = null == d ? 0 : d;
    };
    b.clone = function () {
        return new c(this.x, this.y, this.width, this.height);
    };
    b.toString = function () {
        return (
            '[Rectangle (x=' +
            this.x +
            ' y=' +
            this.y +
            ' width=' +
            this.width +
            ' height=' +
            this.height +
            ')]'
        );
    };
    createjs.Rectangle = c;
})();
this.createjs = this.createjs || {};
(function () {
    var c = function (a, b, g, d, c, f, h) {
            this.initialize(a, b, g, d, c, f, h);
        },
        b = c.prototype;
    b.target = null;
    b.overLabel = null;
    b.outLabel = null;
    b.downLabel = null;
    b.play = !1;
    b._isPressed = !1;
    b._isOver = !1;
    b.initialize = function (a, b, g, d, c, f, h) {
        a.addEventListener &&
            ((this.target = a),
            (a.cursor = 'pointer'),
            (this.overLabel = null == g ? 'over' : g),
            (this.outLabel = null == b ? 'out' : b),
            (this.downLabel = null == d ? 'down' : d),
            (this.play = c),
            this.setEnabled(!0),
            this.handleEvent({}),
            f &&
                (h &&
                    ((f.actionsEnabled = !1),
                    f.gotoAndStop && f.gotoAndStop(h)),
                (a.hitArea = f)));
    };
    b.setEnabled = function (a) {
        var b = this.target;
        a
            ? (b.addEventListener('mouseover', this),
              b.addEventListener('mouseout', this),
              b.addEventListener('mousedown', this))
            : (b.removeEventListener('mouseover', this),
              b.removeEventListener('mouseout', this),
              b.removeEventListener('mousedown', this));
    };
    b.toString = function () {
        return '[ButtonHelper]';
    };
    b.handleEvent = function (a) {
        var b = this.target,
            g = a.type;
        'mousedown' == g
            ? (a.addEventListener('mouseup', this),
              (this._isPressed = !0),
              (a = this.downLabel))
            : 'mouseup' == g
            ? ((this._isPressed = !1),
              (a = this._isOver ? this.overLabel : this.outLabel))
            : 'mouseover' == g
            ? ((this._isOver = !0),
              (a = this._isPressed ? this.downLabel : this.overLabel))
            : ((this._isOver = !1),
              (a = this._isPressed ? this.overLabel : this.outLabel));
        this.play
            ? b.gotoAndPlay && b.gotoAndPlay(a)
            : b.gotoAndStop && b.gotoAndStop(a);
    };
    createjs.ButtonHelper = c;
})();
this.createjs = this.createjs || {};
(function () {
    var c = function (a, b, g, d) {
            this.initialize(a, b, g, d);
        },
        b = c.prototype;
    c.identity = null;
    b.color = null;
    b.offsetX = 0;
    b.offsetY = 0;
    b.blur = 0;
    b.initialize = function (a, b, g, d) {
        this.color = a;
        this.offsetX = b;
        this.offsetY = g;
        this.blur = d;
    };
    b.toString = function () {
        return '[Shadow]';
    };
    b.clone = function () {
        return new c(this.color, this.offsetX, this.offsetY, this.blur);
    };
    c.identity = new c('transparent', 0, 0, 0);
    createjs.Shadow = c;
})();
this.createjs = this.createjs || {};
(function () {
    var c = function (a) {
            this.initialize(a);
        },
        b = c.prototype;
    b.complete = !0;
    b.onComplete = null;
    b.addEventListener = null;
    b.removeEventListener = null;
    b.removeAllEventListeners = null;
    b.dispatchEvent = null;
    b.hasEventListener = null;
    b._listeners = null;
    createjs.EventDispatcher.initialize(b);
    b._animations = null;
    b._frames = null;
    b._images = null;
    b._data = null;
    b._loadCount = 0;
    b._frameHeight = 0;
    b._frameWidth = 0;
    b._numFrames = 0;
    b._regX = 0;
    b._regY = 0;
    b.initialize = function (a) {
        var b, g, d;
        if (null != a) {
            if (a.images && 0 < (g = a.images.length)) {
                d = this._images = [];
                for (b = 0; b < g; b++) {
                    var c = a.images[b];
                    if ('string' == typeof c) {
                        var f = c,
                            c = new Image();
                        c.src = f;
                    }
                    d.push(c);
                    !c.getContext &&
                        !c.complete &&
                        (this._loadCount++,
                        (this.complete = !1),
                        (function (a) {
                            c.onload = function () {
                                a._handleImageLoad();
                            };
                        })(this));
                }
            }
            if (null != a.frames)
                if (a.frames instanceof Array) {
                    this._frames = [];
                    d = a.frames;
                    b = 0;
                    for (g = d.length; b < g; b++)
                        (f = d[b]),
                            this._frames.push({
                                image: this._images[f[4] ? f[4] : 0],
                                rect: new createjs.Rectangle(
                                    f[0],
                                    f[1],
                                    f[2],
                                    f[3]
                                ),
                                regX: f[5] || 0,
                                regY: f[6] || 0
                            });
                } else
                    (g = a.frames),
                        (this._frameWidth = g.width),
                        (this._frameHeight = g.height),
                        (this._regX = g.regX || 0),
                        (this._regY = g.regY || 0),
                        (this._numFrames = g.count),
                        0 == this._loadCount && this._calculateFrames();
            if (null != (g = a.animations)) {
                this._animations = [];
                this._data = {};
                for (var h in g) {
                    a = { name: h };
                    f = g[h];
                    if ('number' == typeof f) d = a.frames = [f];
                    else if (f instanceof Array)
                        if (1 == f.length) a.frames = [f[0]];
                        else {
                            a.frequency = f[3];
                            a.next = f[2];
                            d = a.frames = [];
                            for (b = f[0]; b <= f[1]; b++) d.push(b);
                        }
                    else
                        (a.frequency = f.frequency),
                            (a.next = f.next),
                            (b = f.frames),
                            (d = a.frames =
                                'number' == typeof b ? [b] : b.slice(0));
                    a.next =
                        2 > d.length || !1 == a.next
                            ? null
                            : null == a.next || !0 == a.next
                            ? h
                            : a.next;
                    a.frequency || (a.frequency = 1);
                    this._animations.push(h);
                    this._data[h] = a;
                }
            }
        }
    };
    b.getNumFrames = function (a) {
        if (null == a)
            return this._frames ? this._frames.length : this._numFrames;
        a = this._data[a];
        return null == a ? 0 : a.frames.length;
    };
    b.getAnimations = function () {
        return this._animations.slice(0);
    };
    b.getAnimation = function (a) {
        return this._data[a];
    };
    b.getFrame = function (a) {
        var b;
        return this.complete && this._frames && (b = this._frames[a])
            ? b
            : null;
    };
    b.getFrameBounds = function (a) {
        return (a = this.getFrame(a))
            ? new createjs.Rectangle(
                  -a.regX,
                  -a.regY,
                  a.rect.width,
                  a.rect.height
              )
            : null;
    };
    b.toString = function () {
        return '[SpriteSheet]';
    };
    b.clone = function () {
        var a = new c();
        a.complete = this.complete;
        a._animations = this._animations;
        a._frames = this._frames;
        a._images = this._images;
        a._data = this._data;
        a._frameHeight = this._frameHeight;
        a._frameWidth = this._frameWidth;
        a._numFrames = this._numFrames;
        a._loadCount = this._loadCount;
        return a;
    };
    b._handleImageLoad = function () {
        0 == --this._loadCount &&
            (this._calculateFrames(),
            (this.complete = !0),
            this.onComplete && this.onComplete(),
            this.dispatchEvent('complete'));
    };
    b._calculateFrames = function () {
        if (!(this._frames || 0 == this._frameWidth)) {
            this._frames = [];
            for (
                var a = 0,
                    b = this._frameWidth,
                    g = this._frameHeight,
                    d = 0,
                    c = this._images;
                d < c.length;
                d++
            ) {
                for (
                    var f = c[d],
                        h = ((f.width + 1) / b) | 0,
                        j = ((f.height + 1) / g) | 0,
                        j =
                            0 < this._numFrames
                                ? Math.min(this._numFrames - a, h * j)
                                : h * j,
                        k = 0;
                    k < j;
                    k++
                )
                    this._frames.push({
                        image: f,
                        rect: new createjs.Rectangle(
                            (k % h) * b,
                            ((k / h) | 0) * g,
                            b,
                            g
                        ),
                        regX: this._regX,
                        regY: this._regY
                    });
                a += j;
            }
            this._numFrames = a;
        }
    };
    createjs.SpriteSheet = c;
})();
this.createjs = this.createjs || {};
(function () {
    function c(a, b, d) {
        this.f = a;
        this.params = b;
        this.path = null == d ? !0 : d;
    }
    c.prototype.exec = function (a) {
        this.f.apply(a, this.params);
    };
    var b = function () {
            this.initialize();
        },
        a = b.prototype;
    b.getRGB = function (a, b, d, c) {
        null != a &&
            null == d &&
            ((c = b),
            (d = a & 255),
            (b = (a >> 8) & 255),
            (a = (a >> 16) & 255));
        return null == c
            ? 'rgb(' + a + ',' + b + ',' + d + ')'
            : 'rgba(' + a + ',' + b + ',' + d + ',' + c + ')';
    };
    b.getHSL = function (a, b, d, c) {
        return null == c
            ? 'hsl(' + (a % 360) + ',' + b + '%,' + d + '%)'
            : 'hsla(' + (a % 360) + ',' + b + '%,' + d + '%,' + c + ')';
    };
    b.BASE_64 = {
        A: 0,
        B: 1,
        C: 2,
        D: 3,
        E: 4,
        F: 5,
        G: 6,
        H: 7,
        I: 8,
        J: 9,
        K: 10,
        L: 11,
        M: 12,
        N: 13,
        O: 14,
        P: 15,
        Q: 16,
        R: 17,
        S: 18,
        T: 19,
        U: 20,
        V: 21,
        W: 22,
        X: 23,
        Y: 24,
        Z: 25,
        a: 26,
        b: 27,
        c: 28,
        d: 29,
        e: 30,
        f: 31,
        g: 32,
        h: 33,
        i: 34,
        j: 35,
        k: 36,
        l: 37,
        m: 38,
        n: 39,
        o: 40,
        p: 41,
        q: 42,
        r: 43,
        s: 44,
        t: 45,
        u: 46,
        v: 47,
        w: 48,
        x: 49,
        y: 50,
        z: 51,
        0: 52,
        1: 53,
        2: 54,
        3: 55,
        4: 56,
        5: 57,
        6: 58,
        7: 59,
        8: 60,
        9: 61,
        '+': 62,
        '/': 63
    };
    b.STROKE_CAPS_MAP = ['butt', 'round', 'square'];
    b.STROKE_JOINTS_MAP = ['miter', 'round', 'bevel'];
    b._ctx = (createjs.createCanvas
        ? createjs.createCanvas()
        : document.createElement('canvas')
    ).getContext('2d');
    b.beginCmd = new c(b._ctx.beginPath, [], !1);
    b.fillCmd = new c(b._ctx.fill, [], !1);
    b.strokeCmd = new c(b._ctx.stroke, [], !1);
    a._strokeInstructions = null;
    a._strokeStyleInstructions = null;
    a._ignoreScaleStroke = !1;
    a._fillInstructions = null;
    a._instructions = null;
    a._oldInstructions = null;
    a._activeInstructions = null;
    a._active = !1;
    a._dirty = !1;
    a.initialize = function () {
        this.clear();
        this._ctx = b._ctx;
    };
    a.isEmpty = function () {
        return !(
            this._instructions.length ||
            this._oldInstructions.length ||
            this._activeInstructions.length
        );
    };
    a.draw = function (a) {
        this._dirty && this._updateInstructions();
        for (var b = this._instructions, d = 0, c = b.length; d < c; d++)
            b[d].exec(a);
    };
    a.drawAsPath = function (a) {
        this._dirty && this._updateInstructions();
        for (var b, d = this._instructions, c = 0, f = d.length; c < f; c++)
            ((b = d[c]).path || 0 == c) && b.exec(a);
    };
    a.moveTo = function (a, b) {
        this._activeInstructions.push(new c(this._ctx.moveTo, [a, b]));
        return this;
    };
    a.lineTo = function (a, b) {
        this._dirty = this._active = !0;
        this._activeInstructions.push(new c(this._ctx.lineTo, [a, b]));
        return this;
    };
    a.arcTo = function (a, b, d, e, f) {
        this._dirty = this._active = !0;
        this._activeInstructions.push(new c(this._ctx.arcTo, [a, b, d, e, f]));
        return this;
    };
    a.arc = function (a, b, d, e, f, h) {
        this._dirty = this._active = !0;
        null == h && (h = !1);
        this._activeInstructions.push(new c(this._ctx.arc, [a, b, d, e, f, h]));
        return this;
    };
    a.quadraticCurveTo = function (a, b, d, e) {
        this._dirty = this._active = !0;
        this._activeInstructions.push(
            new c(this._ctx.quadraticCurveTo, [a, b, d, e])
        );
        return this;
    };
    a.bezierCurveTo = function (a, b, d, e, f, h) {
        this._dirty = this._active = !0;
        this._activeInstructions.push(
            new c(this._ctx.bezierCurveTo, [a, b, d, e, f, h])
        );
        return this;
    };
    a.rect = function (a, b, d, e) {
        this._dirty = this._active = !0;
        this._activeInstructions.push(new c(this._ctx.rect, [a, b, d, e]));
        return this;
    };
    a.closePath = function () {
        this._active &&
            ((this._dirty = !0),
            this._activeInstructions.push(new c(this._ctx.closePath, [])));
        return this;
    };
    a.clear = function () {
        this._instructions = [];
        this._oldInstructions = [];
        this._activeInstructions = [];
        this._strokeStyleInstructions = this._strokeInstructions = this._fillInstructions = null;
        this._active = this._dirty = !1;
        return this;
    };
    a.beginFill = function (a) {
        this._active && this._newPath();
        this._fillInstructions = a
            ? [new c(this._setProp, ['fillStyle', a], !1), b.fillCmd]
            : null;
        return this;
    };
    a.beginLinearGradientFill = function (a, g, d, e, f, h) {
        this._active && this._newPath();
        d = this._ctx.createLinearGradient(d, e, f, h);
        e = 0;
        for (f = a.length; e < f; e++) d.addColorStop(g[e], a[e]);
        this._fillInstructions = [
            new c(this._setProp, ['fillStyle', d], !1),
            b.fillCmd
        ];
        return this;
    };
    a.beginRadialGradientFill = function (a, g, d, e, f, h, j, k) {
        this._active && this._newPath();
        d = this._ctx.createRadialGradient(d, e, f, h, j, k);
        e = 0;
        for (f = a.length; e < f; e++) d.addColorStop(g[e], a[e]);
        this._fillInstructions = [
            new c(this._setProp, ['fillStyle', d], !1),
            b.fillCmd
        ];
        return this;
    };
    a.beginBitmapFill = function (a, g, d) {
        this._active && this._newPath();
        a = this._ctx.createPattern(a, g || '');
        a = new c(this._setProp, ['fillStyle', a], !1);
        this._fillInstructions = d
            ? [
                  a,
                  new c(this._ctx.save, [], !1),
                  new c(
                      this._ctx.transform,
                      [d.a, d.b, d.c, d.d, d.tx, d.ty],
                      !1
                  ),
                  b.fillCmd,
                  new c(this._ctx.restore, [], !1)
              ]
            : [a, b.fillCmd];
        return this;
    };
    a.endFill = function () {
        return this.beginFill();
    };
    a.setStrokeStyle = function (a, g, d, e, f) {
        this._active && this._newPath();
        this._strokeStyleInstructions = [
            new c(this._setProp, ['lineWidth', null == a ? '1' : a], !1),
            new c(
                this._setProp,
                [
                    'lineCap',
                    null == g ? 'butt' : isNaN(g) ? g : b.STROKE_CAPS_MAP[g]
                ],
                !1
            ),
            new c(
                this._setProp,
                [
                    'lineJoin',
                    null == d ? 'miter' : isNaN(d) ? d : b.STROKE_JOINTS_MAP[d]
                ],
                !1
            ),
            new c(this._setProp, ['miterLimit', null == e ? '10' : e], !1)
        ];
        this._ignoreScaleStroke = f;
        return this;
    };
    a.beginStroke = function (a) {
        this._active && this._newPath();
        this._strokeInstructions = a
            ? [new c(this._setProp, ['strokeStyle', a], !1)]
            : null;
        return this;
    };
    a.beginLinearGradientStroke = function (a, b, d, e, f, h) {
        this._active && this._newPath();
        d = this._ctx.createLinearGradient(d, e, f, h);
        e = 0;
        for (f = a.length; e < f; e++) d.addColorStop(b[e], a[e]);
        this._strokeInstructions = [
            new c(this._setProp, ['strokeStyle', d], !1)
        ];
        return this;
    };
    a.beginRadialGradientStroke = function (a, b, d, e, f, h, j, k) {
        this._active && this._newPath();
        d = this._ctx.createRadialGradient(d, e, f, h, j, k);
        e = 0;
        for (f = a.length; e < f; e++) d.addColorStop(b[e], a[e]);
        this._strokeInstructions = [
            new c(this._setProp, ['strokeStyle', d], !1)
        ];
        return this;
    };
    a.beginBitmapStroke = function (a, b) {
        this._active && this._newPath();
        var d = this._ctx.createPattern(a, b || '');
        this._strokeInstructions = [
            new c(this._setProp, ['strokeStyle', d], !1)
        ];
        return this;
    };
    a.endStroke = function () {
        this.beginStroke();
        return this;
    };
    a.curveTo = a.quadraticCurveTo;
    a.drawRect = a.rect;
    a.drawRoundRect = function (a, b, d, c, f) {
        this.drawRoundRectComplex(a, b, d, c, f, f, f, f);
        return this;
    };
    a.drawRoundRectComplex = function (a, b, d, e, f, h, j, k) {
        var l = (d < e ? d : e) / 2,
            n = 0,
            p = 0,
            q = 0,
            s = 0;
        0 > f && (f *= n = -1);
        f > l && (f = l);
        0 > h && (h *= p = -1);
        h > l && (h = l);
        0 > j && (j *= q = -1);
        j > l && (j = l);
        0 > k && (k *= s = -1);
        k > l && (k = l);
        this._dirty = this._active = !0;
        var l = this._ctx.arcTo,
            r = this._ctx.lineTo;
        this._activeInstructions.push(
            new c(this._ctx.moveTo, [a + d - h, b]),
            new c(l, [a + d + h * p, b - h * p, a + d, b + h, h]),
            new c(r, [a + d, b + e - j]),
            new c(l, [a + d + j * q, b + e + j * q, a + d - j, b + e, j]),
            new c(r, [a + k, b + e]),
            new c(l, [a - k * s, b + e + k * s, a, b + e - k, k]),
            new c(r, [a, b + f]),
            new c(l, [a - f * n, b - f * n, a + f, b, f]),
            new c(this._ctx.closePath)
        );
        return this;
    };
    a.drawCircle = function (a, b, d) {
        this.arc(a, b, d, 0, 2 * Math.PI);
        return this;
    };
    a.drawEllipse = function (a, b, d, e) {
        this._dirty = this._active = !0;
        var f = 0.5522848 * (d / 2),
            h = 0.5522848 * (e / 2),
            j = a + d,
            k = b + e;
        d = a + d / 2;
        e = b + e / 2;
        this._activeInstructions.push(
            new c(this._ctx.moveTo, [a, e]),
            new c(this._ctx.bezierCurveTo, [a, e - h, d - f, b, d, b]),
            new c(this._ctx.bezierCurveTo, [d + f, b, j, e - h, j, e]),
            new c(this._ctx.bezierCurveTo, [j, e + h, d + f, k, d, k]),
            new c(this._ctx.bezierCurveTo, [d - f, k, a, e + h, a, e])
        );
        return this;
    };
    a.drawPolyStar = function (a, b, d, e, f, h) {
        this._dirty = this._active = !0;
        null == f && (f = 0);
        f = 1 - f;
        h = null == h ? 0 : h / (180 / Math.PI);
        var j = Math.PI / e;
        this._activeInstructions.push(
            new c(this._ctx.moveTo, [a + Math.cos(h) * d, b + Math.sin(h) * d])
        );
        for (var k = 0; k < e; k++)
            (h += j),
                1 != f &&
                    this._activeInstructions.push(
                        new c(this._ctx.lineTo, [
                            a + Math.cos(h) * d * f,
                            b + Math.sin(h) * d * f
                        ])
                    ),
                (h += j),
                this._activeInstructions.push(
                    new c(this._ctx.lineTo, [
                        a + Math.cos(h) * d,
                        b + Math.sin(h) * d
                    ])
                );
        return this;
    };
    a.decodePath = function (a) {
        for (
            var g = [
                    this.moveTo,
                    this.lineTo,
                    this.quadraticCurveTo,
                    this.bezierCurveTo,
                    this.closePath
                ],
                d = [2, 2, 4, 6, 0],
                c = 0,
                f = a.length,
                h = [],
                j = 0,
                k = 0,
                l = b.BASE_64;
            c < f;

        ) {
            var n = a.charAt(c),
                p = l[n],
                q = p >> 3,
                s = g[q];
            if (!s || p & 3) throw 'bad path data (@' + c + '): ' + n;
            n = d[q];
            q || (j = k = 0);
            h.length = 0;
            c++;
            p = ((p >> 2) & 1) + 2;
            for (q = 0; q < n; q++) {
                var r = l[a.charAt(c)],
                    u = r >> 5 ? -1 : 1,
                    r = ((r & 31) << 6) | l[a.charAt(c + 1)];
                3 == p && (r = (r << 6) | l[a.charAt(c + 2)]);
                r = (u * r) / 10;
                q % 2 ? (j = r += j) : (k = r += k);
                h[q] = r;
                c += p;
            }
            s.apply(this, h);
        }
        return this;
    };
    a.clone = function () {
        var a = new b();
        a._instructions = this._instructions.slice();
        a._activeInstructions = this._activeInstructions.slice();
        a._oldInstructions = this._oldInstructions.slice();
        this._fillInstructions &&
            (a._fillInstructions = this._fillInstructions.slice());
        this._strokeInstructions &&
            (a._strokeInstructions = this._strokeInstructions.slice());
        this._strokeStyleInstructions &&
            (a._strokeStyleInstructions = this._strokeStyleInstructions.slice());
        a._active = this._active;
        a._dirty = this._dirty;
        return a;
    };
    a.toString = function () {
        return '[Graphics]';
    };
    a.mt = a.moveTo;
    a.lt = a.lineTo;
    a.at = a.arcTo;
    a.bt = a.bezierCurveTo;
    a.qt = a.quadraticCurveTo;
    a.a = a.arc;
    a.r = a.rect;
    a.cp = a.closePath;
    a.c = a.clear;
    a.f = a.beginFill;
    a.lf = a.beginLinearGradientFill;
    a.rf = a.beginRadialGradientFill;
    a.bf = a.beginBitmapFill;
    a.ef = a.endFill;
    a.ss = a.setStrokeStyle;
    a.s = a.beginStroke;
    a.ls = a.beginLinearGradientStroke;
    a.rs = a.beginRadialGradientStroke;
    a.bs = a.beginBitmapStroke;
    a.es = a.endStroke;
    a.dr = a.drawRect;
    a.rr = a.drawRoundRect;
    a.rc = a.drawRoundRectComplex;
    a.dc = a.drawCircle;
    a.de = a.drawEllipse;
    a.dp = a.drawPolyStar;
    a.p = a.decodePath;
    a._updateInstructions = function () {
        this._instructions = this._oldInstructions.slice();
        this._instructions.push(b.beginCmd);
        this._instructions.push.apply(
            this._instructions,
            this._activeInstructions
        );
        this._fillInstructions &&
            this._instructions.push.apply(
                this._instructions,
                this._fillInstructions
            );
        this._strokeInstructions &&
            (this._strokeStyleInstructions &&
                this._instructions.push.apply(
                    this._instructions,
                    this._strokeStyleInstructions
                ),
            this._instructions.push.apply(
                this._instructions,
                this._strokeInstructions
            ),
            this._ignoreScaleStroke
                ? this._instructions.push(
                      new c(this._ctx.save, [], !1),
                      new c(this._ctx.setTransform, [1, 0, 0, 1, 0, 0], !1),
                      b.strokeCmd,
                      new c(this._ctx.restore, [], !1)
                  )
                : this._instructions.push(b.strokeCmd));
    };
    a._newPath = function () {
        this._dirty && this._updateInstructions();
        this._oldInstructions = this._instructions;
        this._activeInstructions = [];
        this._active = this._dirty = !1;
    };
    a._setProp = function (a, b) {
        this[a] = b;
    };
    createjs.Graphics = b;
})();
this.createjs = this.createjs || {};
(function () {
    var c = function () {
            this.initialize();
        },
        b = c.prototype;
    c.suppressCrossDomainErrors = !1;
    c._hitTestCanvas = createjs.createCanvas
        ? createjs.createCanvas()
        : document.createElement('canvas');
    c._hitTestCanvas.width = c._hitTestCanvas.height = 1;
    c._hitTestContext = c._hitTestCanvas.getContext('2d');
    c._nextCacheID = 1;
    b.alpha = 1;
    b.cacheCanvas = null;
    b.id = -1;
    b.mouseEnabled = !0;
    b.name = null;
    b.parent = null;
    b.regX = 0;
    b.regY = 0;
    b.rotation = 0;
    b.scaleX = 1;
    b.scaleY = 1;
    b.skewX = 0;
    b.skewY = 0;
    b.shadow = null;
    b.visible = !0;
    b.x = 0;
    b.y = 0;
    b.compositeOperation = null;
    b.snapToPixel = !1;
    b.onPress = null;
    b.onClick = null;
    b.onDoubleClick = null;
    b.onMouseOver = null;
    b.onMouseOut = null;
    b.onTick = null;
    b.filters = null;
    b.cacheID = 0;
    b.mask = null;
    b.hitArea = null;
    b.cursor = null;
    b.addEventListener = null;
    b.removeEventListener = null;
    b.removeAllEventListeners = null;
    b.dispatchEvent = null;
    b.hasEventListener = null;
    b._listeners = null;
    createjs.EventDispatcher.initialize(b);
    b._cacheOffsetX = 0;
    b._cacheOffsetY = 0;
    b._cacheScale = 1;
    b._cacheDataURLID = 0;
    b._cacheDataURL = null;
    b._matrix = null;
    b.initialize = function () {
        this.id = createjs.UID.get();
        this._matrix = new createjs.Matrix2D();
    };
    b.isVisible = function () {
        return !(
            !this.visible ||
            !(0 < this.alpha && 0 != this.scaleX && 0 != this.scaleY)
        );
    };
    b.draw = function (a, b) {
        var c = this.cacheCanvas;
        if (b || !c) return !1;
        var d = this._cacheScale;
        a.drawImage(
            c,
            this._cacheOffsetX,
            this._cacheOffsetY,
            c.width / d,
            c.height / d
        );
        return !0;
    };
    b.updateContext = function (a) {
        var b,
            c = this.mask;
        c &&
            c.graphics &&
            !c.graphics.isEmpty() &&
            ((b = c.getMatrix(c._matrix)),
            a.transform(b.a, b.b, b.c, b.d, b.tx, b.ty),
            c.graphics.drawAsPath(a),
            a.clip(),
            b.invert(),
            a.transform(b.a, b.b, b.c, b.d, b.tx, b.ty));
        b = this._matrix
            .identity()
            .appendTransform(
                this.x,
                this.y,
                this.scaleX,
                this.scaleY,
                this.rotation,
                this.skewX,
                this.skewY,
                this.regX,
                this.regY
            );
        createjs.Stage._snapToPixelEnabled && this.snapToPixel
            ? a.transform(
                  b.a,
                  b.b,
                  b.c,
                  b.d,
                  (b.tx + 0.5) | 0,
                  (b.ty + 0.5) | 0
              )
            : a.transform(b.a, b.b, b.c, b.d, b.tx, b.ty);
        a.globalAlpha *= this.alpha;
        this.compositeOperation &&
            (a.globalCompositeOperation = this.compositeOperation);
        this.shadow && this._applyShadow(a, this.shadow);
    };
    b.cache = function (a, b, c, d, e) {
        e = e || 1;
        this.cacheCanvas ||
            (this.cacheCanvas = createjs.createCanvas
                ? createjs.createCanvas()
                : document.createElement('canvas'));
        this.cacheCanvas.width = Math.ceil(c * e);
        this.cacheCanvas.height = Math.ceil(d * e);
        this._cacheOffsetX = a;
        this._cacheOffsetY = b;
        this._cacheScale = e || 1;
        this.updateCache();
    };
    b.updateCache = function (a) {
        var b = this.cacheCanvas,
            g = this._cacheScale,
            d = this._cacheOffsetX * g,
            e = this._cacheOffsetY * g;
        if (!b) throw 'cache() must be called before updateCache()';
        var f = b.getContext('2d');
        f.save();
        a || f.clearRect(0, 0, b.width, b.height);
        f.globalCompositeOperation = a;
        f.setTransform(g, 0, 0, g, -d, -e);
        this.draw(f, !0);
        this._applyFilters();
        f.restore();
        this.cacheID = c._nextCacheID++;
    };
    b.uncache = function () {
        this._cacheDataURL = this.cacheCanvas = null;
        this.cacheID = this._cacheOffsetX = this._cacheOffsetY = 0;
        this._cacheScale = 1;
    };
    b.getCacheDataURL = function () {
        if (!this.cacheCanvas) return null;
        this.cacheID != this._cacheDataURLID &&
            (this._cacheDataURL = this.cacheCanvas.toDataURL());
        return this._cacheDataURL;
    };
    b.getStage = function () {
        for (var a = this; a.parent; ) a = a.parent;
        return a instanceof createjs.Stage ? a : null;
    };
    b.localToGlobal = function (a, b) {
        var c = this.getConcatenatedMatrix(this._matrix);
        if (null == c) return null;
        c.append(1, 0, 0, 1, a, b);
        return new createjs.Point(c.tx, c.ty);
    };
    b.globalToLocal = function (a, b) {
        var c = this.getConcatenatedMatrix(this._matrix);
        if (null == c) return null;
        c.invert();
        c.append(1, 0, 0, 1, a, b);
        return new createjs.Point(c.tx, c.ty);
    };
    b.localToLocal = function (a, b, c) {
        a = this.localToGlobal(a, b);
        return c.globalToLocal(a.x, a.y);
    };
    b.setTransform = function (a, b, c, d, e, f, h, j, k) {
        this.x = a || 0;
        this.y = b || 0;
        this.scaleX = null == c ? 1 : c;
        this.scaleY = null == d ? 1 : d;
        this.rotation = e || 0;
        this.skewX = f || 0;
        this.skewY = h || 0;
        this.regX = j || 0;
        this.regY = k || 0;
        return this;
    };
    b.getMatrix = function (a) {
        return (a ? a.identity() : new createjs.Matrix2D())
            .appendTransform(
                this.x,
                this.y,
                this.scaleX,
                this.scaleY,
                this.rotation,
                this.skewX,
                this.skewY,
                this.regX,
                this.regY
            )
            .appendProperties(this.alpha, this.shadow, this.compositeOperation);
    };
    b.getConcatenatedMatrix = function (a) {
        a ? a.identity() : (a = new createjs.Matrix2D());
        for (var b = this; null != b; )
            a
                .prependTransform(
                    b.x,
                    b.y,
                    b.scaleX,
                    b.scaleY,
                    b.rotation,
                    b.skewX,
                    b.skewY,
                    b.regX,
                    b.regY
                )
                .prependProperties(b.alpha, b.shadow, b.compositeOperation),
                (b = b.parent);
        return a;
    };
    b.hitTest = function (a, b) {
        var g = c._hitTestContext,
            d = c._hitTestCanvas;
        g.setTransform(1, 0, 0, 1, -a, -b);
        this.draw(g);
        g = this._testHit(g);
        d.width = 0;
        d.width = 1;
        return g;
    };
    b.set = function (a) {
        for (var b in a) this[b] = a[b];
        return this;
    };
    b.clone = function () {
        var a = new c();
        this.cloneProps(a);
        return a;
    };
    b.toString = function () {
        return '[DisplayObject (name=' + this.name + ')]';
    };
    b.cloneProps = function (a) {
        a.alpha = this.alpha;
        a.name = this.name;
        a.regX = this.regX;
        a.regY = this.regY;
        a.rotation = this.rotation;
        a.scaleX = this.scaleX;
        a.scaleY = this.scaleY;
        a.shadow = this.shadow;
        a.skewX = this.skewX;
        a.skewY = this.skewY;
        a.visible = this.visible;
        a.x = this.x;
        a.y = this.y;
        a.mouseEnabled = this.mouseEnabled;
        a.compositeOperation = this.compositeOperation;
        this.cacheCanvas &&
            ((a.cacheCanvas = this.cacheCanvas.cloneNode(!0)),
            a.cacheCanvas
                .getContext('2d')
                .putImageData(
                    this.cacheCanvas
                        .getContext('2d')
                        .getImageData(
                            0,
                            0,
                            this.cacheCanvas.width,
                            this.cacheCanvas.height
                        ),
                    0,
                    0
                ));
    };
    b._applyShadow = function (a, b) {
        b = b || Shadow.identity;
        a.shadowColor = b.color;
        a.shadowOffsetX = b.offsetX;
        a.shadowOffsetY = b.offsetY;
        a.shadowBlur = b.blur;
    };
    b._tick = function (a) {
        this.onTick && this.onTick.apply(this, a);
        var b = this._listeners;
        b && b.tick && this.dispatchEvent({ type: 'tick', params: a });
    };
    b._testHit = function (a) {
        try {
            var b = 1 < a.getImageData(0, 0, 1, 1).data[3];
        } catch (g) {}
        return b;
    };
    b._applyFilters = function () {
        if (this.filters && 0 != this.filters.length && this.cacheCanvas)
            for (
                var a = this.filters.length,
                    b = this.cacheCanvas.getContext('2d'),
                    c = this.cacheCanvas.width,
                    d = this.cacheCanvas.height,
                    e = 0;
                e < a;
                e++
            )
                this.filters[e].applyFilter(b, 0, 0, c, d);
    };
    b._hasMouseHandler = function (a) {
        var b = this._listeners;
        return !!(
            (a & 1 &&
                (this.onPress ||
                    this.onClick ||
                    this.onDoubleClick ||
                    (b &&
                        (this.hasEventListener('mousedown') ||
                            this.hasEventListener('click') ||
                            this.hasEventListener('dblclick'))))) ||
            (a & 2 &&
                (this.onMouseOver ||
                    this.onMouseOut ||
                    this.cursor ||
                    (b &&
                        (this.hasEventListener('mouseover') ||
                            this.hasEventListener('mouseout')))))
        );
    };
    createjs.DisplayObject = c;
})();
this.createjs = this.createjs || {};
(function () {
    var c = function () {
            this.initialize();
        },
        b = (c.prototype = new createjs.DisplayObject());
    b.children = null;
    b.DisplayObject_initialize = b.initialize;
    b.initialize = function () {
        this.DisplayObject_initialize();
        this.children = [];
    };
    b.isVisible = function () {
        var a = this.cacheCanvas || this.children.length;
        return !(
            !this.visible ||
            !(0 < this.alpha && 0 != this.scaleX && 0 != this.scaleY && a)
        );
    };
    b.DisplayObject_draw = b.draw;
    b.draw = function (a, b) {
        if (this.DisplayObject_draw(a, b)) return !0;
        for (var c = this.children.slice(0), d = 0, e = c.length; d < e; d++) {
            var f = c[d];
            f.isVisible() &&
                (a.save(), f.updateContext(a), f.draw(a), a.restore());
        }
        return !0;
    };
    b.addChild = function (a) {
        if (null == a) return a;
        var b = arguments.length;
        if (1 < b) {
            for (var c = 0; c < b; c++) this.addChild(arguments[c]);
            return arguments[b - 1];
        }
        a.parent && a.parent.removeChild(a);
        a.parent = this;
        this.children.push(a);
        return a;
    };
    b.addChildAt = function (a, b) {
        var c = arguments.length,
            d = arguments[c - 1];
        if (0 > d || d > this.children.length) return arguments[c - 2];
        if (2 < c) {
            for (var e = 0; e < c - 1; e++)
                this.addChildAt(arguments[e], d + e);
            return arguments[c - 2];
        }
        a.parent && a.parent.removeChild(a);
        a.parent = this;
        this.children.splice(b, 0, a);
        return a;
    };
    b.removeChild = function (a) {
        var b = arguments.length;
        if (1 < b) {
            for (var c = !0, d = 0; d < b; d++)
                c = c && this.removeChild(arguments[d]);
            return c;
        }
        return this.removeChildAt(this.children.indexOf(a));
    };
    b.removeChildAt = function (a) {
        var b = arguments.length;
        if (1 < b) {
            for (var c = [], d = 0; d < b; d++) c[d] = arguments[d];
            c.sort(function (a, b) {
                return b - a;
            });
            for (var e = !0, d = 0; d < b; d++)
                e = e && this.removeChildAt(c[d]);
            return e;
        }
        if (0 > a || a > this.children.length - 1) return !1;
        if ((b = this.children[a])) b.parent = null;
        this.children.splice(a, 1);
        return !0;
    };
    b.removeAllChildren = function () {
        for (var a = this.children; a.length; ) a.pop().parent = null;
    };
    b.getChildAt = function (a) {
        return this.children[a];
    };
    b.getChildByName = function (a) {
        for (var b = this.children, c = 0, d = b.length; c < d; c++)
            if (b[c].name == a) return b[c];
        return null;
    };
    b.sortChildren = function (a) {
        this.children.sort(a);
    };
    b.getChildIndex = function (a) {
        return this.children.indexOf(a);
    };
    b.getNumChildren = function () {
        return this.children.length;
    };
    b.swapChildrenAt = function (a, b) {
        var c = this.children,
            d = c[a],
            e = c[b];
        d && e && ((c[a] = e), (c[b] = d));
    };
    b.swapChildren = function (a, b) {
        for (
            var c = this.children, d, e, f = 0, h = c.length;
            f < h &&
            !(c[f] == a && (d = f),
            c[f] == b && (e = f),
            null != d && null != e);
            f++
        );
        f != h && ((c[d] = b), (c[e] = a));
    };
    b.setChildIndex = function (a, b) {
        var c = this.children,
            d = c.length;
        if (!(a.parent != this || 0 > b || b >= d)) {
            for (var e = 0; e < d && c[e] != a; e++);
            e == d ||
                e == b ||
                (c.splice(e, 1), b < e && b--, c.splice(b, 0, a));
        }
    };
    b.contains = function (a) {
        for (; a; ) {
            if (a == this) return !0;
            a = a.parent;
        }
        return !1;
    };
    b.hitTest = function (a, b) {
        return null != this.getObjectUnderPoint(a, b);
    };
    b.getObjectsUnderPoint = function (a, b) {
        var c = [],
            d = this.localToGlobal(a, b);
        this._getObjectsUnderPoint(d.x, d.y, c);
        return c;
    };
    b.getObjectUnderPoint = function (a, b) {
        var c = this.localToGlobal(a, b);
        return this._getObjectsUnderPoint(c.x, c.y);
    };
    b.clone = function (a) {
        var b = new c();
        this.cloneProps(b);
        if (a)
            for (
                var g = (b.children = []), d = 0, e = this.children.length;
                d < e;
                d++
            ) {
                var f = this.children[d].clone(a);
                f.parent = b;
                g.push(f);
            }
        return b;
    };
    b.toString = function () {
        return '[Container (name=' + this.name + ')]';
    };
    b.DisplayObject__tick = b._tick;
    b._tick = function (a) {
        for (var b = this.children.length - 1; 0 <= b; b--) {
            var c = this.children[b];
            c._tick && c._tick(a);
        }
        this.DisplayObject__tick(a);
    };
    b._getObjectsUnderPoint = function (a, b, g, d) {
        var e = createjs.DisplayObject._hitTestContext,
            f = createjs.DisplayObject._hitTestCanvas,
            h = this._matrix,
            j = this._hasMouseHandler(d);
        if (
            !this.hitArea &&
            this.cacheCanvas &&
            j &&
            (this.getConcatenatedMatrix(h),
            e.setTransform(h.a, h.b, h.c, h.d, h.tx - a, h.ty - b),
            (e.globalAlpha = h.alpha),
            this.draw(e),
            this._testHit(e))
        )
            return (f.width = 0), (f.width = 1), this;
        for (var k = this.children.length - 1; 0 <= k; k--) {
            var l = this.children[k],
                n = l.hitArea;
            if (
                l.visible &&
                !((!n && !l.isVisible()) || (d && !l.mouseEnabled))
            ) {
                var p = d && l._hasMouseHandler(d);
                if (l instanceof c && (!n || !p))
                    if (j) {
                        if ((l = l._getObjectsUnderPoint(a, b))) return this;
                    } else {
                        if (
                            ((l = l._getObjectsUnderPoint(a, b, g, d)), !g && l)
                        )
                            return l;
                    }
                else if (!d || j || p)
                    if (
                        (l.getConcatenatedMatrix(h),
                        n &&
                            (h.appendTransform(
                                n.x,
                                n.y,
                                n.scaleX,
                                n.scaleY,
                                n.rotation,
                                n.skewX,
                                n.skewY,
                                n.regX,
                                n.regY
                            ),
                            (h.alpha = n.alpha)),
                        (e.globalAlpha = h.alpha),
                        e.setTransform(h.a, h.b, h.c, h.d, h.tx - a, h.ty - b),
                        (n || l).draw(e),
                        this._testHit(e))
                    ) {
                        f.width = 0;
                        f.width = 1;
                        if (j) return this;
                        if (g) g.push(l);
                        else return l;
                    }
            }
        }
        return null;
    };
    createjs.Container = c;
})();
this.createjs = this.createjs || {};
(function () {
    var c = function (a) {
            this.initialize(a);
        },
        b = (c.prototype = new createjs.Container());
    c._snapToPixelEnabled = !1;
    b.autoClear = !0;
    b.canvas = null;
    b.mouseX = 0;
    b.mouseY = 0;
    b.onMouseMove = null;
    b.onMouseUp = null;
    b.onMouseDown = null;
    b.snapToPixelEnabled = !1;
    b.mouseInBounds = !1;
    b.tickOnUpdate = !0;
    b.mouseMoveOutside = !1;
    b._pointerData = null;
    b._pointerCount = 0;
    b._primaryPointerID = null;
    b._mouseOverIntervalID = null;
    b.Container_initialize = b.initialize;
    b.initialize = function (a) {
        this.Container_initialize();
        this.canvas = 'string' == typeof a ? document.getElementById(a) : a;
        this._pointerData = {};
        this.enableDOMEvents(!0);
    };
    b.update = function () {
        if (this.canvas) {
            this.autoClear && this.clear();
            c._snapToPixelEnabled = this.snapToPixelEnabled;
            this.tickOnUpdate &&
                this._tick(arguments.length ? arguments : null);
            var a = this.canvas.getContext('2d');
            a.save();
            this.updateContext(a);
            this.draw(a, !1);
            a.restore();
        }
    };
    b.tick = b.update;
    b.handleEvent = function (a) {
        'tick' == a.type && this.update(a);
    };
    b.clear = function () {
        if (this.canvas) {
            var a = this.canvas.getContext('2d');
            a.setTransform(1, 0, 0, 1, 0, 0);
            a.clearRect(0, 0, this.canvas.width, this.canvas.height);
        }
    };
    b.toDataURL = function (a, b) {
        b || (b = 'image/png');
        var c = this.canvas.getContext('2d'),
            d = this.canvas.width,
            e = this.canvas.height,
            f;
        if (a) {
            f = c.getImageData(0, 0, d, e);
            var h = c.globalCompositeOperation;
            c.globalCompositeOperation = 'destination-over';
            c.fillStyle = a;
            c.fillRect(0, 0, d, e);
        }
        var j = this.canvas.toDataURL(b);
        a &&
            (c.clearRect(0, 0, d, e),
            c.putImageData(f, 0, 0),
            (c.globalCompositeOperation = h));
        return j;
    };
    b.enableMouseOver = function (a) {
        this._mouseOverIntervalID &&
            (clearInterval(this._mouseOverIntervalID),
            (this._mouseOverIntervalID = null));
        if (null == a) a = 20;
        else if (0 >= a) return;
        var b = this;
        this._mouseOverIntervalID = setInterval(function () {
            b._testMouseOver();
        }, 1e3 / Math.min(50, a));
    };
    b.enableDOMEvents = function (a) {
        null == a && (a = !0);
        var b,
            c = this._eventListeners;
        if (!a && c) {
            for (b in c) (a = c[b]), a.t.removeEventListener(b, a.f);
            this._eventListeners = null;
        } else if (a && !c) {
            a = window.addEventListener ? window : document;
            var d = this,
                c = (this._eventListeners = {});
            c.mouseup = {
                t: a,
                f: function (a) {
                    d._handleMouseUp(a);
                }
            };
            c.mousemove = {
                t: a,
                f: function (a) {
                    d._handleMouseMove(a);
                }
            };
            c.dblclick = {
                t: a,
                f: function (a) {
                    d._handleDoubleClick(a);
                }
            };
            (a = this.canvas) &&
                (c.mousedown = {
                    t: a,
                    f: function (a) {
                        d._handleMouseDown(a);
                    }
                });
            for (b in c) (a = c[b]), a.t.addEventListener(b, a.f);
        }
    };
    b.clone = function () {
        var a = new c(null);
        this.cloneProps(a);
        return a;
    };
    b.toString = function () {
        return '[Stage (name=' + this.name + ')]';
    };
    b._getPointerData = function (a) {
        var b = this._pointerData[a];
        b ||
            ((b = this._pointerData[a] = { x: 0, y: 0 }),
            null == this._primaryPointerID && (this._primaryPointerID = a));
        return b;
    };
    b._handleMouseMove = function (a) {
        a || (a = window.event);
        this._handlePointerMove(-1, a, a.pageX, a.pageY);
    };
    b._handlePointerMove = function (a, b, c, d) {
        if (this.canvas) {
            var e = this._getPointerData(a),
                f = e.inBounds;
            this._updatePointerPosition(a, c, d);
            if (f || e.inBounds || this.mouseMoveOutside) {
                if (this.onMouseMove || this.hasEventListener('stagemousemove'))
                    (c = new createjs.MouseEvent(
                        'stagemousemove',
                        e.x,
                        e.y,
                        this,
                        b,
                        a,
                        a == this._primaryPointerID,
                        e.rawX,
                        e.rawY
                    )),
                        this.onMouseMove && this.onMouseMove(c),
                        this.dispatchEvent(c);
                if (
                    (d = e.event) &&
                    (d.onMouseMove || d.hasEventListener('mousemove'))
                )
                    (c = new createjs.MouseEvent(
                        'mousemove',
                        e.x,
                        e.y,
                        d.target,
                        b,
                        a,
                        a == this._primaryPointerID,
                        e.rawX,
                        e.rawY
                    )),
                        d.onMouseMove && d.onMouseMove(c),
                        d.dispatchEvent(c, d.target);
            }
        }
    };
    b._updatePointerPosition = function (a, b, c) {
        var d = this._getElementRect(this.canvas);
        b -= d.left;
        c -= d.top;
        var e = this.canvas.width,
            f = this.canvas.height;
        b /= (d.right - d.left) / e;
        c /= (d.bottom - d.top) / f;
        d = this._getPointerData(a);
        (d.inBounds = 0 <= b && 0 <= c && b <= e - 1 && c <= f - 1)
            ? ((d.x = b), (d.y = c))
            : this.mouseMoveOutside &&
              ((d.x = 0 > b ? 0 : b > e - 1 ? e - 1 : b),
              (d.y = 0 > c ? 0 : c > f - 1 ? f - 1 : c));
        d.rawX = b;
        d.rawY = c;
        a == this._primaryPointerID &&
            ((this.mouseX = d.x),
            (this.mouseY = d.y),
            (this.mouseInBounds = d.inBounds));
    };
    b._getElementRect = function (a) {
        var b;
        try {
            b = a.getBoundingClientRect();
        } catch (c) {
            b = {
                top: a.offsetTop,
                left: a.offsetLeft,
                width: a.offsetWidth,
                height: a.offsetHeight
            };
        }
        var d =
                (window.pageXOffset || document.scrollLeft || 0) -
                (document.clientLeft || document.body.clientLeft || 0),
            e =
                (window.pageYOffset || document.scrollTop || 0) -
                (document.clientTop || document.body.clientTop || 0),
            f = window.getComputedStyle ? getComputedStyle(a) : a.currentStyle;
        a = parseInt(f.paddingLeft) + parseInt(f.borderLeftWidth);
        var h = parseInt(f.paddingTop) + parseInt(f.borderTopWidth),
            j = parseInt(f.paddingRight) + parseInt(f.borderRightWidth),
            f = parseInt(f.paddingBottom) + parseInt(f.borderBottomWidth);
        return {
            left: b.left + d + a,
            right: b.right + d - j,
            top: b.top + e + h,
            bottom: b.bottom + e - f
        };
    };
    b._handleMouseUp = function (a) {
        this._handlePointerUp(-1, a, !1);
    };
    b._handlePointerUp = function (a, b, c) {
        var d = this._getPointerData(a),
            e;
        if (this.onMouseMove || this.hasEventListener('stagemouseup'))
            (e = new createjs.MouseEvent(
                'stagemouseup',
                d.x,
                d.y,
                this,
                b,
                a,
                a == this._primaryPointerID,
                d.rawX,
                d.rawY
            )),
                this.onMouseUp && this.onMouseUp(e),
                this.dispatchEvent(e);
        var f = d.event;
        if (f && (f.onMouseUp || f.hasEventListener('mouseup')))
            (e = new createjs.MouseEvent(
                'mouseup',
                d.x,
                d.y,
                f.target,
                b,
                a,
                a == this._primaryPointerID,
                d.rawX,
                d.rawY
            )),
                f.onMouseUp && f.onMouseUp(e),
                f.dispatchEvent(e, f.target);
        if (
            (f = d.target) &&
            (f.onClick || f.hasEventListener('click')) &&
            this._getObjectsUnderPoint(
                d.x,
                d.y,
                null,
                !0,
                this._mouseOverIntervalID ? 3 : 1
            ) == f
        )
            (e = new createjs.MouseEvent(
                'click',
                d.x,
                d.y,
                f,
                b,
                a,
                a == this._primaryPointerID,
                d.rawX,
                d.rawY
            )),
                f.onClick && f.onClick(e),
                f.dispatchEvent(e);
        c
            ? (a == this._primaryPointerID && (this._primaryPointerID = null),
              delete this._pointerData[a])
            : (d.event = d.target = null);
    };
    b._handleMouseDown = function (a) {
        this._handlePointerDown(-1, a, !1);
    };
    b._handlePointerDown = function (a, b, c, d) {
        var e = this._getPointerData(a);
        null != d && this._updatePointerPosition(a, c, d);
        if (this.onMouseDown || this.hasEventListener('stagemousedown'))
            (c = new createjs.MouseEvent(
                'stagemousedown',
                e.x,
                e.y,
                this,
                b,
                a,
                a == this._primaryPointerID,
                e.rawX,
                e.rawY
            )),
                this.onMouseDown && this.onMouseDown(c),
                this.dispatchEvent(c);
        if (
            (d = this._getObjectsUnderPoint(
                e.x,
                e.y,
                null,
                this._mouseOverIntervalID ? 3 : 1
            ))
        )
            if (((e.target = d), d.onPress || d.hasEventListener('mousedown')))
                if (
                    ((c = new createjs.MouseEvent(
                        'mousedown',
                        e.x,
                        e.y,
                        d,
                        b,
                        a,
                        a == this._primaryPointerID,
                        e.rawX,
                        e.rawY
                    )),
                    d.onPress && d.onPress(c),
                    d.dispatchEvent(c),
                    c.onMouseMove ||
                        c.onMouseUp ||
                        c.hasEventListener('mousemove') ||
                        c.hasEventListener('mouseup'))
                )
                    e.event = c;
    };
    b._testMouseOver = function () {
        if (
            -1 == this._primaryPointerID &&
            !(
                this.mouseX == this._mouseOverX &&
                this.mouseY == this._mouseOverY &&
                this.mouseInBounds
            )
        ) {
            var a = null;
            this.mouseInBounds &&
                ((a = this._getObjectsUnderPoint(
                    this.mouseX,
                    this.mouseY,
                    null,
                    3
                )),
                (this._mouseOverX = this.mouseX),
                (this._mouseOverY = this.mouseY));
            var b = this._mouseOverTarget;
            if (b != a) {
                var c = this._getPointerData(-1);
                if (b && (b.onMouseOut || b.hasEventListener('mouseout'))) {
                    var d = new createjs.MouseEvent(
                        'mouseout',
                        c.x,
                        c.y,
                        b,
                        null,
                        -1,
                        c.rawX,
                        c.rawY
                    );
                    b.onMouseOut && b.onMouseOut(d);
                    b.dispatchEvent(d);
                }
                b && (this.canvas.style.cursor = '');
                if (a && (a.onMouseOver || a.hasEventListener('mouseover')))
                    (d = new createjs.MouseEvent(
                        'mouseover',
                        c.x,
                        c.y,
                        a,
                        null,
                        -1,
                        c.rawX,
                        c.rawY
                    )),
                        a.onMouseOver && a.onMouseOver(d),
                        a.dispatchEvent(d);
                a && (this.canvas.style.cursor = a.cursor || '');
                this._mouseOverTarget = a;
            }
        }
    };
    b._handleDoubleClick = function (a) {
        var b = this._getPointerData(-1),
            c = this._getObjectsUnderPoint(
                b.x,
                b.y,
                null,
                this._mouseOverIntervalID ? 3 : 1
            );
        if (c && (c.onDoubleClick || c.hasEventListener('dblclick')))
            (evt = new createjs.MouseEvent(
                'dblclick',
                b.x,
                b.y,
                c,
                a,
                -1,
                !0,
                b.rawX,
                b.rawY
            )),
                c.onDoubleClick && c.onDoubleClick(evt),
                c.dispatchEvent(evt);
    };
    createjs.Stage = c;
})();
this.createjs = this.createjs || {};
(function () {
    var c = function (a) {
            this.initialize(a);
        },
        b = (c.prototype = new createjs.DisplayObject());
    b.image = null;
    b.snapToPixel = !0;
    b.sourceRect = null;
    b.DisplayObject_initialize = b.initialize;
    b.initialize = function (a) {
        this.DisplayObject_initialize();
        'string' == typeof a
            ? ((this.image = new Image()), (this.image.src = a))
            : (this.image = a);
    };
    b.isVisible = function () {
        var a =
            this.cacheCanvas ||
            (this.image &&
                (this.image.complete ||
                    this.image.getContext ||
                    2 <= this.image.readyState));
        return !(
            !this.visible ||
            !(0 < this.alpha && 0 != this.scaleX && 0 != this.scaleY && a)
        );
    };
    b.DisplayObject_draw = b.draw;
    b.draw = function (a, b) {
        if (this.DisplayObject_draw(a, b)) return !0;
        var c = this.sourceRect;
        c
            ? a.drawImage(
                  this.image,
                  c.x,
                  c.y,
                  c.width,
                  c.height,
                  0,
                  0,
                  c.width,
                  c.height
              )
            : a.drawImage(this.image, 0, 0);
        return !0;
    };
    b.clone = function () {
        var a = new c(this.image);
        this.sourceRect && (a.sourceRect = this.sourceRect.clone());
        this.cloneProps(a);
        return a;
    };
    b.toString = function () {
        return '[Bitmap (name=' + this.name + ')]';
    };
    createjs.Bitmap = c;
})();
this.createjs = this.createjs || {};
(function () {
    var c = function (a) {
            this.initialize(a);
        },
        b = (c.prototype = new createjs.DisplayObject());
    b.onAnimationEnd = null;
    b.currentFrame = -1;
    b.currentAnimation = null;
    b.paused = !0;
    b.spriteSheet = null;
    b.snapToPixel = !0;
    b.offset = 0;
    b.currentAnimationFrame = 0;
    b.addEventListener = null;
    b.removeEventListener = null;
    b.removeAllEventListeners = null;
    b.dispatchEvent = null;
    b.hasEventListener = null;
    b._listeners = null;
    createjs.EventDispatcher.initialize(b);
    b._advanceCount = 0;
    b._animation = null;
    b.DisplayObject_initialize = b.initialize;
    b.initialize = function (a) {
        this.DisplayObject_initialize();
        this.spriteSheet = a;
    };
    b.isVisible = function () {
        var a =
            this.cacheCanvas ||
            (this.spriteSheet.complete && 0 <= this.currentFrame);
        return !(
            !this.visible ||
            !(0 < this.alpha && 0 != this.scaleX && 0 != this.scaleY && a)
        );
    };
    b.DisplayObject_draw = b.draw;
    b.draw = function (a, b) {
        if (this.DisplayObject_draw(a, b)) return !0;
        this._normalizeFrame();
        var c = this.spriteSheet.getFrame(this.currentFrame);
        if (c) {
            var d = c.rect;
            a.drawImage(
                c.image,
                d.x,
                d.y,
                d.width,
                d.height,
                -c.regX,
                -c.regY,
                d.width,
                d.height
            );
            return !0;
        }
    };
    b.play = function () {
        this.paused = !1;
    };
    b.stop = function () {
        this.paused = !0;
    };
    b.gotoAndPlay = function (a) {
        this.paused = !1;
        this._goto(a);
    };
    b.gotoAndStop = function (a) {
        this.paused = !0;
        this._goto(a);
    };
    b.advance = function () {
        this._animation ? this.currentAnimationFrame++ : this.currentFrame++;
        this._normalizeFrame();
    };
    b.getBounds = function () {
        return this.spriteSheet.getFrameBounds(this.currentFrame);
    };
    b.clone = function () {
        var a = new c(this.spriteSheet);
        this.cloneProps(a);
        return a;
    };
    b.toString = function () {
        return '[BitmapAnimation (name=' + this.name + ')]';
    };
    b.DisplayObject__tick = b._tick;
    b._tick = function (a) {
        var b = this._animation ? this._animation.frequency : 1;
        !this.paused &&
            0 == (++this._advanceCount + this.offset) % b &&
            this.advance();
        this.DisplayObject__tick(a);
    };
    b._normalizeFrame = function () {
        var a = this._animation,
            b = this.currentFrame,
            c = this.paused,
            d;
        if (a)
            if (((d = a.frames.length), this.currentAnimationFrame >= d)) {
                var e = a.next;
                this._dispatchAnimationEnd(a, b, c, e, d - 1) ||
                    (e
                        ? this._goto(e)
                        : ((this.paused = !0),
                          (this.currentAnimationFrame = a.frames.length - 1),
                          (this.currentFrame =
                              a.frames[this.currentAnimationFrame])));
            } else this.currentFrame = a.frames[this.currentAnimationFrame];
        else
            (d = this.spriteSheet.getNumFrames()),
                b >= d &&
                    !this._dispatchAnimationEnd(a, b, c, d - 1) &&
                    (this.currentFrame = 0);
    };
    b._dispatchAnimationEnd = function (a, b, c, d, e) {
        var f = a ? a.name : null;
        this.onAnimationEnd && this.onAnimationEnd(this, f, d);
        this.dispatchEvent({ type: 'animationend', name: f, next: d });
        !c && this.paused && (this.currentAnimationFrame = e);
        return (
            this.paused != c || this._animation != a || this.currentFrame != b
        );
    };
    b.DisplayObject_cloneProps = b.cloneProps;
    b.cloneProps = function (a) {
        this.DisplayObject_cloneProps(a);
        a.onAnimationEnd = this.onAnimationEnd;
        a.currentFrame = this.currentFrame;
        a.currentAnimation = this.currentAnimation;
        a.paused = this.paused;
        a.offset = this.offset;
        a._animation = this._animation;
        a.currentAnimationFrame = this.currentAnimationFrame;
    };
    b._goto = function (a) {
        if (isNaN(a)) {
            var b = this.spriteSheet.getAnimation(a);
            b &&
                ((this.currentAnimationFrame = 0),
                (this._animation = b),
                (this.currentAnimation = a),
                this._normalizeFrame());
        } else
            (this.currentAnimation = this._animation = null),
                (this.currentFrame = a);
    };
    createjs.BitmapAnimation = c;
})();
this.createjs = this.createjs || {};
(function () {
    var c = function (a) {
            this.initialize(a);
        },
        b = (c.prototype = new createjs.DisplayObject());
    b.graphics = null;
    b.DisplayObject_initialize = b.initialize;
    b.initialize = function (a) {
        this.DisplayObject_initialize();
        this.graphics = a ? a : new createjs.Graphics();
    };
    b.isVisible = function () {
        var a = this.cacheCanvas || (this.graphics && !this.graphics.isEmpty());
        return !(
            !this.visible ||
            !(0 < this.alpha && 0 != this.scaleX && 0 != this.scaleY && a)
        );
    };
    b.DisplayObject_draw = b.draw;
    b.draw = function (a, b) {
        if (this.DisplayObject_draw(a, b)) return !0;
        this.graphics.draw(a);
        return !0;
    };
    b.clone = function (a) {
        a = new c(a && this.graphics ? this.graphics.clone() : this.graphics);
        this.cloneProps(a);
        return a;
    };
    b.toString = function () {
        return '[Shape (name=' + this.name + ')]';
    };
    createjs.Shape = c;
})();
this.createjs = this.createjs || {};
(function () {
    var c = function (a, b, c) {
            this.initialize(a, b, c);
        },
        b = (c.prototype = new createjs.DisplayObject());
    c._workingContext = (createjs.createCanvas
        ? createjs.createCanvas()
        : document.createElement('canvas')
    ).getContext('2d');
    b.text = '';
    b.font = null;
    b.color = '#000';
    b.textAlign = 'left';
    b.textBaseline = 'top';
    b.maxWidth = null;
    b.outline = !1;
    b.lineHeight = 0;
    b.lineWidth = null;
    b.DisplayObject_initialize = b.initialize;
    b.initialize = function (a, b, c) {
        this.DisplayObject_initialize();
        this.text = a;
        this.font = b;
        this.color = c ? c : '#000';
    };
    b.isVisible = function () {
        var a = this.cacheCanvas || (null != this.text && '' !== this.text);
        return !(
            !this.visible ||
            !(0 < this.alpha && 0 != this.scaleX && 0 != this.scaleY && a)
        );
    };
    b.DisplayObject_draw = b.draw;
    b.draw = function (a, b) {
        if (this.DisplayObject_draw(a, b)) return !0;
        this.outline
            ? (a.strokeStyle = this.color)
            : (a.fillStyle = this.color);
        a.font = this.font;
        a.textAlign = this.textAlign || 'start';
        a.textBaseline = this.textBaseline || 'alphabetic';
        this._drawText(a);
        return !0;
    };
    b.getMeasuredWidth = function () {
        return this._getWorkingContext().measureText(this.text).width;
    };
    b.getMeasuredLineHeight = function () {
        return 1.2 * this._getWorkingContext().measureText('M').width;
    };
    b.getMeasuredHeight = function () {
        return (
            this._drawText() * (this.lineHeight || this.getMeasuredLineHeight())
        );
    };
    b.clone = function () {
        var a = new c(this.text, this.font, this.color);
        this.cloneProps(a);
        return a;
    };
    b.toString = function () {
        return (
            '[Text (text=' +
            (20 < this.text.length
                ? this.text.substr(0, 17) + '...'
                : this.text) +
            ')]'
        );
    };
    b.DisplayObject_cloneProps = b.cloneProps;
    b.cloneProps = function (a) {
        this.DisplayObject_cloneProps(a);
        a.textAlign = this.textAlign;
        a.textBaseline = this.textBaseline;
        a.maxWidth = this.maxWidth;
        a.outline = this.outline;
        a.lineHeight = this.lineHeight;
        a.lineWidth = this.lineWidth;
    };
    b._getWorkingContext = function () {
        var a = c._workingContext;
        a.font = this.font;
        a.textAlign = this.textAlign || 'start';
        a.textBaseline = this.textBaseline || 'alphabetic';
        return a;
    };
    b._drawText = function (a) {
        var b = !!a;
        b || (a = this._getWorkingContext());
        for (
            var c = String(this.text).split(/(?:\r\n|\r|\n)/),
                d = this.lineHeight || this.getMeasuredLineHeight(),
                e = 0,
                f = 0,
                h = c.length;
            f < h;
            f++
        ) {
            var j = a.measureText(c[f]).width;
            if (null == this.lineWidth || j < this.lineWidth)
                b && this._drawTextLine(a, c[f], e * d);
            else {
                for (
                    var j = c[f].split(/(\s)/), k = j[0], l = 1, n = j.length;
                    l < n;
                    l += 2
                )
                    a.measureText(k + j[l] + j[l + 1]).width > this.lineWidth
                        ? (b && this._drawTextLine(a, k, e * d),
                          e++,
                          (k = j[l + 1]))
                        : (k += j[l] + j[l + 1]);
                b && this._drawTextLine(a, k, e * d);
            }
            e++;
        }
        return e;
    };
    b._drawTextLine = function (a, b, c) {
        this.outline
            ? a.strokeText(b, 0, c, this.maxWidth || 65535)
            : a.fillText(b, 0, c, this.maxWidth || 65535);
    };
    createjs.Text = c;
})();
this.createjs = this.createjs || {};
(function () {
    var c = function () {
        throw 'SpriteSheetUtils cannot be instantiated';
    };
    c._workingCanvas = createjs.createCanvas
        ? createjs.createCanvas()
        : document.createElement('canvas');
    c._workingContext = c._workingCanvas.getContext('2d');
    c.addFlippedFrames = function (b, a, m, g) {
        if (a || m || g) {
            var d = 0;
            a && c._flip(b, ++d, !0, !1);
            m && c._flip(b, ++d, !1, !0);
            g && c._flip(b, ++d, !0, !0);
        }
    };
    c.extractFrame = function (b, a) {
        isNaN(a) && (a = b.getAnimation(a).frames[0]);
        var m = b.getFrame(a);
        if (!m) return null;
        var g = m.rect,
            d = c._workingCanvas;
        d.width = g.width;
        d.height = g.height;
        c._workingContext.drawImage(
            m.image,
            g.x,
            g.y,
            g.width,
            g.height,
            0,
            0,
            g.width,
            g.height
        );
        m = new Image();
        m.src = d.toDataURL('image/png');
        return m;
    };
    c.mergeAlpha = function (b, a, c) {
        c ||
            (c = createjs.createCanvas
                ? createjs.createCanvas()
                : document.createElement('canvas'));
        c.width = Math.max(a.width, b.width);
        c.height = Math.max(a.height, b.height);
        var g = c.getContext('2d');
        g.save();
        g.drawImage(b, 0, 0);
        g.globalCompositeOperation = 'destination-in';
        g.drawImage(a, 0, 0);
        g.restore();
        return c;
    };
    c._flip = function (b, a, m, g) {
        for (
            var d = b._images,
                e = c._workingCanvas,
                f = c._workingContext,
                h = d.length / a,
                j = 0;
            j < h;
            j++
        ) {
            var k = d[j];
            k.__tmp = j;
            e.width = 0;
            e.width = k.width;
            e.height = k.height;
            f.setTransform(
                m ? -1 : 1,
                0,
                0,
                g ? -1 : 1,
                m ? k.width : 0,
                g ? k.height : 0
            );
            f.drawImage(k, 0, 0);
            var l = new Image();
            l.src = e.toDataURL('image/png');
            l.width = k.width;
            l.height = k.height;
            d.push(l);
        }
        f = b._frames;
        e = f.length / a;
        for (j = 0; j < e; j++) {
            var k = f[j],
                n = k.rect.clone(),
                l = d[k.image.__tmp + h * a],
                p = { image: l, rect: n, regX: k.regX, regY: k.regY };
            m && ((n.x = l.width - n.x - n.width), (p.regX = n.width - k.regX));
            g &&
                ((n.y = l.height - n.y - n.height),
                (p.regY = n.height - k.regY));
            f.push(p);
        }
        m = '_' + (m ? 'h' : '') + (g ? 'v' : '');
        g = b._animations;
        b = b._data;
        d = g.length / a;
        for (j = 0; j < d; j++) {
            f = g[j];
            k = b[f];
            h = {
                name: f + m,
                frequency: k.frequency,
                next: k.next,
                frames: []
            };
            k.next && (h.next += m);
            f = k.frames;
            k = 0;
            for (l = f.length; k < l; k++) h.frames.push(f[k] + e * a);
            b[h.name] = h;
            g.push(h.name);
        }
    };
    createjs.SpriteSheetUtils = c;
})();
this.createjs = this.createjs || {};
(function () {
    var c = function () {
            this.initialize();
        },
        b = c.prototype;
    c.ERR_DIMENSIONS = 'frame dimensions exceed max spritesheet dimensions';
    c.ERR_RUNNING = 'a build is already running';
    b.maxWidth = 2048;
    b.maxHeight = 2048;
    b.spriteSheet = null;
    b.scale = 1;
    b.padding = 1;
    b.timeSlice = 0.3;
    b.progress = -1;
    b.onComplete = null;
    b.onProgress = null;
    b.addEventListener = null;
    b.removeEventListener = null;
    b.removeAllEventListeners = null;
    b.dispatchEvent = null;
    b.hasEventListener = null;
    b._listeners = null;
    createjs.EventDispatcher.initialize(b);
    b._frames = null;
    b._animations = null;
    b._data = null;
    b._nextFrameIndex = 0;
    b._index = 0;
    b._timerID = null;
    b._scale = 1;
    b.initialize = function () {
        this._frames = [];
        this._animations = {};
    };
    b.addFrame = function (a, b, g, d, e, f) {
        if (this._data) throw c.ERR_RUNNING;
        b = b || a.bounds || a.nominalBounds;
        !b && a.getBounds && (b = a.getBounds());
        if (!b) return null;
        g = g || 1;
        return (
            this._frames.push({
                source: a,
                sourceRect: b,
                scale: g,
                funct: d,
                params: e,
                scope: f,
                index: this._frames.length,
                height: b.height * g
            }) - 1
        );
    };
    b.addAnimation = function (a, b, g, d) {
        if (this._data) throw c.ERR_RUNNING;
        this._animations[a] = { frames: b, next: g, frequency: d };
    };
    b.addMovieClip = function (a, b, g) {
        if (this._data) throw c.ERR_RUNNING;
        var d = a.frameBounds,
            e = b || a.bounds || a.nominalBounds;
        !e && a.getBounds && (e = a.getBounds());
        if (!e && !d) return null;
        b = this._frames.length;
        for (var f = a.timeline.duration, h = 0; h < f; h++)
            this.addFrame(
                a,
                d && d[h] ? d[h] : e,
                g,
                function (a) {
                    var b = this.actionsEnabled;
                    this.actionsEnabled = !1;
                    this.gotoAndStop(a);
                    this.actionsEnabled = b;
                },
                [h],
                a
            );
        h = a.timeline._labels;
        a = [];
        for (var j in h) a.push({ index: h[j], label: j });
        if (a.length) {
            a.sort(function (a, b) {
                return a.index - b.index;
            });
            h = 0;
            for (j = a.length; h < j; h++) {
                g = a[h].label;
                for (
                    var d = b + (h == j - 1 ? f : a[h + 1].index),
                        e = [],
                        k = b + a[h].index;
                    k < d;
                    k++
                )
                    e.push(k);
                this.addAnimation(g, e, !0);
            }
        }
    };
    b.build = function () {
        if (this._data) throw c.ERR_RUNNING;
        for (this._startBuild(); this._drawNext(); );
        this._endBuild();
        return this.spriteSheet;
    };
    b.buildAsync = function (a) {
        if (this._data) throw c.ERR_RUNNING;
        this.timeSlice = a;
        this._startBuild();
        var b = this;
        this._timerID = setTimeout(function () {
            b._run();
        }, 50 - 50 * Math.max(0.01, Math.min(0.99, this.timeSlice || 0.3)));
    };
    b.stopAsync = function () {
        clearTimeout(this._timerID);
        this._data = null;
    };
    b.clone = function () {
        throw 'SpriteSheetBuilder cannot be cloned.';
    };
    b.toString = function () {
        return '[SpriteSheetBuilder]';
    };
    b._startBuild = function () {
        var a = this.padding || 0;
        this.progress = 0;
        this.spriteSheet = null;
        this._index = 0;
        this._scale = this.scale;
        var b = [];
        this._data = { images: [], frames: b, animations: this._animations };
        var g = this._frames.slice();
        g.sort(function (a, b) {
            return a.height <= b.height ? -1 : 1;
        });
        if (g[g.length - 1].height + 2 * a > this.maxHeight)
            throw c.ERR_DIMENSIONS;
        for (var d = 0, e = 0, f = 0; g.length; ) {
            var h = this._fillRow(g, d, f, b, a);
            h.w > e && (e = h.w);
            d += h.h;
            if (!h.h || !g.length) {
                var j = createjs.createCanvas
                    ? createjs.createCanvas()
                    : document.createElement('canvas');
                j.width = this._getSize(e, this.maxWidth);
                j.height = this._getSize(d, this.maxHeight);
                this._data.images[f] = j;
                h.h || ((e = d = 0), f++);
            }
        }
    };
    b._getSize = function (a, b) {
        for (var c = 4; Math.pow(2, ++c) < a; );
        return Math.min(b, Math.pow(2, c));
    };
    b._fillRow = function (a, b, g, d, e) {
        var f = this.maxWidth,
            h = this.maxHeight;
        b += e;
        for (var h = h - b, j = e, k = 0, l = a.length - 1; 0 <= l; l--) {
            var n = a[l],
                p = this._scale * n.scale,
                q = n.sourceRect,
                s = n.source,
                r = Math.floor(p * q.x - e),
                u = Math.floor(p * q.y - e),
                t = Math.ceil(p * q.height + 2 * e),
                q = Math.ceil(p * q.width + 2 * e);
            if (q > f) throw c.ERR_DIMENSIONS;
            t > h ||
                j + q > f ||
                ((n.img = g),
                (n.rect = new createjs.Rectangle(j, b, q, t)),
                (k = k || t),
                a.splice(l, 1),
                (d[n.index] = [
                    j,
                    b,
                    q,
                    t,
                    g,
                    Math.round(-r + p * s.regX - e),
                    Math.round(-u + p * s.regY - e)
                ]),
                (j += q));
        }
        return { w: j, h: k };
    };
    b._endBuild = function () {
        this.spriteSheet = new createjs.SpriteSheet(this._data);
        this._data = null;
        this.progress = 1;
        this.onComplete && this.onComplete(this);
        this.dispatchEvent('complete');
    };
    b._run = function () {
        for (
            var a = 50 * Math.max(0.01, Math.min(0.99, this.timeSlice || 0.3)),
                b = new Date().getTime() + a,
                c = !1;
            b > new Date().getTime();

        )
            if (!this._drawNext()) {
                c = !0;
                break;
            }
        if (c) this._endBuild();
        else {
            var d = this;
            this._timerID = setTimeout(function () {
                d._run();
            }, 50 - a);
        }
        a = this.progress = this._index / this._frames.length;
        this.onProgress && this.onProgress(this, a);
        this.dispatchEvent({ type: 'progress', progress: a });
    };
    b._drawNext = function () {
        var a = this._frames[this._index],
            b = a.scale * this._scale,
            c = a.rect,
            d = a.sourceRect,
            e = this._data.images[a.img].getContext('2d');
        a.funct && a.funct.apply(a.scope, a.params);
        e.save();
        e.beginPath();
        e.rect(c.x, c.y, c.width, c.height);
        e.clip();
        e.translate(Math.ceil(c.x - d.x * b), Math.ceil(c.y - d.y * b));
        e.scale(b, b);
        a.source.draw(e);
        e.restore();
        return ++this._index < this._frames.length;
    };
    createjs.SpriteSheetBuilder = c;
})();
this.createjs = this.createjs || {};
(function () {
    var c = function (a) {
            this.initialize(a);
        },
        b = (c.prototype = new createjs.DisplayObject());
    b.htmlElement = null;
    b._oldMtx = null;
    b.DisplayObject_initialize = b.initialize;
    b.initialize = function (a) {
        'string' == typeof a && (a = document.getElementById(a));
        this.DisplayObject_initialize();
        this.mouseEnabled = !1;
        this.htmlElement = a;
        a = a.style;
        a.position = 'absolute';
        a.transformOrigin = a.WebkitTransformOrigin = a.msTransformOrigin = a.MozTransformOrigin = a.OTransformOrigin =
            '0% 0%';
    };
    b.isVisible = function () {
        return null != this.htmlElement;
    };
    b.draw = function () {
        if (null != this.htmlElement) {
            var a = this.getConcatenatedMatrix(this._matrix),
                b = this.htmlElement.style;
            if (this.visible) b.visibility = 'visible';
            else return !0;
            var c = this._oldMtx || {};
            c.alpha != a.alpha &&
                ((b.opacity = '' + a.alpha), (c.alpha = a.alpha));
            if (
                c.tx != a.tx ||
                c.ty != a.ty ||
                c.a != a.a ||
                c.b != a.b ||
                c.c != a.c ||
                c.d != a.d
            )
                (b.transform = b.WebkitTransform = b.OTransform = b.msTransform = [
                    'matrix(' + a.a,
                    a.b,
                    a.c,
                    a.d,
                    (a.tx + 0.5) | 0,
                    ((a.ty + 0.5) | 0) + ')'
                ].join()),
                    (b.MozTransform = [
                        'matrix(' + a.a,
                        a.b,
                        a.c,
                        a.d,
                        ((a.tx + 0.5) | 0) + 'px',
                        ((a.ty + 0.5) | 0) + 'px)'
                    ].join()),
                    (this._oldMtx = a.clone());
            return !0;
        }
    };
    b.cache = function () {};
    b.uncache = function () {};
    b.updateCache = function () {};
    b.hitTest = function () {};
    b.localToGlobal = function () {};
    b.globalToLocal = function () {};
    b.localToLocal = function () {};
    b.clone = function () {
        throw 'DOMElement cannot be cloned.';
    };
    b.toString = function () {
        return '[DOMElement (name=' + this.name + ')]';
    };
    b.DisplayObject__tick = b._tick;
    b._tick = function (a) {
        this.htmlElement.style.visibility = 'hidden';
        this.DisplayObject__tick(a);
    };
    createjs.DOMElement = c;
})();
this.createjs = this.createjs || {};
(function () {
    var c = function () {
            this.initialize();
        },
        b = c.prototype;
    b.initialize = function () {};
    b.getBounds = function () {
        return new createjs.Rectangle(0, 0, 0, 0);
    };
    b.applyFilter = function () {};
    b.toString = function () {
        return '[Filter]';
    };
    b.clone = function () {
        return new c();
    };
    createjs.Filter = c;
})();
this.createjs = this.createjs || {};
(function () {
    var c = function () {
        throw 'Touch cannot be instantiated';
    };
    c.isSupported = function () {
        return 'ontouchstart' in window || window.navigator.msPointerEnabled;
    };
    c.enable = function (b, a, m) {
        if (!b || !b.canvas || !c.isSupported()) return !1;
        b.__touch = {
            pointers: {},
            multitouch: !a,
            preventDefault: !m,
            count: 0
        };
        'ontouchstart' in window
            ? c._IOS_enable(b)
            : window.navigator.msPointerEnabled && c._IE_enable(b);
        return !0;
    };
    c.disable = function (b) {
        b &&
            ('ontouchstart' in window
                ? c._IOS_disable(b)
                : window.navigator.msPointerEnabled && c._IE_disable(b));
    };
    c._IOS_enable = function (b) {
        var a = b.canvas,
            m = (b.__touch.f = function (a) {
                c._IOS_handleEvent(b, a);
            });
        a.addEventListener('touchstart', m, !1);
        a.addEventListener('touchmove', m, !1);
        a.addEventListener('touchend', m, !1);
        a.addEventListener('touchcancel', m, !1);
    };
    c._IOS_disable = function (b) {
        var a = b.canvas;
        a &&
            ((b = b.__touch.f),
            a.removeEventListener('touchstart', b, !1),
            a.removeEventListener('touchmove', b, !1),
            a.removeEventListener('touchend', b, !1),
            a.removeEventListener('touchcancel', b, !1));
    };
    c._IOS_handleEvent = function (b, a) {
        if (b) {
            b.__touch.preventDefault && a.preventDefault && a.preventDefault();
            for (
                var c = a.changedTouches, g = a.type, d = 0, e = c.length;
                d < e;
                d++
            ) {
                var f = c[d],
                    h = f.identifier;
                f.target == b.canvas &&
                    ('touchstart' == g
                        ? this._handleStart(b, h, a, f.pageX, f.pageY)
                        : 'touchmove' == g
                        ? this._handleMove(b, h, a, f.pageX, f.pageY)
                        : ('touchend' == g || 'touchcancel' == g) &&
                          this._handleEnd(b, h, a));
            }
        }
    };
    c._IE_enable = function (b) {
        var a = b.canvas,
            m = (b.__touch.f = function (a) {
                c._IE_handleEvent(b, a);
            });
        a.addEventListener('MSPointerDown', m, !1);
        window.addEventListener('MSPointerMove', m, !1);
        window.addEventListener('MSPointerUp', m, !1);
        window.addEventListener('MSPointerCancel', m, !1);
        b.__touch.preventDefault && (a.style.msTouchAction = 'none');
        b.__touch.activeIDs = {};
    };
    c._IE_disable = function (b) {
        var a = b.__touch.f;
        window.removeEventListener('MSPointerMove', a, !1);
        window.removeEventListener('MSPointerUp', a, !1);
        window.removeEventListener('MSPointerCancel', a, !1);
        b.canvas && b.canvas.removeEventListener('MSPointerDown', a, !1);
    };
    c._IE_handleEvent = function (b, a) {
        if (b) {
            b.__touch.preventDefault && a.preventDefault && a.preventDefault();
            var c = a.type,
                g = a.pointerId,
                d = b.__touch.activeIDs;
            if ('MSPointerDown' == c)
                a.srcElement == b.canvas &&
                    ((d[g] = !0), this._handleStart(b, g, a, a.pageX, a.pageY));
            else if (d[g])
                if ('MSPointerMove' == c)
                    this._handleMove(b, g, a, a.pageX, a.pageY);
                else if ('MSPointerUp' == c || 'MSPointerCancel' == c)
                    delete d[g], this._handleEnd(b, g, a);
        }
    };
    c._handleStart = function (b, a, c, g, d) {
        var e = b.__touch;
        if (e.multitouch || !e.count) {
            var f = e.pointers;
            f[a] || ((f[a] = !0), e.count++, b._handlePointerDown(a, c, g, d));
        }
    };
    c._handleMove = function (b, a, c, g, d) {
        b.__touch.pointers[a] && b._handlePointerMove(a, c, g, d);
    };
    c._handleEnd = function (b, a, c) {
        var g = b.__touch,
            d = g.pointers;
        d[a] && (g.count--, b._handlePointerUp(a, c, !0), delete d[a]);
    };
    createjs.Touch = c;
})();
(function () {
    var c = (this.createjs = this.createjs || {}),
        c = (c.EaselJS = c.EaselJS || {});
    c.version = '0.6.0';
    c.buildDate = 'Tue, 12 Feb 2013 21:12:22 GMT';
})();
;
(function (global, $) {
    'use strict';

    global.UiSearch = global.UiBloc.extend({
        init: function (page, name) {
            this._super(page, name);

            // Private properties
            var me = this;
            var model = me.Model;
            var autocompleteMinLength = 3;
            var autocompleteTimer;
            var directionalKeycodes = {
                top: 38,
                bottom: 40
            };
            var hasAutocomplete;
            var inputVal = '';
            var searchText = '';
            var SHOPPING_TOOL_USED = global.globalTrackingEvent.SHOPPING_TOOL_USED;

            var searchLabels = JSON.parse($('#searchLabels').text());
            var defaultPlaceholder = searchLabels.defaultSearchPlaceholder;
            var tryTextPlaceholder = searchLabels.tryTextPlaceholder;

            var prevPlaceholderIndex = searchLabels.suggestedKeywords.length - 1;
            var placeholderIndex = 0;
            var nextPlaceholderIndex = 1;
            var placeholderChangeSpeed = 2000;

            // Public properties
            me.placeholder = searchLabels.suggestedKeywords;
            me.isOpen = false;
            me.maxSearchHistory = 5; // Value by default if not overwritten
            me.maxSearchSuggestions = 10; // Value by default if not overwritten
            me.positionCounter = 0; // Manage keyboard navigation through search history and search suggestions
            me.context = 'suggestions';

            // DOM picks
            var $autocompleteList = $('#autocompleteList');
            var $eraseSearchButton = $('#eraseSearchButton');
            var $featureContainer = $('.block-search-suggestion');

            var $inputError = $('#error_search_field');
            var overlay = document.getElementById('overlay');
            me.$header = $('#header');
            me.$container = $('#headerSearch');
            me.$input = $('#headerSearchField');
            me.$inputPlaceholder = $('#headerSearchFieldPlaceholder');

            var closeLayer = document.getElementById('closeSearchLayer');

            // DOM building element
            var $backArrow = $('<button>', {
                type: 'button', // mandatory, the form will not trigger this button when 'enter' key is press
                class: 'lr-icon lr-icon-back-arrow',
                style: 'display:none',
                title: 'Fermer'
            }).on('click', function() { me.closeSearch(); }).insertBefore(me.$input);

            // PRIVATE METHODS
           
            // toggles the header eraseSearchButton display when search input is empty or full
            $('#headerSearchField').on('input', function (_ref) {
                var target = _ref.target;
                target.value.length > 0 ? $("#eraseSearchButton").show() : $("#eraseSearchButton").hide();
            });
          
            var closeAutocomplete = function () {
                $autocompleteList.hide();
                resetResult();
            };
            var deploySearch = function () {
                showMaskOverlay();
                me.openSearch();
                $featureContainer.slideDown();
                if (page.isEnabledSearchHistory && me.history === undefined)
                    me.history = new global.UiSearchHistory(
                        page,
                        'UiSearchHistory',
                        me
                    );
                me.$container.trigger('search.focus');
                me.isOpen = true;
            };
            var eraseSearch = function () {
                me.$input.val('');
                hideEraseSearchButton();
                me.$input.focus();
                closeAutocomplete();

                $autocompleteList.prev('.result-title').remove();
            };
            var getFormattedSearch = function (string) {
                //Replace '.' with space only if text is not a number, else remove
                if (isNaN(string)) {
                    return Utils.Common.RemoveAccents(
                        string
                            .replace(/\./g, ' ')
                            .replace(/[/+!”£$%*&^‘.|:"]/g, ' ')
                            .replace(/\s\s+/g, ' ')
                    );
                } else {
                    return Utils.Common.RemoveAccents(
                        string
                            .replace(/\./g, '')
                            .replace(/[/+!”£$%*&^‘.|:"]/g, ' ')
                            .replace(/\s\s+/g, ' ')
                    );
                }
            };
            var generateDOMforTab = function() {
                var firstTargetDiv = document.querySelector('#headerSearch .lr-icon-back-arrow');
                var firstDiv = document.createElement('div');
                firstDiv.setAttribute('tabindex', 0);
                firstDiv.id = 'tabIndexFirst';
                firstTargetDiv.parentNode.insertBefore(firstDiv, firstTargetDiv.previousSibling);

                var lastTargetDiv = document.querySelector('.block-search-sr-close');
                var lastDiv = document.createElement('div');
                lastDiv.setAttribute('tabindex', 0);
                lastDiv.id = 'tabIndexLast';
                lastTargetDiv.parentNode.insertBefore(lastDiv, lastTargetDiv.nextSibling);
            };
            var gotoNextResult = function () {
                me.positionCounter += 1;

                var identifier = me.context === 'suggestions' ? '#autocompleteList' : '#searchHistory';
                var $nextResult = $(identifier).find(".result[data-position='" + me.positionCounter + "']");

                if ($nextResult.length > 0) {
                    selectResult($nextResult);
                    me.$input.val($nextResult[0].innerText);
                } else {
                    me.positionCounter -= 1;
                }
            };
            var gotoPreviousResult = function () {
                me.positionCounter -= 1;

                var identifier = me.context === 'suggestions' ? '#autocompleteList' : '#searchHistory';
                var $previousResult = $(identifier).find(".result[data-position='" + me.positionCounter + "']");

                if ($previousResult.length > 0) {
                    selectResult($previousResult);
                    me.$input.val($previousResult[0].innerText);
                } else {
                    resetResult();
                }
            };
            var hideEraseSearchButton = function () {
                $eraseSearchButton.hide();
            };
            var hideMaskOverlay = function () {
                overlay.classList.remove('for-search');
            };
            var openAutocomplete = function () {
                $autocompleteList.slideDown(300);
                $autocompleteList.prev('.result-title').show();
                model.$eventContainer.trigger('search.open.autocomplete');
            };
            var redirectToSearchPage = function (value, event, hash) {
                me.$container.trigger('search.validate');

                var coreFunction = function () {
                    if (value !== '') {
                        var virtualSite = '';
                        var $virtualSite = $('#idVirtualSite');
                        if ($virtualSite.length > 0) virtualSite = '&virtualsite=' + $virtualSite.val();

                        var locationValue = '/psrch/psrch.aspx?kwrd=' + encodeURIComponent(value) + virtualSite;
                        if (hash) locationValue += '#' + hash;
                        window.location = locationValue;

                        hideMaskOverlay();
                        $('#headerSearchButton').feedback('add');
                        Utils.Common.stopNoScroll();
                    } else {
                        // If there is no value in search box, we deploy the search layer and add focus in field
                        me.$input.trigger('focus');
                    }

                    // Keep this line at the end of method for "search" button to work correctly on iOS devices
                    if (event !== undefined) event.preventDefault();
                };
                coreFunction();
            };
            var resetResult = function () {
                me.positionCounter = 0;
                unselectResults();
            };
            var selectResult = function ($result) {
                unselectResults();
                $result.addClass('hovered');
            };
            var showEraseSearchButton = function () {
                $eraseSearchButton.show();
            };
            var showMaskOverlay = function () {
                if (!overlay.classList.contains('for-search')) overlay.classList.add('for-search');
            };
            var unselectResults = function () {
                $featureContainer.find('button.result[data-position]').removeClass('hovered');
            };
            var hideAutocompleteList = function () {
                $featureContainer.find('div').each(function () {
                    $(this).hide();
                    $(this).prev('.result-title').hide();
                });
            };
            var toggleOpenClass = function (arrayOfClassSelector, action) {
                var addClass = action == 'add';

                arrayOfClassSelector.forEach(function (classSelector) {
                    toggleClass(classSelector, 'open', addClass);                    
                });
            };
            var toggleClass = function (classSelector, className, force) {
                [].forEach.call(
                    document.getElementsByClassName(classSelector), 
                    function(element, _index) {
                        element.classList.toggle(className, force);
                    }
                );
            };

            var updateAutoComplete = function () {
                var keywordOk = true;
                var suggestionOk = true;
                if (searchText.length >= autocompleteMinLength) {
                    autocompleteTimer = setTimeout(function () {
                        $.ajax({
                            url:
                                '/producthelper/getsearchsuggestionsv2?searchterm=' +
                                encodeURI(searchText).replaceAll('&', '%26') +
                                '&noOfResults=' +
                                me.maxSearchSuggestions,
                            type: 'GET',
                            cache: false,
                            success: function (data) {
                                var dataSuggestions = data.Suggestions;

                                var resultPosition = 1;
                                var canDisplaySearchResults = function () {
                                    return (searchText.length >= autocompleteMinLength && results.length > 0);
                                };

                                if (dataSuggestions !== undefined) {
                                    // Remove previous content
                                    $autocompleteList.empty();
                                    $autocompleteList.removeClass('autocompleteList--twocolumns');
                                    var $checkTitle = $autocompleteList.prev('.result-title.block-search-suggestion-title');
                                    if ($checkTitle) $checkTitle.remove();

                                    // Generate results
                                    var results = dataSuggestions.Labels;
                                    if (canDisplaySearchResults()) {
                                        // Add title of the block
                                        $autocompleteList.before(
                                            $('<div>')
                                                .addClass('result-title block-search-suggestion-title')
                                                .html(
                                                    $('<div />')
                                                        .html(dataSuggestions.ZoneTitle)
                                                        .attr('data-cerberus', 'area_searchEngine_wordSuggestion1')
                                                )
                                        );

                                        if (results.length > 5) $autocompleteList.addClass('autocompleteList--twocolumns');

                                        // Add each result for keyword suggestion
                                        for (var i = 0; i < results.length && i < me.maxSearchSuggestions; i++) {
                                            $autocompleteList.append(
                                                $('<button type="button">')
                                                    .addClass('block-search-suggestion-result result autocomplete-result')
                                                    .attr('data-position', resultPosition)
                                                    .html('<span class="block-search-suggestion-result-selector">' + $('<div />').html(results[i]).text() + '</button>')
                                                    .attr('data-cerberus', 'area_searchEngine_wordSuggestion' + (i + 1))
                                                    .on('mouseleave', function () { $(this).removeClass('hovered'); })
                                            );
                                            resultPosition++;
                                        }
                                    } else {
                                        keywordOk = false;
                                    }
                                }

                                if (!keywordOk && !suggestionOk) {
                                    hideMaskOverlay(0);
                                } else {
                                    openAutocomplete();
                                    showMaskOverlay();
                                }
                            },
                            error: function () {
                                console.error('Search error: search service returned an error or unavailable.');
                            }
                        });
                    }, 300);
                } else {
                    hideAutocompleteList();
                }
            };

            var changePlaceholder = function () {
                if (me.$header.hasClass('search-open')) {
                    prevPlaceholderIndex++;
                    if (prevPlaceholderIndex > me.placeholder.length - 1) prevPlaceholderIndex = 0;
                    placeholderIndex = prevPlaceholderIndex+1;
                    if (placeholderIndex > me.placeholder.length - 1) placeholderIndex = 0;
                    nextPlaceholderIndex = placeholderIndex+1;
                    if (nextPlaceholderIndex > me.placeholder.length - 1) nextPlaceholderIndex = 0;
                    me.$inputPlaceholder.html("".concat(tryTextPlaceholder, " ").concat("<span class='bold rolltext'>" + me.placeholder[prevPlaceholderIndex] + "<br/>" + me.placeholder[placeholderIndex] + "<br/>" + me.placeholder[nextPlaceholderIndex] + "</span>"));
                    
                    $(me.$inputPlaceholder.find('.rolltext')).off('animationend').on('animationend', function () {
                        changePlaceholder();
                    });
                }
            };

            var timerForPlaceholder;

            var handleKeypress = function(event) {
                var hasChanged = inputVal !== me.$input.val();
                inputVal = me.$input.val();

                if (event.keyCode === 13 || event.key === 'Enter') {
                    event.preventDefault();

                    // If enter or return key
                    if (hasAutocomplete && me.positionCounter > 0) {
                        var $result = me.$container.find('.hovered');

                        if ($result.hasClass('resultSuggestion')) {
                            suggestionAction($result);
                            window.location.href = $result.find('a').attr('href');
                            $('#headerSearchButton').feedback('add');
                        } else {
                            suggestionResultAction($result);
                            me.searchBySuggestion($result, 'autocomplete', true);
                        }
                    } else {
                        var searchValue = getFormattedSearch(inputVal);

                        model.$eventContainer.trigger(SHOPPING_TOOL_USED, [
                            {
                                type: 'SEARCH',
                                subType: 'Internal',
                                extraData: [0, 'internal'],
                                keyword: searchValue,
                                searchInfo: model.get_searchInfo(searchValue)
                            }
                        ]);
                        redirectToSearchPage(searchValue, event);
                    }
                    hideMaskOverlay();
                } else if (event.keyCode === directionalKeycodes.bottom || event.keyCode === 40) {
                    gotoNextResult();
                } else if (event.keyCode === directionalKeycodes.top || event.keyCode === 38) {
                    gotoPreviousResult();
                } else if (hasChanged) {
                    if (hasAutocomplete) {
                        searchText = inputVal.replace(/\./g, '');
                        if (autocompleteTimer !== undefined) clearTimeout(autocompleteTimer);
                        updateAutoComplete();
                    }
                    if (me.history !== undefined) inputVal.length > 2 ? me.history.closeSearchHistory() : me.history.openSearchHistory();
                    inputVal.length >= 1 ? showEraseSearchButton() : hideEraseSearchButton();
                }
            };

            // Public methods
            me.openSearch = function () {
                clearInterval(timerForPlaceholder);
                me.$input.attr('placeholder', "");
                if (!me.$input.val()) {
                    me.$inputPlaceholder.show();
                }

                $('#headerBanner').hide();
                me.$header.addClass('search-open');
                $backArrow.show();

                if ($('#idVirtualSite').val() === '100') {
                    me.$inputPlaceholder.html("".concat(tryTextPlaceholder, " ").concat("<span class='bold'>" + me.placeholder[placeholderIndex] + "</span>"));
                    setTimeout(function () { changePlaceholder(); }, placeholderChangeSpeed);
                }

                Utils.Common.startNoScroll();

                /* Accessiblity */
                closeLayer.setAttribute('tabindex', '0');
                generateDOMforTab();
                
                /* Accessibility: close search when skipping the last item of the search  */
                var tabIndexLast = document.getElementById('tabIndexLast');

                if(tabIndexLast) {
                    tabIndexLast.addEventListener('focus', function() {
                        me.closeSearch();
                    });
                }
                
                /* Accessibility: close search when skipping back to first item of the search  */
                var tabIndexFirst = document.getElementById('tabIndexFirst');

                if(tabIndexFirst) {
                    tabIndexFirst.addEventListener('focus', function() {
                        me.closeSearch();
                    });
                }
            };

            me.closeSearch = function () {
                hideMaskOverlay();
                me.$input.blur();
                $featureContainer.hide();
                me.$container.trigger('search.close');
                me.isOpen = false;
                searchText = '';

                clearInterval(timerForPlaceholder);
                me.$input.attr('placeholder', defaultPlaceholder);

                me.$inputPlaceholder.hide();

                /* Accessibility: close search when skipping the last item of the search  */
                var tabIndexLast = document.getElementById('tabIndexLast');

                if(tabIndexLast) document.getElementById('tabIndexLast').remove();

                /* Accessibility: close search when skipping back to first item of the search  */
                var tabIndexFirst = document.getElementById('tabIndexFirst');
                if(tabIndexFirst) document.getElementById('tabIndexFirst').remove();
                $('#headerBanner').show();
            };

            me.searchBySuggestion = function ($suggest, type, forceSearchPage) {
                var me = this;
                var keywordSelectedClass = 'keyword-selected';
                var suggestion = getFormattedSearch($suggest.text());
                $featureContainer
                    .find('.' + keywordSelectedClass)
                    .removeClass(keywordSelectedClass);
                $suggest.addClass(keywordSelectedClass);
                me.$input.val(suggestion);
                setTimeout(function () {
                    var additionalHash = '';
                    if (type === 'autocomplete') {
                        Utils.StorageManager.CreateStorageValue('OmnitureEntry_Autocomplete', '1');
                    } else if (type === 'history') {
                        Utils.StorageManager.CreateStorageValue('OmnitureEntry_Autocomplete_SearchHistory', '1');
                        additionalHash = '&shoppingtool=search';
                    }
                    redirectToSearchPage(suggestion, $.noop(), 'headerSearchContainer' + additionalHash, forceSearchPage);
                }, 200);
            };

            // Events
            $eraseSearchButton.on('click', function () {
                eraseSearch();
                me.$inputPlaceholder.show();
            });

            me.$input
                .on('focus', function (event) {
                    event.preventDefault();
                    
                    if (!me.isOpen) deploySearch();
                })
                .on('keyup', function(event) {
                    handleKeypress(event);
                    me.$inputPlaceholder.hide();

                    if (!me.$input.val()) {
                        me.$inputPlaceholder.show();
                    }

                    var keycode = event.keyCode || event.which;

                    //Backspace or Delete button respectively
                    if ((keycode === 8 || keycode === 46)) {
                        if (me.$input.val() === '') {
                            deploySearch();
                        }
                    }
                });

            me.$inputPlaceholder.on('click', function () {
                me.$input.focus();
            });

            var suggestionAction = function ($item) {
                model.$eventContainer.trigger(SHOPPING_TOOL_USED, [
                    {
                        type: 'SEARCH',
                        subType: 'Internal',
                        extraData: [
                            parseInt($item.data('position')) - $('.resultSuggestion').length, 'cat-autocompletion'
                        ],
                        keyword: $item.text(),
                        searchInfo: model.get_searchInfo($item.text(), 'autocomplete_category_input'),
                        isCatSearch: true
                    }
                ]);
                Utils.StorageManager.CreateStorageValue('OmnitureEntry_Autocomplete_Category', '1');
            };

            var suggestionResultAction = function ($item) {
                model.$eventContainer.trigger(SHOPPING_TOOL_USED, [
                    {
                        type: 'SEARCH',
                        subType: 'Internal',
                        extraData: [
                            $item.data('position'),
                            'keyword-autocompletion'
                        ],
                        keyword: $item.text(),
                        searchInfo: model.get_searchInfo(
                            $item.text(),
                            'autocomplete_keyword_input'
                        )
                    }
                ]);
            };

            // Search with keyword suggestions
            if ($autocompleteList.length > 0) {
                $autocompleteList
                    .on('click', '.result', function () {
                        suggestionResultAction($(this));
                        me.searchBySuggestion($(this), 'autocomplete');
                    })
                    .on('mouseover', '.autocomplete-result', function () {
                        resetResult();
                        me.positionCounter = parseInt($(this).data('position'));
                        selectResult($(this));
                    });
            }

            overlay.addEventListener('click', function () {
                if (me.isOpen) {
                    me.closeSearch();
                }
            });

            /* Accessibility: close search with esc key */
            document.onkeydown = function (evt) {
                evt = evt || window.event;
                var isEscape = false;
                isEscape = "key" in evt ? (evt.key === "Escape" || evt.key === "Esc"): isEscape = (evt.keyCode === 27);
                if (isEscape && me.isOpen) me.closeSearch();
            };

            /* Accessibility: close search with close icon hidden by default, visible with keyboard focus */
            closeLayer.addEventListener('click', function() {
                if (me.isOpen) me.closeSearch();
            });

            model.$eventContainer.on('menu.open', function () {
                closeAutocomplete();
                hideMaskOverlay();
                Utils.Common.stopNoScroll();
            });

            $('.block-search-validate').on('click', function () {
                var $input = me.$input;
                if ($.contains($('#corePage').get(0), $(this).get(0))) {
                    $input = $inputError;
                }

                var searchValue = getFormattedSearch($input.val());

                model.$eventContainer.trigger(SHOPPING_TOOL_USED, [
                    {
                        type: 'SEARCH',
                        subType: 'Internal',
                        extraData: [0, 'internal'],
                        keyword: searchValue,
                        searchInfo: model.get_searchInfo(searchValue)
                    }
                ]);
                redirectToSearchPage(searchValue, $.noop(), '', true);
            });

            me.$container.on('search.close', function () {
                $backArrow.hide();
                me.$header.removeClass('search-open');

                Utils.Common.stopNoScroll();

                me.$input[0].placeholder = defaultPlaceholder;
                me.$inputPlaceholder.hide();
            });

            page.Model.$eventContainer.on(
                'global.shoppingTool.used',
                function () {
                    if(!me.isOpen) return;
                    toggleOpenClass(
                        [
                            'header-sticky-container',
                            'block-search',
                            'lr-container.header-container'
                        ],
                        'remove'
                    );

                    $backArrow.hide();

                    me.closeSearch();

                    me.$input[0].placeholder = defaultPlaceholder;
                }
            );

            // Init
            hasAutocomplete = $autocompleteList.length;

            if (me.$input.val().length >= 1) {
                inputVal = me.$input.val();
                showEraseSearchButton();
            }
        }
    });
})(window, jQuery);
;
(function (global, $) {
    'use strict';

    global.SocialProfileReach5 = global.UiBloc.extend({
        init: function (page, name) {
            var me = this;
            me._super(page, name);

            /** dom **/
            me.$containerSocialLogin = $('.social-login-container');
            var $unlinkSocialBtn = $('.btn-social-unlink');
            var $inputPassword = $('#inputPassword');
            var $containerLogin = $('.container-login');
            var $body = $('body');
            var $iconProfil = $('#headerAccount');
            // Private properties
            var LABELS_COMMON = global.labels['MobileV3_Common'];
            var loginPath = '/login/login' + global._LaRedoute.urlSuffixe;
            var socialProfileLoadedDataName = 'socialProfileLoaded';
            var fadeOutDuration = 400;
            var initDate = new Date();
            var initTimestamp = initDate.getTime();
            var maxLoadingAttempts = page.siteId === '12' ? 10 : 2;
            var maxWaitingTime = 30000;
            var maxAuthenticationWaitingTime = 10000;

            if (!global.reach5) {
                global.checkIfReach5LoadedAttempts = global.checkIfReach5LoadedAttempts || 0;
                var checkIfReach5Loaded = setInterval(function () {
                    if (global.checkIfReach5LoadedAttempts >= maxLoadingAttempts) {
                        showError();
                        clearInterval(checkIfReach5Loaded);
                    }
                    if (global.reach5) {
                        _page.Blocs.SocialLogin = new global[name](page, name);
                        clearInterval(checkIfReach5Loaded);
                    }
                    global.checkIfReach5LoadedAttempts = global.checkIfReach5LoadedAttempts + 1;
                }, 1000);
                return;
            }


            // Public properties
            me.isAuthenticating = false;

            if (global.location.hash.indexOf('token') > -1 && global.location.href.indexOf("login") === -1) {
                $iconProfil.feedback('add');
                $body.addLoading();
            }

            if ($(document).data(socialProfileLoadedDataName)) {
                return this;
            }

            $(document).data(socialProfileLoadedDataName, true);

            // Private methods
            function isLoadingTooSlow() {
                var date = new Date();
                var currentTimestamp = date.getTime();

                if (currentTimestamp - initTimestamp > maxWaitingTime) {
                    return true;
                }

                return false;
            }

            function destroy() {
                me.$containerSocialLogin.removeLoading();
                $body.removeLoading();
            }

            function showAlert() {
                var $socialLoginSnackbar = $("#socialLoginSnackbar");
                if ($socialLoginSnackbar.length === 0) {
                    $("<div>", {
                        id: "socialLoginSnackbar",
                        class: "snackbar snackbar--warning"
                    })
                        .appendTo("body")
                        .append("<div>" + LABELS_COMMON['SocialLoginTooSlow'] + "</div>")
                        .snackbar({
                            timeout: 10000
                        });
                    $("#socialLoginSnackbar").snackbar("open");
                } else {
                    $socialLoginSnackbar.snackbar("open");
                }
            }

            function showServiceDownError() {
                var overlayId = "socialLoginOverlay";
                var overlaySelector = "#" + overlayId;
                if ($(overlaySelector).length === 0) {
                    $("<div>", {
                        id: overlayId,
                        class: "social-login-overlay",
                        text: LABELS_COMMON["ServiceDown"]
                    }).appendTo(me.$containerSocialLogin);
                }
                $(overlaySelector).show();
            }

            function showError() {
                destroy();
                showServiceDownError();
            }

            var bindReach5AuthEvent = function () {
                var deferred = $.Deferred();

                global.reach5('on', 'authenticated', function (authResult) {
                    me.isAuthenticating = true;
                    $containerLogin.addLoading();

                    var destructionTimeout = setTimeout(function () {
                        if (loginCustomerXhr) {
                            loginCustomerXhr.abort();
                        }
                        $containerLogin.removeLoading();
                        $iconProfil.feedback('remove');
                        $body.removeLoading();
                        showAlert();
                    }, maxAuthenticationWaitingTime);

                    if (authResult.accessToken !== 'undefined') {
                        var reqParams = {
                            request: {
                                Reach5Token: authResult.idToken,
                                hash: authResult.state
                            }
                        };
                        var args = JSON.stringify(reqParams);
                        var loginCustomerXhr = $.ajax({
                            url: '/customerservices/logincustomer',
                            async: true,
                            cache: false,
                            type: "POST",
                            headers: {
                                "cache-control": "no-cache"
                            },
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            data: args,
                            success: function (data) {
                                if (data.RedirectUrl) {
                                    global.location.href = data.RedirectUrl;
                                    deferred.resolve(data);
                                    return;
                                } else {
                                    if (data.Email && data.Reach5Token) {
                                        me.Page.Blocs.UiSocialAccountLinking.displayLinkingLoginForm(data, loginPath);
                                        deferred.resolve(data);
                                    } else {
                                        global.location.reload();
                                    }
                                }
                            },
                            error: function (xhr) {
                                deferred.reject(xhr);
                                me.$containerSocialLogin.removeLoading();
                            },
                            complete: function () {
                                clearTimeout(destructionTimeout);
                            }
                        });
                    }
                });
                return deferred.promise();
            };

            var removeProviderAssociation = function ($this) {
                var provider = $this.data('provider');
                var serviceUrl = '/customerservices/RemoveCustomerSocialProvider?provider=' + provider;
                var antiForgeryToken = $("#antiForgeryToken").val();
                return $.ajax({
                    url: serviceUrl,
                    async: true,
                    cache: false,
                    type: "GET",
                    headers: {
                        "cache-control": "no-cache",
                        'RequestVerificationToken': antiForgeryToken
                    },
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) {
                        if (data.IsSuccess) {
                            setTimeout(function () {
                                $this.fadeOut(fadeOutDuration, function () {
                                    $(this).after('<div class="flex info-unlink-social"><i class="icon icon-check-ok"></i>' + LABELS_COMMON['SocialLoginUnbinding'].replace('{provider}', provider) + '</div>').remove();
                                });
                                setTimeout(function () {
                                    $('.info-unlink-social').fadeOut(fadeOutDuration, function () {
                                        $('.container-remove-social-' + provider).slideUp();
                                    });
                                    if ($('.btn-social-unlink').length === 0) {
                                        $('.titleHasSocialProfiles').fadeOut(fadeOutDuration, function () {
                                            $('.titleNoSocialProfiles').show();
                                        });
                                    }
                                }, 3000);
                            }, 400);


                        } else {
                            $('.error-unlink').show();
                        }
                    },
                    complete: function () {
                        me.$containerSocialLogin.removeLoading();
                    }
                });
            };

            /*
            var getUpdatedProviderAssociations = function () {
                return $.ajax({
                    url: '/customerservices/GetCustomerSocialProfiles',
                    async: true,
                    cache: false,
                    type: "GET",
                    headers: {"cache-control": "no-cache"},
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    complete: function () {
                        me.$containerSocialLogin.removeLoading();
                    }
                });
            };
            */

            // Public methods

            // Events
            $('#textBox_loginPage_alreadyCustomer_password').on('focus blur', function () {
                if ($('.btn-social-validate-login').length > 0) {
                    $('.block-error').remove();
                    $inputPassword.removeClass('has-feedback has-error').find('i').removeClass('icon-remove');
                }
            });
            global.reach5('on', 'ready', function () {
                $(document).on('click', '.btn-social-login', function () {
                    var $self = $(this);
                    var providerData = $self.data('provider');
                    var originData = $self.closest('.social-login-providers').data('origin');
                    var omnitureEvar51LocalStorageName = 'OmnitureEntry_SocialLogin_eVar51';
                    //54895: Adding social login buttons to eVar51
                    global.Utils.StorageManager.EraseStorageValue(omnitureEvar51LocalStorageName, true);
                    var socialProvider = providerData.charAt(0).toUpperCase();
                    socialProvider = socialProvider + providerData.slice(1).toLowerCase();
                    global.Utils.StorageManager.CreateStorageValue(omnitureEvar51LocalStorageName, 'Login:' + socialProvider);
                    //54895: Adding social login buttons to eVar51

                    localStorage.setItem('connectWithoutSocialLogin', false);
                    var hashBeforeLogin = global.location.hash;
                    global.reach5('loginWithSocialProvider', providerData, {
                        scope: 'profile email phone openid address',
                        state: encodeURIComponent(hashBeforeLogin),
                        origin: originData
                    });
                });

                if (Utils.UrlManager.GetHashValue('basketToLogin') === 'true') {
                    var data = {
                        Email: Utils.UrlManager.GetHashValue('email'),
                        Reach5Token: Utils.UrlManager.GetHashValue('token')
                    };
                    me.Page.Blocs.UiSocialAccountLinking.displayLinkingLoginForm(data);
                }
                me.$containerSocialLogin.removeLoading();
                bindReach5AuthEvent();
            });

            $unlinkSocialBtn.on('click', function () {
                var $self = $(this);
                $self.feedback('add');
                removeProviderAssociation($self);
            });

            // Init
            setTimeout(function () {
                /**
                 * If $containerSocialLogin still has loading class, it means
                 * reach5 is not loaded yet. So it took too long to load. Then,
                 * we destroy the social login buttons and show a message to the
                 * customer.
                 */
                if (me.$containerSocialLogin.hasClass("loading") && isLoadingTooSlow() && !me.isAuthenticating) {
                    showError();
                }
            }, maxWaitingTime);
        }
    });
})(window, jQuery);
;
var omnitureSessionVarsToClear = [];

var _OmnitureTracking = (function (window, $, undefined) {

    return {

        finaliseTracking: function () {
            this.handleShoppingTool();
            this.handleOpeco();
            this.handleCheckoutHistoryTracking();
            this.checkSiteSectionVariables();
            this.setEvar31AndProp31();
            this.setEvent51();
            this.setEvent76();
            this.setEvar19();
            this.setProp28();
            this.setEvar97();

            if (Utils.UrlManager.GetHashValue("mrslink") != null) {
                window.wa_data.prop24 = Utils.UrlManager.GetHashValue("mrslink");
            }

            //-- Event 32 --//
            var fbc = Utils.UrlManager.GetHashValue("fbc");

            //-- Remove fbc hash unless for connect account (and therefore hash is still required)
            if (fbc && fbc != "connectAccount")
                Utils.UrlManager.RemoveHashValue("fbc");

            if (fbc == "loggedInAccount") {
                window.wa_data.eVar51 = "Creation Account";
            } else if (fbc == "registeredAccount") {
                window.wa_data.eVar51 = "Login Account";
            }

            var eVar51Val = Utils.StorageManager.ReadStorageValue("OmnitureEntry_SocialLogin_eVar51");

            window.wa_data.eVar51 = '';
            window.wa_data.prop51 = '';

            //56563
            if (eVar51Val != null && eVar51Val != '' && window.wa_data.pageName.indexOf('Fiche Produit') < 0) {
                if (document.referrer.indexOf('register') > 0) {
                    var events = window.wa_data.events.split(',');

                    $.each(events, function (i, val) {
                        if (val == 'event1') {
                            window.wa_data.eVar51 = 'Account Creation ' + eVar51Val.split(':')[1];
                            window.wa_data.prop51 = 'Account Creation ' + eVar51Val.split(':')[1];
                            return false;
                        }
                    });
                }
                else if (document.referrer.indexOf('login') > 0
                    && window.wa_data.pageName.indexOf('register') < 0) {
                    var events = window.wa_data.events.split(',');

                    $.each(events, function (i, val) {
                        if (val == 'event1') {
                            window.wa_data.eVar51 = eVar51Val.replace(':', ' ');
                            window.wa_data.prop51 = eVar51Val.replace(':', ' ');
                            return false;
                        }
                    });
                }
            }
            else if (document.referrer.indexOf('register') > 0
                && window.wa_data.pageName.indexOf('register') > 0) {
                window.wa_data.eVar51 = 'Account Creation Navigation';
                window.wa_data.prop51 = 'Account Creation Navigation';
            }
            else if (document.referrer.indexOf('login') > 0
                && window.wa_data.pageName.indexOf('register') < 0
                && document.referrer.indexOf('login=checkout') < 0
                && window.wa_data.length > 0) {
                var events = window.wa_data.events.split(',');

                $.each(events, function (i, val) {
                    if (val == 'event1') {
                        window.wa_data.eVar51 = 'Login Navigation';
                        window.wa_data.prop51 = 'Login Navigation';
                        return false;
                    }
                });
            }
            else if (document.referrer.indexOf('register') > 0
                && window.wa_data.pageName.indexOf('Fiche Produit') > 0) {
                var events = window.wa_data.events.split(',');
                $.each(events, function (i, val) {
                    if (val == 'event1') {
                        window.wa_data.eVar51 = 'Creation Wishlist PDP';
                        window.wa_data.prop51 = 'Creation Wishlist PDP';
                        return false;
                    }
                });
            }
            else if (document.referrer.indexOf('login') > 0
                && window.wa_data.pageName.indexOf('Fiche Produit') > 0) {
                window.wa_data.eVar51 = 'Login Wishlist PDP';
                window.wa_data.prop51 = 'Login Wishlist PDP';
            }
            //56563

            //56563
            if (document.referrer.indexOf('basketregister') > 0
                && window.wa_data.pageName.indexOf('Choix du mode de livraison') > 0) {
                window.wa_data.eVar51 = 'Account Creation Basket';
                window.wa_data.prop51 = 'Account Creation Basket';
            }

            //56563
            for (var i = 0; i < omnitureSessionVarsToClear.length; i++) {
                Utils.StorageManager.EraseStorageValue(omnitureSessionVarsToClear[i]);
            }
        },
        finaliseTrackingForDirectCall: function () {
            // Update data layer with customer info (and so avoid to keep the data from cache)
            if (pageType == PageTypeEnum.ListPage
                || pageType == PageTypeEnum.SearchPage
                || pageType == PageTypeEnum.SerpPage
                || pageType == PageTypeEnum.ListPageBrand
                || pageType == PageTypeEnum.ListPageComparator) {
                window.wa_data.eVar27 = window.wa_data_backup.eVar27;
                window.wa_data.eVar33 = window.wa_data_backup.eVar33;
                window.wa_data.eVar69 = window.wa_data_backup.eVar69;
                delete window.wa_data.prop12;
                delete window.wa_data.eVar12;
            }

            this.checkSiteSectionVariables();
            this.setEvar19();

            /* var quickZoomShoppingTool = Utils.CookieManager.ReadCookie("quickzoomshoppingtool");

            if (pageType == PageTypeEnum.MyRedouteLightBox) {
                if (typeof quickZoomShoppingTool != "undefined")
                    window.wa_data.eVar12 = window.wa_data.prop12 = quickZoomShoppingTool;
            } */
        },
        checkSiteSectionVariables: function () {
            if (Utils.Common.isLocalStorageEnabled()) {
                //-- Feature #14177: Mobile First website entry --//
                if (!Utils.StorageManager.ReadStorageValue("FirstEntry")) {
                    //-- Entry page? --//
                    Utils.OmnitureManager.addEvents("event18");

                    Utils.StorageManager.CreateStorageValue("FirstEntry", true);
                }
            }
        },
        handleShoppingTool: function () {
            if (Utils.UrlManager.GetHashValue("shoppingtool") != null) {
                Utils.CookieManager.CreateCookie("mainshoppingtool", Utils.UrlManager.GetHashValue("shoppingtool"));
            }
            else if (window.wa_data.prop12 != undefined) {
                Utils.CookieManager.CreateCookie("mainshoppingtool", window.wa_data.prop12);
            }

            if (pageType == PageTypeEnum.LandingPage
                || pageType == PageTypeEnum.ListPage
                || pageType == PageTypeEnum.ListPageBrand
                || pageType == PageTypeEnum.SearchPage
                || pageType == PageTypeEnum.SerpPage
                || pageType == PageTypeEnum.ProductPage
                || pageType == PageTypeEnum.MultiProductPage
                || pageType == PageTypeEnum.AddToCartLayer
                || pageType == PageTypeEnum.WishList
                || pageType == PageTypeEnum.StaticPage
                || pageType == PageTypeEnum.ErrorPage) {

                if (Utils.UrlManager.GetHashValue("opeco") != null) {
                    window.wa_data.prop12 = "internalcampaign";
                    if (Utils.UrlManager.GetHashValue("opeco") == "selection_hp") {
                        window.wa_data.prop12 = "selection_hp";
                        window.wa_data.eVar12 = window.wa_data.prop12;
                    }
                } else if (Utils.UrlManager.GetHashValue("shoppingtool") != null) {
                    window.wa_data.prop12 = Utils.UrlManager.GetHashValue("shoppingtool");
                }
                else if (Utils.CookieManager.ReadCookie("mainshoppingtool")) {
                    window.wa_data.prop12 = Utils.CookieManager.ReadCookie("mainshoppingtool");
                }

                if (pageType == PageTypeEnum.ProductPage
                    && window.wa_data.prop12 != undefined
                    && (window.wa_data.prop12 == Utils.UrlManager.GetHashValue("shoppingtool") ||
                        window.wa_data.prop12 == Utils.CookieManager.ReadCookie("mainshoppingtool"))) {
                    //-- prop12 has been setup from shoppingtool on PDP? copy its value to eVar12 --//
                    window.wa_data.eVar12 = window.wa_data.prop12;

                    //-- update eVar73 on specific cases only --//
                    if (window.wa_data.prop12 == "associatedlookpdp")
                        window.wa_data.eVar73 = "ShopTheLook";
                }

                //-- prevent setting mainshoppingtool as "undefined" --//
                if (window.wa_data.prop12 != undefined && window.wa_data.prop12 != "undefined")
                    Utils.CookieManager.CreateCookie("mainshoppingtool", window.wa_data.prop12);
            }
        },
        handleOpeco: function () {
            if (Utils.UrlManager.GetHashValue("opeco") != null) {
                window.wa_data.eVar21 = Utils.UrlManager.GetHashValue("opeco");
            }
        },
        handleCheckoutHistoryTracking: function () {
            if (pageType == PageTypeEnum.BasketPage) {
                var loyaltyAdded = Utils.StorageManager.ReadStorageValue("LoyaltyLRAndMeAdded");
                if (loyaltyAdded) {
                    window.wa_data.prop44 = "basket:added";
                    window.wa_data.eVar95 = "basket:added";
                    Utils.StorageManager.EraseStorageValue("LoyaltyLRAndMeAdded");
                }
            }
            if (pageType == PageTypeEnum.DeliveryPage) {
                clearEvar10SessionStorageEntries();
            }
            if (pageType == PageTypeEnum.PaymentPage) {
                if (window.location.href.indexOf('posttosequra') != -1) {
                    var payment = Utils.StorageManager.ReadStorageValue("OmnitureEntry_Payment_ChangesValue");
                    if (payment != null && payment.length > 0)
                        window.wa_data.pageName += ":" + payment[payment.length - 1];

                    Utils.OmnitureManager.removeEvents("event3");
                    window.wa_data.list1 = null;
                }
            }
            if (pageType == PageTypeEnum.ConfirmationOrderPage) {
                clearEvar10SessionStorageEntries();
            }
        },
        handleRecommendedProductsTracking: function (elementClicked) {
            //Is it an automatic recommandation ? If yes we fill the tracking code
            var typeofrecommendation = $(elementClicked).data("typeofrecommendation");

            //Get the current recommended product zone
            var currentRecommendedZone = $(elementClicked).closest("[data-internalname]").data("internalname")
            //Omniture Tracking
            if (currentRecommendedZone != "") {
                var value = "";
                switch (currentRecommendedZone) {
                    case "ProductPageUpSell":
                        value = "SmartRecosPdpBottom";
                        break;
                    case "AddToBasketLayer":
                        value = "SmartRecosAddToBasket";
                        break;
                    case "SearchPage":
                        value = "SmartRecosSearchPage";
                        break;
                    case "BasketPage":
                        value = "SmartRecosBasketPage";
                        break;
                    case "ProductPageMobile":
                        if (typeofrecommendation == "Automatic") {
                            value = "SmartRecosPdpTop";
                        } else {

                            value = "AssociatedProductsPdp";
                        }
                        break;
                    case "ProductHistory":
                        switch (contextInfo.PageType) {
                            case "HomePage":
                            case "LandingPage":
                            case "ListPage":
                            case "SearchPage":
                            case "BasketPage":
                            case "RequestCataloguePage":
                                value = "lastviewedproducts_" + contextInfo.PageType;
                                break;
                            case "ProductPage":
                                value = "lastviewedproducts_pdp";
                                break;
                            default:
                                value = "lastviewedproducts";
                        }

                        //-- #36111: Shopping tool for MRS pages --//
                        if (window.location.href.indexOf('webaccount') > -1 || window.location.href.indexOf('myaccount') > -1)
                            value = "lastviewedproducts_mrs";

                        break;
                }

                Utils.CookieManager.CreateCookie("mainshoppingtool", value, "");
            }
        },
        setEvar31AndProp31: function () {
            //-- Check if value already set on server side --//
            if (window.wa_data.prop31 && window.wa_data.prop31.length != 0)
                return;

            var resultType = "unknow";

            var brndIdParam = Utils.UrlManager.getUrlParameter("brndid");
            if (brndIdParam) {
                if (pageType == PageTypeEnum.LandingPage || pageType == PageTypeEnum.ListPageBrand || pageType == PageTypeEnum.SearchPage || pageType == PageTypeEnum.ProductPage || pageType == PageTypeEnum.MultiProductPage || pageType == PageTypeEnum.AddToCartLayer || pageType == PageTypeEnum.StaticPage || pageType == PageTypeEnum.BrandPage || pageType == PageTypeEnum.SerpPage || pageType == PageTypeEnum.MultiDimensionProductPage) {
                    window.wa_data.prop31 = window.wa_data.eVar31 = Utils.UrlManager.getUrlParameter("brndid") + "_" + Utils.UrlManager.getUrlParameter("brndid") + "_" + "brandpage" + "_" + resultType;
                }
            }

            if (pageType == PageTypeEnum.SerpPage && window.location.href.indexOf("/lndng/") > -1) // SERP Page - not first not entry
                window.wa_data.prop31 = window.wa_data.eVar31 = Utils.UrlManager.getUrlParameter("artcl") + "_" + Utils.UrlManager.getUrlParameter("artcl") + "_" + "serp" + "_" + resultType;

            //Specific Case for shopping tool. If the customer has been redirected following a search we need to send the keyword searched even if he has been redirected to a PLP
            if (typeof Utils.UrlManager.GetHashValue("kwrd") != 'undefined' && Utils.UrlManager.GetHashValue("kwrd") != null) {
                window.wa_data.prop31 = window.wa_data.eVar31 = Utils.UrlManager.GetHashValue("kwrd") + "_" + Utils.UrlManager.GetHashValue("kwrd") + "_" + "searchredirection" + "_" + resultType;
            }

            //If it comes from Flyout and it has a keywork in querystring => it's an internal redirection
            if (Utils.UrlManager.GetHashValue("shoppingtool") != null && (Utils.UrlManager.GetHashValue("shoppingtool") || "").indexOf("treestructureflyout") > -1
                && typeof Utils.UrlManager.getUrlParameter("kwrd") != 'undefined' && Utils.UrlManager.getUrlParameter("kwrd") != "") {
                window.wa_data.prop31 = window.wa_data.eVar31 = Utils.UrlManager.getUrlParameter("kwrd") + "_" + Utils.UrlManager.getUrlParameter("kwrd") + "_" + "internalredirection" + "_" + resultType;
            }

            //-- List page? --//
            if ((pageType == PageTypeEnum.ListPage || pageType == PageTypeEnum.ListPageBrand) && Utils.StorageManager.ReadStorageValue("OmnitureEntry_Autocomplete_Category") != null) {
                omnitureSessionVarsToClear.push("OmnitureEntry_Autocomplete_Category");
                var leafCategory = contextInfo.BreadCrumbDetail[contextInfo.BreadCrumbDetail.length - 1];
                window.wa_data.prop31 = window.wa_data.eVar31 = leafCategory.Name.toLowerCase() + "_" + leafCategory.Name.toLowerCase() + "_cat-autocompletion" + "_" + resultType;
            }
        },
        setEvent51: function () {
            if (window.wa_data.prop12 != undefined) {
                if (window.wa_data.prop12 == "redirmoteur") {
                    if (window.wa_data.events != undefined && window.wa_data.events != "") {
                        if (window.wa_data.events.indexOf("event51") < 0)
                            window.wa_data.events += ",event51";
                    }
                    else
                        window.wa_data.events = "event51";
                }
            }

            if (pageType == 2 && typeof window.wa_data.prop12 !== "undefined" && window.wa_data.prop12.toLowerCase() == "redirmoteur") {
                Utils.OmnitureManager.removeEvents("event51");
                Utils.OmnitureManager.addEvents("event51");
            }

            if (Utils.StorageManager.ReadStorageValue("OmnitureEntry_Autocomplete") != null
                || Utils.StorageManager.ReadStorageValue("OmnitureEntry_Autocomplete_Category") != null
            ) {
                Utils.OmnitureManager.addEvents("event51");
            }
        },
        setEvent76: function () {
            if (Utils.UrlManager.HasHash("associated")) {
                Utils.OmnitureManager.addEvents("event76");
            }
        },
        setEvar19: function () {
            //-- HP? eVar19 should not be activated --//
            if (pageType == PageTypeEnum.HomePage) {
                return;
            }

            if (typeof pageType != "undefined" && typeof virtualSite != "undefined") {
                if (Utils.CookieManager.ReadCookie("OmnitureEntry_Header_SalesArea")) {
                    window.wa_data.eVar19 = Utils.CookieManager.ReadCookie("OmnitureEntry_Header_SalesArea");
                    if (typeof s !== "undefined")
                        s.eVar19 = window.wa_data.eVar19;
                }
                else {
                    window.wa_data.eVar19 = null;
                    omnitureSessionVarsToClear.push("OmnitureEntry_Header_SalesArea");
                }
            }

            //-- clear cookie after use --//
            Utils.CookieManager.EraseCookie("OmnitureEntry_Header_SalesArea");
        },
        setProp28: function () {
            //-- accepted/rejected query parameter from UK style account on checkout? --//
            var prop28 = null;
            if (pageType == PageTypeEnum.PaymentPage) {
                if (Utils.UrlManager.getUrlParameter("accepted") != null) {
                    if (Utils.UrlManager.getUrlParameter("accepted") == 0)
                        prop28 = "accepted";
                    else if (Utils.UrlManager.getUrlParameter("accepted") == 6)
                        prop28 = "maybe";
                }
                else if (Utils.UrlManager.getUrlParameter("rejected") != null) {
                    prop28 = "rejected";
                }

                if (prop28)
                    window.wa_data.prop28 = prop28;
            }
        },
        setEvar97: function () {
            var eVar97 = Utils.StorageManager.ReadStorageValue('dotaki.segment', false);
            if (eVar97 != '') {
                window.wa_data.eVar97 = eVar97;
            }
        }
    }

})(window, jQuery);

function FinaliseTrackingForDirectCall() {
    _OmnitureTracking.finaliseTrackingForDirectCall();
}

/** FinaliseTracking call is made server side (code is common from mainsite/mobile, explaining why we cant directly modify the dll call without impacting main site aswell **/
function FinaliseTracking() {
    _OmnitureTracking.finaliseTracking();
}
;
(function(global, $) {
    'use strict';

    global.UiBreadcrumb = global.UiBloc.extend({
        init: function(page, name) {
            this._super(page, name);

            // Private properties
            var model = this.Model;

            // Public properties

            // DOM picks
            var $breadcrumb = $('.breadcrumb');

            // DOM building element

            // DOM adjustments

            // Private methods

            // Public methods

            // Events

            // Init
            $breadcrumb.find('a').each(function(i) {
                global.Utils.Common.onCustomClick($(this), function(el) {
                    model.$eventContainer.trigger(global.globalTrackingEvent.SHOPPING_TOOL_USED, [{
                        type: 'TREE',
                        subType: 'Breadcrumb',
                        extraData: [i + 1, $(el).text().trim().toLowerCase().replace(/ /g, '-')]
                    }]);
                });
            });
        }
    });
})(window, window.jQuery);;
var UiLogAs = UiBloc.extend({
    init: function(page, name) {
        this._super(page, name);
        var me = this;

        // dom picks
        this.$container = $('#log-as-container');
        this.$logout = $('#logAsLogout');

        // events
        if (this.Page.name !== Utils.Enum.PageName.BasketThankYou) {
            this.$logout.on('click', function() {
                me.logout();
            });
        } else {
            this.logout();
        }
    },
    logout: function() {
        var me = this;
        var url = '/servicelogas/logout';
        this.$container.feedback('add');
        $.ajax({
            async: false,
            cache: false,
            url: url,
            type: 'GET',
            success: function () {
                if (me.Page.name === Utils.Enum.PageName.BasketThankYou) {
                    me.$container.css('color', '#d00000');
                    setTimeout(function() {
                        me.$container.text(labels.MobileV3_Common.NowDisconnected);
                        me.$container.css('color', '#fff');
                    }, 500);
                } else {
                    window.location.href = '/';
                }
            },
            error: function (xhr) {
                console.error('AJAX on: ' + this.url + ' --- method: ' + this.type + ' --- status: ' + xhr.status + ' --- statusText: ' + xhr.statusText);
            }
        });
    }
});
;
(function (global, $) {
  'use strict';

  var namespace = 'loyalty';
  var namespaceClass = '.' + namespace;
  var toBasketClass = 'popin-lrandme-toBasket';

  var addLoyaltyLocalStorage = 'CheckAddLoyalty';

  var prop44Value = 'pdp:added';

  global.UiLoyaltyLRandME = global.UiBloc.extend({
    init: function (page, name) {
      var me = this;
      me._super(page, name);

      // Properties
      $.extend(me, JSON.parse($('#loyaltyData').text()));

      // Dom picks
      me.$container = $('#loyalty');
      me.$conditions = $(namespaceClass + '-conditions');
      me.$details = $(namespaceClass + '-details');
      me.$programTrigger = $(namespaceClass + '-popin');
      me.$addToCartBtn = $(namespaceClass + '-add-to-cart');
      me.$addToCartSuccessBtn = $(namespaceClass + '-add-to-cart-success');
      me.$buttonToBasket = $('.' + toBasketClass);
      me.$showInformationButton = $('#loyaltyConditionModal');

      // Events
      // me.show();
      if (me.Page.name === pageName.pdp) {
        me.Model.$eventContainer.on(pdpEvent.articleUpdated, function () {
          me.Model.LRandMe_isAvailable ? me.show() : me.hide();
        });
      }

      me.$addToCartBtn.on('click', function (event) {
        event.preventDefault();
        var $self = $(this);
        $self.feedback(global.Utils.Enum.Feedback.Actions.add);
        me.AddLoyaltyToCart();
      });

      me.Model.$eventContainer.on(global.globalServiceEvent.addLoyaltyToCartSucceeded, function (e, data, providerArgs) {
        if (providerArgs) {
          me.$addToCartBtn.addClass('hidden');
          me.$addToCartSuccessBtn.removeClass('hidden');
          global.Utils.StorageManager.EraseStorageValue(addLoyaltyLocalStorage);
          global.Utils.StorageManager.CreateStorageValue('LoyaltyLRAndMeAdded', true);
          if (me.Page.name === global.Utils.Enum.PageName.Basket) {
            global.location.reload();
          } else {
            if (data.IsSuccess) {
              global.wa_data.prop44 = prop44Value;
              global.wa_data.eVar95 = prop44Value;

              global._LaRedoute.updateBasketCountItem();
            }
          }
        }
      });

      me.Model.$eventContainer.on(global.globalServiceEvent.removeLoyaltyToCartSucceeded, function (e, data, providerArgs) {
        if (me.Page.name === global.Utils.Enum.PageName.Basket) {
          global.location.reload();
        }
      });

      // Init
      if (me.Page.name === pageName.pdp && me.Model.LRandMe_isAvailable !== undefined) {
        me.Model.LRandMe_isAvailable ? me.show() : me.hide();
      }

      /* Modal CGU */
      me.$showInformationButton.on('click', function () {
        $(this).modal({
          method: 'open',
          type: 'popin',
          url: '/cgu-la-redoute-et-moi.aspx',
          fullscreen: false,
          gradientOnScroll: true,
          block: '#offre'
        });
      });
    },

    AddLoyaltyToCart: function () {
      var me = this;
      var params = {};
      if (me.Page.name === global.Utils.Enum.PageName.Basket) {
        params.componant = 'basket';
      } else if (me.Page.name === global.Utils.Enum.PageName.PDP) {
        params.componant = 'pdp';
      }

      me.Model.$eventContainer.trigger(global.globalServiceEvent.addLoyaltyToCartRequested, [null, params]);
    },
    show: function () {
      this.$container.show();
    },
    hide: function () {
      this.$container.hide();
    }
  });
})(window, jQuery);
;
(function (global, $) {
    'use strict';

    global.UiProductCarousel = global.UiBloc.extend({
        init: function (page, name) {
            this._super(page, name);
            // Private properties
            var me = this;
            var model = me.Model;
            var country = me.Page.shortCountry;
            var imageFinalResolution = 'products/250by250';

            //Optimized method using list of productsIds
            function appendProducts(prouctsIds) {
                var url = window._page.appPath + '/producthelper/getproducts.aspx';

                return $.ajax({
                    type: 'POST',
                    url: url,
                    async: true,
                    cache: true,
                    contentType: 'application/json;charset=utf-8',
                    dataType: 'json',
                    processData: false,
                    data: '{"productids":"' + prouctsIds.join() + '"}',
                    success: function (data) {
                        var response = data.d;

                        if (window._page !== undefined) {
                            response = data;
                        }

                        if (response.IsSuccess) {
                            $('[data-products2]').each(function () {
                                var $self = $(this);
                                var productIds = $self.data('products2').toString().split(',');
                                var opeco = $self.data('opeco');

                                $.each(productIds, function (index, productId) {
                                    if (!isNaN(this)) {
                                        var productObj = findProductOject($.trim(productId), response.Products);
                                        if (productObj) {
                                            displaySingleProduct(productObj, $self, opeco);
                                        }
                                    }
                                });
                            });
                        }
                    },
                    error: function (xhr, status, error) {
                        throw "AJAX on :" + this.url + "; method :" + this.type + "; status :" + xhr.status + "; statusText :" + xhr.statusText + "; error :" + error;
                    },
                    complete: function (xhr, status) {
                        console.log("GetProducts Trace : " + status + "/" + xhr.status);
                        console.log(xhr);
                    }
                });
            }

            function findProductOject(id, list) {
                var ret = null;
                $.each(list, function (index, product) {
                    if (product.ProductId == id) {
                        ret = product;
                    }
                });

                return ret;
            }

            function displaySingleProduct(productObj, $wrapper, opeco) {
                var skipDiscount = $wrapper.data('skipdiscount');
                var minprice = $wrapper.data('minprice');

                var hashTag = '';

                if (opeco != undefined) {
                    hashTag += '#' + opeco;
                }

                var hrefLink = '/ppdp/prod-' + productObj.ProductId + '.aspx' + hashTag;

                var $productImageLink = $('<a />', {
                    id: productObj.ProductId,
                    href: hrefLink
                }).appendTo($wrapper).wrap('<div class="carousel-item product"></div>');

                if (productObj) {
                    if (minprice) {
                        displayProductWithMinPrice(productObj, productObj.ProductId, hrefLink);
                        return;
                    }

                    if ($wrapper.find('.product').length < 31) {
                        displayProduct(productObj, $productImageLink, skipDiscount);
                    }
                    return;
                }
                $productImageLink.closest('.product').remove();
            }

            function displayProduct(product, $productImageLink, skipDiscount) {
                var data_pc = country == 'com' ? 'data-pc="' + product.CategoryId + '"' : '';
                var priceHtml = '<span class="product-thumb-from" ' + data_pc + '">'+ product.DisplaySalePriceBefore +'</span> <span class="product-thumb-discount-percentage"> -'+ product.DiscountPercentage +'%</span> <span class="product-thumb-after"' + data_pc + '>'+ product.DisplaySalePriceAfter +'</span>';
                if (skipDiscount || (product.DisplaySalePriceBefore === product.DisplaySalePriceAfter)) priceHtml = '<span class="product-thumb-after">'+ product.DisplaySalePriceAfter +'</span>';
                $productImageLink.html('<div class="product-thumb"><div class="product-thumb-picture"><picture><img src="' + product.DefaultImage.replace('|Dimension|', imageFinalResolution) + '" class="product-thumb-image" title="" alt=""></picture> </div> <div class="product-thumb-info"> <div class="product-thumb-brand text-nowrap" title="">'+ product.Brand+'</div> <div class="product-thumb-name text-nowrap">'+ product.Title +'</div> <div class="product-thumb-price-container"> <div class="product-thumb-price">' + priceHtml +  '</div> </div> </div> </div>');
            }

            function displayProductWithMinPrice(product, productId, hrefLink) {
                var productTitle = product.Title;

                if (productTitle.length > 23) {
                    productTitle = productTitle.substr(0,23) + '...';
                }

                $('#' + productId + '').html('<a href="' + hrefLink + '"><p class="legende">'+ productTitle + '<span class="prix">'+ product.DisplaySalePriceAfter + '</span></p></a>');
            }

            function appendProductImage() {
                var productsIdsList = [];
                $('[data-products2]').each(function () {
                    var $self = $(this);
                    productsIdsList.push($self.data('products2').toString().split(','));
                });
                if(productsIdsList.length > 0) appendProducts(productsIdsList);
            };

            // Event
            model.$eventContainer.on(global.pageEvent.loaded, function () {
                appendProductImage();
            });
        }
    });
})(window, jQuery);
;
(function (global, $) {
    'use strict';
    global.EB_landingEvent = {
        serviceSucceeded: 'EB_service.succeeded',
        menuClicked: 'EB_Landing.menu.clicked'
    };
    global.UiReco = UiBloc.extend({
        init: function (page, name) {
            var me = this;
            me._super(page, name);

            // Private properties
            var page = this.Page;
            var model = page.Model;
            var context =
                contextInfo.RecoContext !== undefined
                    ? contextInfo.RecoContext
                    : 'default';
            var utilsCommon = global.Utils.Common;
            var productIds = [];
            var ebUrl = 'https://api.early-birds.fr/widget/';
            var isPersonalized = false;

            // DOM picks
            var $allReco = $('.apply-reco');

            // Private methods
            var Adobe_applyTracking = function ($reco) {
                var $links = $reco.find('.product-link:not(.adobe-tracked)');
                $links.addClass('adobe-tracked');
                utilsCommon.onCustomClick($links, function () {
                    var extraData = [
                        getPosition($reco),
                        utilsCommon.formatText(
                            $reco.find('.reco-title').text()
                        ) || 'notitle'
                    ];

                    page.Tracking.set_productOrigin({
                        type: 'RECO',
                        subType:
                            $reco.data('type') === 'histo' ? 'Histo' : 'Auto',
                        extraData: extraData
                    });
                });
            };

            var EB_applyTracking = function ($reco) {
                var $links = $reco.find(
                    '.product-link:not(.earlybirds-tracked)'
                );
                var isHisto = $reco.data('type') === 'histo';
                var recopageName =
                    model.Name === 'ModelPLP' ? model.pageType : model.pageName;
                $links.addClass('earlybirds-tracked');
                $links.on('click', function () {
                    //-- Tealium tracking purposes --//
                    var productId = $(this).data('productid').toString();
                    var widgetId = $reco.data('widget').replace(/\s/g, '');
                    var recoId = $reco.data('callApiId');
                    var index = $(this).closest('.product[data-index]').attr('data-index');

                    $.ajax({
                        async: true,
                        cache: false,
                        type: 'GET',
                        contentType: 'application/json; charset=utf-8',
                        url: '/servicegeneric/triggertealiumclickonreco?productid=' + productId + '&widgetId=' + widgetId + '&recoId=' + recoId+ '&positionClicked=' + index + '&isSyte=' + 'false',
                        success: function () {

                        },
                        error: function (xhr) {
                            global.console.error(
                                'AJAX Error on: ' +
                                this.url +
                                ' --- method: ' +
                                this.type +
                                ' --- status: ' +
                                xhr.status +
                                ' --- statusText: ' +
                                xhr.statusText
                            );
                        }
                    });

                    //-- Eb logic --//
                    global._ebq.push([
                        'trackActivity',
                        {
                            original_id: productId,
                            verb: 'click-on-reco',
                            recommendationId: recoId,
                            type: 'product',
                            widget: widgetId,
                            pageName: isHisto ? recopageName : undefined
                        }
                    ]);
                });

				//-- Tealium tracking purposes --//
                if (isHisto) {
                    var $histoDelete = $reco.find(
                        '.product .close'
                    );
                    $histoDelete.on('click', function () {
                        $.ajax({
                            async: true,
                            cache: false,
                            type: 'GET',
                            contentType: 'application/json; charset=utf-8',
                            url: '/servicegeneric/triggertealiumremovelastseen?productid=' + $(this).attr('data-productid').toString(),
                            success: function () {
                           
                            },
                            error: function (xhr) {
                                global.console.error(
                                    'AJAX Error on: ' +
                                    this.url +
                                    ' --- method: ' +
                                    this.type +
                                    ' --- status: ' +
                                    xhr.status +
                                    ' --- statusText: ' +
                                    xhr.statusText
                                );
                            }
                        });
                    });
                }
            };

            var Criterio_applyTracking = function ($reco) {
                var $linksClickBeacon = $reco.find(
                    '.product[data-onclickbeacon]'
                );
                $linksClickBeacon.addClass('criterio-tracked');
                $linksClickBeacon.on('click', function () {
                    var beaconValue = $(this).data('onclickbeacon').toString();
                    $.ajax({
                        url: 'https:' + beaconValue,
                        type: 'GET',
                        contentType: 'text/plain',
                        success: function (data) {
                            //-- no need to handle response, trigger call to track Criterio OnClickBeacon --//
                        },
                        error: function (status, error) {
                            console.log('status : ', status);
                            console.log('error : ', error);
                        }
                    });
                });

                var $recoParent = $reco.parent();
                var selector = '.product[data-onviewbeacon]:not(.criterio-view-tracked), .apply-reco[data-onviewbeacon]:not(.criterio-view-tracked)';
                if ($recoParent.find(selector).length) {
                    $(window).on('resize scroll', function () {
                        handleBeaconViews($(this), selector, $recoParent)
                    });
                    $($recoParent.find(".carousel")).on('resize scroll', function () {
                        handleBeaconViews($(this), selector, $recoParent)
                    });

                    $(window).trigger('scroll');
                }
            };

            var handleBeaconViews = function ($event, selector, $recoParent) {
                //-- initialize $linksViewBeacon with each resize to check for .criterio-view-tracked (only track elements once) --//
                var $linksViewBeacon = $recoParent.find(selector);

                if ($linksViewBeacon.length) {
                    $linksViewBeacon.each(function () {
                        if ($(this).isInViewport(0.5) &&
                            $(this).parent().isInParentViewport(0.5)) {
                            var beaconValue = $(this).data('onviewbeacon').toString();
                            $(this).addClass('criterio-view-tracked');

                            $.ajax({
                                url: 'https:' + beaconValue,
                                type: 'GET',
                                contentType: 'text/plain',
                                success: function (data) {
                                    //-- no need to handle response, trigger call to track Criterio OnClickBeacon --//
                                },
                                error: function (status, error) {
                                    console.log('status : ', status);
                                    console.log('error : ', error);
                                }
                            });
                        }
                    });

                    //-- all elements are fully tracked? remove listener --//
                    if (!$recoParent.find(selector).length) {
                        $event.off('resize scroll')
                    }
                }
            };

            var getPosition = function ($container) {
                var position = 0;
                if ($container.closest('#layerAtb').length > 0) {
                    return 'ATB';
                }
                $('.apply-reco:visible, #completeLook').each(function (i) {
                    if ($container.is($(this))) {
                        position = i + 1;
                        return false;
                    }
                });
                return position;
            };

            var checkPrivacy = function () {
                var privacyCookie =
                    Utils.CookieManager.ReadCookie('TC_PRIVACY_CENTER');
                if (privacyCookie != null) {
                    if (privacyCookie.indexOf('1') !== -1) {
                        isPersonalized = true;
                    } else if (privacyCookie.indexOf('ALL') !== -1) {
                        isPersonalized = true;
                    }
                } else if (page.Model.countryCode === 'RU') {
                    isPersonalized = true;
                }
            };

            function getPrivacy() {
                return isPersonalized;
            }

            var getEbProfileId = function () {
                var ebCookie = Utils.CookieManager.ReadCookie('eb-profile');
                if (ebCookie != null) {
                    var profileIdEnd = ebCookie.indexOf(':');
                    return ebCookie.substring(0, profileIdEnd);
                }
            };

            var setEbConsole = function (recoId) {
                // For EB extension tool
                global.ebRecoIds = global.ebRecoIds || [];
                global.ebRecoIds.push(recoId);
            };

            var initiateReco = function () {
                $allReco.each(function () {
                    var $reco = $(this);
                    var isFromServer = $reco.data('callApiId') !== undefined;
                    if (isFromServer) {
                        Adobe_applyTracking($reco);
                        Criterio_applyTracking($reco);
                        setEbConsole($reco.data('callApiId'));
                        if (isPersonalized) {
                            utilsCommon.onEarlyBirdsLoad(function () {
                                EB_applyTracking($reco);
                            });
                        }
                    } else {
                        if ($reco.data('type') === 'ATB') {
                            global.$eventContainer.one(
                                global.pdpEvent.atbOpen,
                                function () {
                                    me.applyReco($reco);
                                }
                            );
                        } else {
                            me.applyReco($reco);
                        }
                    }
                });
            };


            var getVar = function ($el, additionalParams) {
                var params = {};
                var type = $el.data('type');
                var widgetKey = $el.data('widget');
                var pdp1Strategy = $el.data('pdp1strategy');
                var url = $(location).attr('href');
                var isTestEB = url.indexOf("testeb") !== -1;
                if (typeof model.getDataReco === varType.fn) {
                    params.variables = model.getDataReco(type);
                    if (pdp1Strategy) {
                        params.variables.$pdp1_recotype = pdp1Strategy;
                    }
                } else {
                    var variables = {};
                    if (type === 'ErrorPage') {
                        if (typeof genericColorId !== 'undefined') {
                            variables.$genericColorId =
                                genericColorId === ''
                                    ? undefined
                                    : genericColorId;
                        }
                        if (typeof brand !== 'undefined') {
                            variables.$brand = brand === '' ? undefined : brand;
                        }
                        if (typeof pageError_cat1 !== 'undefined') {
                            variables.$pageError_cat1 =
                                pageError_cat1 === ''
                                    ? undefined
                                    : pageError_cat1;
                        }
                        if (typeof pageError_cat2 !== 'undefined') {
                            variables.$pageError_cat2 =
                                pageError_cat2 === ''
                                    ? undefined
                                    : pageError_cat2;
                        }
                        if (typeof pageError_cat3 !== 'undefined') {
                            variables.$pageError_cat3 =
                                pageError_cat3 === ''
                                    ? undefined
                                    : pageError_cat3;
                        }
                    } else if (type === 'landingPage') {
                        variables.$landingPageBrand = 'La Redoute';
                        var productsIdsValue =
                            Utils.UrlManager.getUrlParameter('productsIds');
                        if (productsIdsValue !== undefined) {
                            var allIts;
                            if (productsIdsValue.indexOf('_') !== -1) {
                                allIts = productsIdsValue.split('_');
                            } else {
                                allIts = productsIdsValue.split('|');
                            }
                            variables.$landingIds = allIts;
                        }
                        if (additionalParams !== undefined) {
                            $.extend(variables, additionalParams);
                        }
                    } else if (type === 'VendorReviewsPage') {
                        var vendorName = $el.data('vendor');
                        var vendorNamewithoutAccent = Utils.Common.RemoveAccents(
                            vendorName
                        );
                        var vendorNameFormatted = vendorNamewithoutAccent
                            .replace("'", '')
                            .replace(/\s/g, '-')
                            .replace('&', 'AND')
                            .toUpperCase();
                        variables.$sellers = 'SELLER_' + vendorNameFormatted;
                    }

                    params.variables = variables;
                }
                if (isTestEB) {
                    params.variables.$url = url;
                }
                var newParams = overrideParams();
                if (newParams.hasOwnProperty(widgetKey)) {
                    params = $.extend(true, params, newParams[widgetKey]);
                }
                return params;
            };
            var overrideParams = function () {
                var newParams = {};
                var $EBdata = $('.EBdata');
                if ($EBdata.length > 0) {
                    if ($EBdata.length > 1) {
                        $.each($EBdata, function (idx, el) {
                            newParams = $.extend(
                                true,
                                newParams,
                                JSON.parse($(el).text())
                            );
                        });
                    } else {
                        newParams = JSON.parse($EBdata.text());
                    }
                }
                return newParams;
            };

            var ebRecoResponded = function (data, $reco) {
                var isExtendable = $reco.data('extendable');
                var id = data.id;
                var metadata = data.metadata;
                var recommendations = data.recommendations;
                var widget = data.widget;
                var recoType = $reco.data('type');
                //Enable last seen product ids for Syte
                if (
                    recoType === 'histo' &&
                    (model.pageType === 'ProductPage' ||
                        model.pageType === 'MultiProductPage')
                )
                    var lastSeenIds = [];

                if (recommendations && recommendations.length > 0) {
                    var recoTitle = widget.title,
                        products = [],
                        widgetId;

                    if (
                        recoTitle.indexOf('|') !== -1 &&
                        recoType !== 'VendorReviewsPage'
                    ) {
                        var choices = recoTitle.split('|');
                        choices.forEach(function (el) {
                            if (el.substring(0, 2) === page.lang) {
                                recoTitle = el.substring(3);
                            }
                        });
                    }

                    if (recoType === 'VendorReviewsPage') {
                        var vendorName = $reco.data('vendor');

                        if ($('.vendorHeader_linkShop').length &&
                            // WEB-21164: Hide vendor search link when any recommended product is from "Second Hand" category.
                            !recommendations.some(r => r.product.mainCat1Id == 300731))
                            recoTitle += $('.vendorHeader_linkShop').prop(
                                'outerHTML'
                            );
                        recoTitle = recoTitle.replace('|VENDOR|', vendorName);
                    }

                    if (typeof metadata === global.varType.obj) {
                        // Changement made for Criteo Sponso
                        widgetId = metadata.widgetId;
                        var trackingCriteoLink_onLoad = '';
                        var trackingCriteoLink_onView = '';

                        if (metadata.distribution) {
                            metadata.distribution.forEach(function (el) {
                                if (el.strategies.length > 0) {
                                    el.strategies.forEach(function (item) {
                                        if (item.response) {
                                            if (item.response.OnLoadBeacon && item.response.OnLoadBeacon != '') {
                                                trackingCriteoLink_onLoad = item.response.OnLoadBeacon;
                                            }
                                            if (item.response.OnViewBeacon && item.response.OnViewBeacon != '') {
                                                trackingCriteoLink_onView = item.response.OnViewBeacon;
                                            }
                                        }
                                    });
                                }
                            });
                        }

                        if (trackingCriteoLink_onLoad !== '') {
                            $('#corePage').prepend(
                                '<div class="csp-global onLoadBeaconPSF018" data-onloadbeacon="' +
                                trackingCriteoLink_onLoad +
                                '"></div>'
                            );

                            $.ajax({
                                url: 'https:' + trackingCriteoLink_onLoad,
                                type: 'GET',
                                contentType: 'text/plain',
                                success: function (data) {
                                    //-- no need to handle response, trigger call to track Criterio OnLoadBeacon --//
                                },
                                error: function (status, error) {
                                    console.log('status : ', status);
                                    console.log('error : ', error);
                                }
                            });
                        }

                        if (trackingCriteoLink_onView !== '') {
                            $reco.attr('data-onviewbeacon', trackingCriteoLink_onView);
                        }
                    }

                    if (recoType === 'histo') {
                        var arrayActivities = [];
                        metadata.profile.activities.forEach(function (
                            activity
                        ) {
                            if (
                                activity.verb === 'view-attribute' &&
                                activity.opposite === false
                            ) {
                                var splitTracking =
                                    activity.originalId.split('/');
                                arrayActivities.push({
                                    id: splitTracking[0],
                                    dim1: splitTracking[1],
                                    dim2: splitTracking[2],
                                    timestamp: activity.timestamp
                                });
                            }
                        });
                    }

                    //Changement made for Criteo Sponso add idx for
                    recommendations.forEach(function (recommendation) {
                        var product = recommendation.product;

                        // dynamic data for SKU reco sku level
                        var urlPath = product.url;
                        var imagePath = product.rawPhoto;
                        var discountPath = product.discount;
                        var finalPricePath = product.finalPrice;
                        var priceCatalogPath = product.priceCatalog;
                        var hasSeveralPricesPath = product.hasSeveralPrices;
                        var ecotaxPath = product.ecotax;

                        //Enable last seen product ids for Syte
                        if (
                            recoType === 'histo' &&
                            (model.pageType === 'ProductPage' ||
                                model.pageType === 'MultiProductPage')
                        ) {
                            lastSeenIds.push(product._id.original_id);
                        }

                        // Last view Sku
                        if (recoType === 'histo') {
                            var activities = lastSeenVariationID(
                                arrayActivities,
                                product._id.original_id
                            );

                            var activityTracker;
                            if (activities.length > 1) {
                                activityTracker =
                                    getLastSeenAttributes(activities);
                            } else if (activities.length === 1) {
                                activityTracker = activities[0];
                            } else {
                                activityTracker = null;
                            }
                            if (
                                activityTracker !== null &&
                                product.skuData[activityTracker.dim1] !==
                                undefined
                            ) {
                                urlPath =
                                    product.skuData[activityTracker.dim1].url;
                                imagePath =
                                    product.skuData[activityTracker.dim1]
                                        .rawImage;
                                        
                                if (product.skuData[activityTracker.dim1].discount != undefined)
                                    discountPath = product.skuData[activityTracker.dim1].discount;
                                if (product.skuData[activityTracker.dim1].finalPrice != undefined)
                                    finalPricePath = product.skuData[activityTracker.dim1].finalPrice;
                                if (product.skuData[activityTracker.dim1].priceCatalog != undefined)
                                    priceCatalogPath = product.skuData[activityTracker.dim1].priceCatalog;
                                if (product.skuData[activityTracker.dim1].colorHasSeveralPrices != undefined)
                                    hasSeveralPricesPath = product.skuData[activityTracker.dim1].colorHasSeveralPrices;
                                if (product.skuData[activityTracker.dim1].ecotax != undefined)
                                    ecotaxPath = product.skuData[activityTracker.dim1].ecotax;

                                if (activityTracker.dim2 !== '') {
                                    urlPath =
                                        urlPath +
                                        '&dim2=' +
                                        activityTracker.dim2;
                                }
                            }
                        }

                        //SYTE SKU
                        if (
                            model.pageName === 'PDP' &&
                            recoType !== 'histo' &&
                            recommendation.strategy === 'syte-similars'
                        ) {
                            var offerId = recommendation.strategyData.size_sku;

                            if (product.offerData[offerId] !== undefined) {
                                var dim1 = product.offerData[offerId].dim1;
                                var dim2 = product.offerData[offerId].dim2;
                                var skuData = product.skuData;

                                if (skuData[dim1] !== undefined) {
                                    urlPath = skuData[dim1].url;
                                    imagePath = skuData[dim1].rawImage;

                                    if (product.hasSeveralPrices == true) {
                                        hasSeveralPricesPath =
                                            skuData[dim1].colorHasSeveralPrices;

                                        var condition =
                                            hasSeveralPricesPath == true &&
                                            skuData[dim1][dim2] !== undefined;

                                        discountPath = condition
                                            ? skuData[dim1][dim2].discount
                                            : skuData[dim1].discount;
                                        finalPricePath = condition
                                            ? skuData[dim1][dim2].finalPrice
                                            : skuData[dim1].finalPrice;
                                        priceCatalogPath = condition
                                            ? skuData[dim1][dim2].priceCatalog
                                            : skuData[dim1].priceCatalog;
                                        ecotaxPath = condition
                                            ? skuData[dim1][dim2].ecotax
                                            : skuData[dim1].ecotax;
                                    }
                                }
                            }
                        }

                        //Changement made for Criteo Sponso
                        var criteoSponsored =
                            recommendation.strategyData &&
                            recommendation.strategyData.OnClickBeacon &&
                            recommendation.strategyData.OnViewBeacon;

                        products.push({
                            brand: product.brand,
                            discount: discountPath,
                            ecotax: ecotaxPath,
                            finalPrice: finalPricePath,
                            hasSeveralPrices: hasSeveralPricesPath,
                            id: parseInt(product._id.original_id),
                            photo: imagePath,
                            priceCatalog: priceCatalogPath,
                            rating: product.rating,
                            sticker:
                                product.stickers != undefined &&
                                    product.stickers.length > 0
                                    ? product.stickers[0].value
                                    : undefined,
                            title: product.title,
                            url: urlPath,
                            mainCat: {
                                id: product.mainCat2Id,
                                name: product.mainCat2
                            },
                            subCat: {
                                id: product.mainCat3Id,
                                name: product.mainCat3
                            },
                            categorieForContext: product.categories,
                            reviewCount: product.reviewCount,
                            onClickBeacon: criteoSponsored
                                ? recommendation.strategyData.OnClickBeacon
                                : undefined,
                            onViewBeacon: criteoSponsored
                                ? recommendation.strategyData.OnViewBeacon
                                : undefined,
                            onLoadBeacon: criteoSponsored
                                ? recommendation.strategyData.OnLoadBeacon
                                : undefined,
                            lvl4CatId: product.mainCat4Id,
                            lvl5CatId: product.mainCat5Id,
                        });

                        if (recommendation.strategyData &&
                            recommendation.strategyData.OnLoadBeacon) {
                            $.ajax({
                                url: 'https:' + recommendation.strategyData.OnLoadBeacon,
                                type: 'GET',
                                contentType: 'text/plain',
                                success: function (data) {
                                    //-- no need to handle response, trigger call to track Criterio OnLoadBeacon --//
                                },
                                error: function (status, error) {
                                    console.log('status : ', status);
                                    console.log('error : ', error);
                                }
                            });
                        }
                    });

                    if (isExtendable) {
                        products = products.filter(function (product) {
                            var isAlreadyDisplayed =
                                productIds.indexOf(product.id) > -1;
                            if (isAlreadyDisplayed) {
                                return false;
                            } else {
                                productIds.push(product.id);
                                return true;
                            }
                        });
                    }
                    //Enable last seen product ids for Syte
                    if (
                        recoType === 'histo' &&
                        (model.pageType === 'ProductPage' ||
                            model.pageType === 'MultiProductPage')
                    ) {
                        global.window.lastSeenProductsIds = lastSeenIds;
                        model.$eventContainer.trigger(
                            'pdp.lastSeenIdsAvailable'
                        );
                    }

                    // Build reco
                    var alreadyInstancied =
                        $reco.data('callApiId') !== undefined;
                    if (alreadyInstancied) {
                        $reco.data('reco').addNewProducts(products);
                    } else {
                        $reco
                            .reco({
                                title: recoTitle,
                                widget: widgetId,
                                key: widget.attributes.tracking,
                                productsInfos: products
                            })
                            .data('callApiId', id);

                        setEbConsole(id);
                    }
                    if (isPersonalized) {
                        utilsCommon.onEarlyBirdsLoad(function () {
                            EB_applyTracking($reco);
                        });
                    }
                    Adobe_applyTracking($reco);
                    Criterio_applyTracking($reco);

                    if (!alreadyInstancied) {
                        model.$eventContainer.trigger(
                            global.EB_landingEvent.serviceSucceeded,
                            [products]
                        );
                    }
                } else {
                    setEbConsole(id)
                    $reco.hide();
                    global.console.warn(
                        'Earlybirds responded no product for this widget : ' +
                        metadata.widgetId
                    );
                }
            };
            var lastSeenVariationID = function (array, productId) {
                var result = [];
                for (var k = 0; k < array.length; k++) {
                    if (array[k].id === productId) {
                        result.push(array[k]);
                    }
                }
                return result;
            };
            var getLastSeenAttributes = function (array) {
                var indice = array[0];
                for (var k = 1; k < array.length; k++) {
                    if (array[k].timestamp > indice.timestamp) {
                        indice = array[k];
                    }
                }
                return indice;
            };

            // Public methods
            me.applyReco = function ($reco, additionalParams) {
                var hasResponded = false;
                var widgetKey = $reco.data('widget');
                var country = page.lang;
                var store;
                var params;

                if ($reco.data('type') === 'histo') {
                    store = 'default';
                } else {
                    store = context;
                }

                var requestHasMetadata = function () {
                    if ($reco.data('type') === 'PDPUpSell') {
                        return 'widgetId,distribution.strategies.response';
                    } else if ($reco.data('type') === 'histo') {
                        return 'widgetId,profile.activities';
                    } else {
                        return 'widgetId';
                    }
                };

                var personalizeCall = function () {
                    return ebProfileId ? '/' + ebProfileId : '';
                };

                params = getVar($reco, additionalParams);

                var recoCallUrl =
                    ebUrl +
                    widgetKey +
                    '/recommendations' +
                    personalizeCall() +
                    '?variables=' +
                    encodeURIComponent(JSON.stringify(params.variables)) +
                    '&locale=' +
                    country +
                    '&store=' +
                    store +
                    '&metadata=' +
                    requestHasMetadata();

                if (widgetKey) {
                    $.ajax({
                        url: recoCallUrl,
                        contentType: 'text/plain',
                        success: function (data) {
                            hasResponded = true;
                            ebRecoResponded(data, $reco);
                        },
                        error: function (status, error) {
                            console.log('status : ', status);
                            console.log('error : ', error);
                            $reco.hide();
                        }
                    });
                    global.setTimeout(function () {
                        if (!hasResponded) {
                            $reco.hide();
                            global.console.warn(
                                'Earlybirds timeout overpassed => widget : ' +
                                widgetKey
                            );
                        }
                    }, 5000);
                } else {
                    global.console.warn('Earlybirds widget key is missing.');
                }
            };

            // Events
            model.$eventContainer.on(
                global.EB_landingEvent.menuClicked,
                function (e, $reco, additionalParams) {
                    me.applyReco($reco, additionalParams);
                }
            );

            // Init
            if ($allReco.length > 0) {
                checkPrivacy();
                if (isPersonalized) {
                    var ebProfileId = getEbProfileId();
                }
                initiateReco();
            }
        }
    });
})(window, window.jQuery);
;
(function (global, $) {
    'use strict';

    global.UiSearchHistory = global.UiBloc.extend({
        init: function (page, name, parent) {
            this._super(page, name, parent);

            // Private properties
            var me = this;
            var model = me.Model;
            var isLoaded = false;
            var isLoading = false;
            var loggedContext = '/servicesearch/';
            var getUrl = 'GetSearchTermHistory';
            var deleteUrl = 'RemoveSearchTermHistory?searchTerm=';
            var deleteAllUrl = 'ClearSearchTermHistory';
            var urlParameters = '&noOfHistoryTerms=' + page.Blocs.Search.maxSearchHistory;
            var ajaxRemoveMethod = 'POST';
            var parameterType = '?';
            var virtualSiteIdentifier = 'virtualSiteId=';
            var _data_position_ = 'data-position';

            if (page.isLogged) {
                // Override variables value if user is logged
                loggedContext = '/servicemyaccount/';
                getUrl = 'getcustomerpersonalisation.aspx';
                deleteUrl = 'deletecustomerpersonalisation.aspx?keyword=';
                deleteAllUrl = 'deletecustomerpersonalisation.aspx?keyword= ';
                urlParameters = '&cache=false&noOfHistoryTerms=' + page.Blocs.Search.maxSearchHistory;
                ajaxRemoveMethod = 'DELETE';
                virtualSiteIdentifier = 'virtualSiteId=';
                parameterType = '&';
            }

            // Public properties

            // DOM picks
            me.$container = $('#searchHistory');

            // DOM building element

            // DOM adjustments

            // Private methods
            var addSearchTerm = function (term) {
                var virtualSite = getVirtualSite();
                var serviceUrl = [
                    '/servicesearch/AddSearchTermHistory.aspx?searchTerm=',
                    encodeURIComponent(term),
                    '&',
                    virtualSiteIdentifier,
                    virtualSite
                ].join('');
                $.ajax({
                    async: false,
                    cache: false,
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    url: serviceUrl,
                    success: function () {
                        me.$container.trigger('history.searchTermAdded');
                    }
                });
            };

            var clearSearchHistory = function () {
                var virtualSite = getVirtualSite();
                parent.$input.focus();
                $.ajax({
                    type: ajaxRemoveMethod,
                    url: [
                        loggedContext,
                        deleteAllUrl,
                        parameterType,
                        virtualSiteIdentifier,
                        virtualSite
                    ].join(''),
                    success: function (data) {
                        var response = data;
                        if (typeof data === 'string') response = JSON.parse(data);
                        if (response.IsSuccess) {
                            $('#searchHistory').fadeOut(300, function () {
                                $('.block-search-suggestion-result').remove();
                                parent.$input.focus();
                                if (me.$container.find('.block-search-suggestion-result').length === 0) me.closeSearchHistory();
                            });
                        }
                        $('#searchHistory').prev('.block-search-suggestion-title').hide();
                    },
                    error: function () {
                        var searchHistoryClearErrorMessage =
                            global.labels.MobileV3_Common
                                .SearchHistoryClearError;

                        if (
                            searchHistoryClearErrorMessage &&
                            $('#searchHistoryClearErrorMessage').length === 0
                        ) {
                            $('<div>', {
                                id: 'searchHistoryClearErrorMessage',
                                class: 'snackbar snackbar--error snackbar--static margin-t',
                                html: '<i class="lr-icon lr-icon-warning"></i>' + searchHistoryClearErrorMessage
                            })
                                .appendTo('.result-title')
                                .find('button')
                                .on('click', function () {
                                    clearSearchHistory();
                                });
                        }
                    },
                    complete: function () {
                        $('.block-search-history-clear').feedback('remove');
                    }
                });
            };

            var getSearchBox = function () {
                me.$container = $('#headerSearch #headerSearchField').is(':focus') ? $('#headerSearch #searchHistory') : $('.duplicateSearch #searchHistory');
            };

            var getSearchHistory = function () {
                var virtualSite = getVirtualSite();
                $.ajax({
                    cache: false,
                    url: [
                        loggedContext,
                        getUrl,
                        '?',
                        virtualSiteIdentifier,
                        virtualSite,
                        urlParameters
                    ].join(''),
                    success: function (data) {
                        if (page.isLogged) {
                            var virtualSitesAllowed = [
                                '100',
                                '85201',
                                '151517',
                                '151885',
                                '1326',
                                '253506',
                                'laredouteforbusiness',
                                'ampm',
                                'lesaubaines'
                            ];

                            data = virtualSitesAllowed.indexOf(virtualSite) !== -1 ? data[virtualSite] : data['100'];

                            if (typeof data === 'string' && data.length > 0) data = data.split(','); // Convert data to table
                        } else {
                            if (typeof data === 'string') data = JSON.parse(data);
                        }
                        if (data && data.length > 0) {
                            // Add title
                            var $itemTitle = $('<div>', {
                                class: 'result-title block-search-suggestion-title',
                                text: labels.MobileV3_Common.LastSearches
                            }).insertBefore(me.$container);

                            if (!page.isMobile) {
                                // Add clear button & add click event
                                $('<button>', {
                                    class: 'block-search-history-clear btn btn-link btn-xs',
                                    text: global.labels.MobileV3_Common.DeleteAll,
                                    type: 'button'
                                })
                                    .appendTo($itemTitle)
                                    .on('click', function () {
                                        $(this).feedback('add');
                                        clearSearchHistory();
                                    });
                            }

                            var $wrapper = $('<span>', {
                                class: 'result block-search-suggestion-result'
                            });
                            
                            var $item = $('<button>', {
                                class: 'result lr-chip lr-chip-ghost'
                            });

                            var $delete = $('<button>', {
                                class: 'close close--light',
                                type: 'button'
                            });

                            data.forEach(function (value, i) {
                                // create new history item
                                var $newItem = $item.clone();
                                var $itemSelector = $('<span>', {
                                    class: 'block-search-suggestion-result-selector',
                                    text: value
                                });
                                
                                $newItem
                                .append($itemSelector)
                                // .appendTo(me.$container)
                                .attr(_data_position_, i + 1)
                                .on('click', function () {
                                    var keyword = $(this).text();
                                    model.$eventContainer.trigger(
                                        global.globalTrackingEvent
                                                .SHOPPING_TOOL_USED,
                                                [
                                                {
                                                    type: 'SEARCH',
                                                    subType: 'Internal',
                                                    extraData: [
                                                        i + 1,
                                                        'history'
                                                    ],
                                                    keyword: keyword,
                                                    searchInfo: model.get_searchInfo(
                                                        keyword,
                                                        'autocomplete_history_' + ($('#headerSearchField').val() === '' ? 'noinput' : 'input')
                                                        )
                                                    }
                                                ]
                                    );
                                    parent.searchBySuggestion($(this), 'history', true);
                                });

                                // create new history wrapper of item and delete
                                var $newWrapper = $wrapper.clone();
                                $newWrapper
                                .append($newItem)
                                .appendTo(me.$container);
                                
                                // add delete button
                                $delete
                                .clone()
                                .appendTo($newWrapper)
                                .attr('title', global.labels.MobileV3_Common.Delete + ' : ' + $newItem.text())
                                .on('click', function (event) {
                                    event.stopPropagation();
                                    $(this)
                                    .removeClass('hovered')
                                    .parent()
                                    .feedback('add');
                                    $(this)
                                    .parent()
                                    .find('.block-search-suggestion-result-selector')
                                    removeHistoryItem($newWrapper, value);
                                });
                            });
                            
                            isLoaded = true;
                            me.$container
                            .slideDown()
                            .prev('.result-title')
                            .show();
                        }
                    }
                });
            };

            var getVirtualSite = function () {
                var virtualSite = '100';
                var $idVirtualSite = $('#idVirtualSite');

                if ($idVirtualSite.length > 0) {
                    virtualSite = $idVirtualSite.val();
                } else if (global.contextInfo.BreadCrumbDetail && global.contextInfo.BreadCrumbDetail.length) {
                    virtualSite = global.contextInfo.BreadCrumbDetail[0].Id;
                }

                return virtualSite;
            };

            var removeHistoryItem = function ($resultItem, term) {
                var virtualSite = getVirtualSite();
                parent.$input.focus();

                $.ajax({
                    type: ajaxRemoveMethod,
                    url: [
                        loggedContext,
                        deleteUrl,
                        encodeURI(term),
                        '&',
                        virtualSiteIdentifier,
                        virtualSite
                    ].join(''),
                    success: function (data) {
                        if (typeof data === 'string') data = JSON.parse(data);
                        if (data.IsSuccess) {
                            $resultItem.fadeOut(300, function () {
                                $(this).remove();
                                parent.$input.focus();
                                if (me.$container.find('.block-search-suggestion-result').length === 0) me.closeSearchHistory();
                            });
                        }
                    },
                    error: function () {
                        $resultItem.feedback('remove');
                        $resultItem
                            .find('.block-search-suggestion-result-selector')
                            .fadeIn('fast');
                    }
                });
            };

            // Public methods
            me.closeSearchHistory = function () {
                me.$container.prev('.result-title').hide();
                me.$container.hide();

                page.Blocs.Search.positionCounter = 0;
                page.Blocs.Search.context = 'suggestions';
            };

            me.openSearchHistory = function () {
                if (isLoaded) {
                    // If has results
                    if (me.$container.find('button').length > 0) {
                        me.$container.show().prev('.result-title').show();
                    }
                } else if (isLoading === false) {
                    isLoading = true;
                    getSearchHistory();
                }
                page.Blocs.Search.positionCounter = 0;
                page.Blocs.Search.context = 'history';
                model.$eventContainer.trigger('search.open.history');
            };

            // Events
            parent.$container.on({
                'search.focus': function () {
                    setTimeout(function () {
                        getSearchBox();
                    }, 100);
                    if (parent.$input.val() === '') me.openSearchHistory();
                },
                'search.validate': function () {
                    addSearchTerm(parent.$input.val());
                }
            });

            parent.$container.on('search.validate', function () {
                console.log('Search has been validated.');
            });

            model.$eventContainer.on('menu.open', function () {
                me.closeSearchHistory();
            });

            // Init
        }
    });
})(window, window.jQuery);
;
(function (global, $) {

    'use strict';

    global.UiSocialAccountLinking = global.UiBloc.extend({
        init: function (page, name) {
            var me = this;
            me._super(page, name);

            // Private properties

            // Public properties

            // DOM Picks
            me.$containerLogin = $('.container-login');

            // DOM building elements

            // DOM adjustments

            // Private methods
            var ucfirst = function (myString) {
                if (typeof myString !== 'string') {
                    myString = '';
                }
                return myString.charAt(0).toUpperCase() + myString.slice(1);
            };

            var linkReach5Account = function (event, $button) {
                var $inputPassword = $('#inputPassword');
                me.$containerLogin.addLoading();
                event.preventDefault();

                var request = {
                    req: {
                        Username: $('#textBox_loginPage_alreadyCustomer_loginMail').val(),
                        Password: $('#textBox_loginPage_alreadyCustomer_password').val(),
                        Reach5Token: $('.reach5token').val()
                    }
                };

                var args = JSON.stringify(request);
                var serviceUrl = '/customerServices/ConnectSocialAccount';

                var handleEmptyPassword = function(){
                    $inputPassword.after($('<div>', {
                        class: 'error-login-connect block-error margin-b',
                        text: labels['MobileV3_Login']['Error_BlankPassword']
                    })).addClass('has-feedback has-error').find('i').removeClass('icon-ok').addClass('icon-remove');
                    me.$containerLogin.removeLoading();
                };

                $.ajax({
                    url: serviceUrl,
                    async: true,
                    cache: false,
                    type: "POST",
                    headers: {
                        "cache-control": "no-cache"
                    },
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: args,
                    beforeSend: function () {
                        if ($('.error-login-connect').length > 0 && $('.btn-social-validate-login').length > 0) {
                            $('.error-login-connect').remove();
                            $inputPassword.remove('has-feedback has-error');
                        }
                    },
                    success: function (data) {
                        if (data.RedirectUrl) {
                            global.location = data.RedirectUrl;
                            return;
                        }
                        if (data.ReturnUrl) {
                            global.location = data.ReturnUrl;
                            return;
                        }
                        if (data.PropertyStatuses.length > 0 && typeof data.PropertyStatuses[0].Description !== 'undefined' && $('.error-login-connect').length == 0) {
                            $('.textBox_loginPage_alreadyCustomer_password').addClass('error');
                            $inputPassword.after($('<div>', {
                                class: 'error-login-connect block-error margin-b',
                                text: data.PropertyStatuses[0].Description
                            })).addClass('has-feedback has-error').find('i').removeClass('icon-ok').addClass('icon-remove');
                            me.$containerLogin.removeLoading();
                        }
                        // Because error can have 200 http code...
                        if(!data.isSuccess){
                            switch (data.ResponseCode) {
                                case 'EMPTY_PASSWORD':
                                    handleEmptyPassword();
                                    break;                            
                                default:
                                    break;
                            }
                        }
                    },
                    error: function () {
                        if ($inputPassword.val() === '') {
                            handleEmptyPassword();
                        }
                    },
                    complete: function () {
                        $(window).on('unload', function () {
                            me.$containerLogin.removeLoading();
                        });
                    }
                });
            };            

            // Public methods
            me.displayLinkingLoginForm = function (data, loginPath) {
                var loginLabels = labels['MobileV3_Login'];
                var $validationButtonSocialLogin = $('#validationButton_login');
                var provider = '';

                if (data.Provider !== 'undefined') {
                    provider = data.Provider;
                }

                if (me.$containerLogin.length <= 0) {
                    var hash = '#email=' + data.Email + '&token=' + data.Reach5Token + '&basketToLogin=true';
                    global.location.href = loginPath + hash;
                    return;
                }
                $('.reach5token').val(data.Reach5Token);

                //construct dom
                var socialLoginSubTitle = $('<div>', {
                    class: 'social-login-subtitle'
                }).append($('<span>', {
                    class: 'block',
                    text: loginLabels['SocialLoginEmailMatchingAccount'].replace('[provider]', ucfirst(provider))
                }).append($('<span>', {
                    class: 'block',
                    text: loginLabels['SocialLoginToLinkYourAccount']
                })));
                $('.headerLogin').html(loginLabels['SocialLoginKnownUserTitle']).after(socialLoginSubTitle);
                me.$containerLogin.after($('<div>', {
                    class: 'social-legal-connect margin-t text-muted col-sm-12'
                }).append(loginLabels['LegalSocialLogin'])).removeLoading();
                $validationButtonSocialLogin.find('span').html(loginLabels['SocialLoginLinkButton']);

                //display social login layer
                $('.login-bloc-already-customer').show().addClass('login-bloc-social-login');
                $('.login-bloc-new-customer').hide();
                $validationButtonSocialLogin.addClass('btn-social-validate-login');
                $('#textBox_loginPage_alreadyCustomer_loginMail').val(data.Email).focus().attr('readonly', 'readonly');
                $('#textBox_loginPage_alreadyCustomer_loginMail').closest(".right-inner-addon").addClass("readonly");
                $('.social-login-subtitle').remove();
                $('.social-login-container').hide();

                // validate link account
                $validationButtonSocialLogin.on('click', function (event) {
                    linkReach5Account(event, $(this));
                });

                $("#eventContainer").trigger("socialLogin.linking");
            };

            // Events

            // Init

        }
    });
})(window, jQuery);
;
if (typeof Utils === 'undefined') {
    var Utils = {};
}

Utils.Enum = {
    AppPicture: {
        Android: {
            'de-ch': 'googlePlay_ch_de.svg',
            'es-es': 'googlePlay_es.svg',
            'fr-ch': 'googlePlay_ch_fr.svg',
            'fr-be': 'googlePlay_fr_be.svg',
            'fr-fr': 'googlePlay_fr_fr.svg',
            'en-gb': 'googlePlay_en_gb.svg',
            'it-it': 'googlePlay_it_it.svg',
            'nl-be': 'googlePlay_nl_be.svg',
            'pt-pt': 'googlePlay_pt_pt.svg',
            'ru-ru': 'googlePlay_ru.svg',
            default: 'googlePlay.svg'
        },
        Apple: {
            'de-ch': 'appStore_de_ch.svg',
            'es-es': 'appStore_es_es.svg',
            'fr-ch': 'appStore_fr_ch.svg',
            'fr-be': 'appStore_fr_be.svg',
            'fr-fr': 'appStore_fr_fr.svg',
            'en-gb': 'appStore_en_gb.svg',
            'it-it': 'appStore_it_it.svg',
            'nl-be': 'appStore_nl_be.svg',
            'pt-pt': 'appStore_pt_pt.svg',
            'ru-ru': 'appStore_ru_ru.svg',
            default: 'appStore.png'
        }
    },
    BootstrapValidator: {
        Attribute: {
            Data: 'bootstrapValidator'
        },
        FeedbackIcons: {
            valid: 'icon icon-check-ok',
            invalid: 'icon icon-error',
            validating: 'icon icon-error'
        }
    },
    Class: {
        BlockInfo: {
            Default: 'block-info',
            Error: 'block-error',
            Success: 'block-success',
            Warning: 'block-warning'
        },
        Header: {
            TooltipDefaultClasses: [
                'tooltip',
                'tooltip-white',
                'tooltip-squared',
                'tooltip-border-grey',
                'tooltip-thick'
            ]
        }
    },
    CustomScrollBar: {
        DefaultParams: {
            theme: 'dark',
            scrollInertia: 500
        }
    },
    Form: {
        Input: {
            Address: {
                Maxlength: 40
            },
            City: {
                Maxlength: 32
            },
            Email: {
                Maxlength: 65,
                ValidationRegExp: getEmailRegex()
            },
            Firstname: {
                Maxlength: 32
            },
            Lastname: {
                Maxlength: 32
            }
        }
    },
    Event: {
        SlideOpen: 'slide.open'
    },
    Feedback: {
        Actions: {
            add: 'add',
            remove: 'remove'
        }
    },
    Inputmask: {
        Unmasked: 'unmaskedvalue'
    },
    PageName: {
        AddressMod: 'MobileV3_AddressMod',
        Basket: 'MobileV3_Basket',
        BasketThankYou: 'MobileV3_BasketThankYou',
        Delivery: 'MobileV3_Delivery',
        Login: 'MobileV3_Login',
        ModifyDetails: 'MobileV3_ModifyDetails',
        Payment: 'MobileV3_Payment',
        PDP: 'MobileV3_PDP',
        Register: 'MobileV3_Register',
        Returns: 'MobileV3_ReturnsV2'
    },
    Selector: {
        CustomerLoginInformations: '#customerLoginInformations'
    },
    SiteId: {
        FR: 1,
        BE: 2,
        UK: 3,
        ES: 5,
        PT: 6,
        NL: 7,
        CH: 10,
        COM: 11,
        RU: 12,
        PL: 13,
        IT: 14
    },
    Status: {
        Active: 'active',
        Loading: 'loading',
        Hidden: 'hidden',
        Disabled: 'disabled',
        Opened: 'opened',
        Update: 'update'
    },
    StorageName: {
        FLASHSALE_ORIGIN: 'lr-flashsale-origin',
        INTERACTION_TIMER: 'lr-interaction-timer',
        LAST_SEARCH_ID: 'lr-last-searchId',
        PAGE_ORIGIN: 'lr-page-origin',
        PRODUCT_ORIGIN: 'lr-product-origin',
        USED_TOOL: 'lr-used-tool',
        SHOPPING_TOOL: 'lr-shopping-tool'
    },
    StorageManager: {
        ForgottenPasswordEmail: 'forgottenPasswordEmail',
        RegisterEmail: 'registerEmail'
    }
};

var blockEvent = {},
    blockName = {
        adserve: 'adserve'
    },
    constructorName = {
        adserve: 'UiAdserve'
    },
    elementStatus = {
        active: 'active',
        available: 'available',
        disabled: 'disabled',
        hidden: 'hidden',
        loading: 'loading',
        opened: 'opened',
        selected: 'selected',
        visible: 'visible'
    },
    imgSizes = [72, 302, 362, 641],
    model = {
        basket: 'ModelBasket',
        MyAccount: {
            MyOffers: 'ModelMyOffers'
        },
        OrderTracing: 'ModelOrderTracing',
        PDP: 'ModelPDP',
        PLP: 'ModelPLP',
        Vendor: 'ModelVendor'
    },
    pageName = {
        accountFollowUp: 'MobileV3_AccountFollowUp',
        afterSalesService: 'MobileV3_AfterSalesService',
        basket: 'MobileV3_Basket',
        blogInspiration: 'MobileV3_BlogInspiration',
        common: 'MobileV3_Common',
        delivery: 'MobileV3_Delivery',
        error: 'MobileV3_ErrorPage',
        flashSales: 'MobileV3_FlashSalesList',
        hp: 'MobileV3_Home',
        login: 'MobileV3_Login',
        myOffers: 'MobileV3_MyOffers',
        orderTracing: 'MobileV3_OrderTracing',
        payment: 'MobileV3_Payment',
        pdp: 'MobileV3_PDP',
        plp: 'MobileV3_PLP',
        plpCategory: 'MobileV3_PLPCategories',
        returns: 'MobileV3_ReturnsV2',
        summary: 'MobileV3_BasketThankYou',
        wishlist: 'MobileV3_WishList',
        static: 'MobileV3_StaticPage',
        vendor: 'MobileV3_VendorBazaarVoice'
    },
    pageNameJS = {},
    pageEvent = {
        loaded: 'page.loaded'
    },
    // Password strength
    pwStrength = {
        none: 'none',
        low: 'low',
        medium: 'medium',
        high: 'high'
    },
    siteName = {
        Ampm: 'AM.PM.',
        Anneweyburn: 'Anne Weyburn',
        Brandboutique: 'La Brand Boutique',
        BrandboutiqueOutlet: 'La Brand Boutique Outlet',
        Castaluna: 'Castaluna',
        Laredoute: 'La Redoute',
        LaRedouteForBusiness: 'La Redoute For Business',
        Lesaubaines: 'Outlet'
    },
    varType = {
        bool: 'boolean',
        fn: 'function',
        num: 'number',
        obj: 'object',
        str: 'string'
    };

pageNameJS[pageName.accountFollowUp] = 'AccountFollowUp';
pageNameJS[pageName.afterSalesService] = 'AfterSalesService';
pageNameJS[pageName.basket] = 'Basket';
pageNameJS[pageName.blogInspiration] = 'BlogInspiration';
pageNameJS[pageName.delivery] = 'Delivery';
pageNameJS[pageName.flashSales] = 'FlashSales';
pageNameJS[pageName.hp] = 'HomePage';
pageNameJS[pageName.login] = 'Login';
pageNameJS[pageName.myOffers] = 'MyOffers';
pageNameJS[pageName.orderTracing] = 'OrderTracing';
pageNameJS[pageName.payment] = 'Payment';
pageNameJS[pageName.pdp] = 'PDP';
pageNameJS[pageName.plp] = 'PLP';
pageNameJS[pageName.plpCategory] = 'PLP';
pageNameJS[pageName.returns] = 'Returns';
pageNameJS[pageName.summary] = 'Summary';
pageNameJS[pageName.wishlist] = 'Wishlist';
pageNameJS[pageName.static] = 'StaticPages';
pageNameJS[pageName.vendor] = 'Vendor';

;
(function (global, $) {
  'use strict';

  var $window = $(global);

  var utils = {
    /**
     * @returns {'xs' | 'sm' | 'md' | 'lg' | 'xl'}
     */
    getScreenSize: function () {
      var screenSize = global.innerWidth;
      if (screenSize < 768) return 'xs';
      else if (screenSize < 992) return 'sm';
      else if (screenSize < 1200) return 'md';
      else if (screenSize < 1360) return 'lg';
      else return 'xl';
    },
    /**
     * @param {string} name
     * @param {object} data
     */
    triggerCustomEvent: function (name, data) {
      $window.trigger(name, [data]);
    },
    isAvailable: function (name) {
      setTimeout(function () {
        $window.trigger(name + ':available');
      }, 10);
    }
  };

  global.LR_App.utils = utils;
})(window, window.jQuery);

/*
    MODULE : Utils library
    contains all utilities for client side script
*/
if (typeof Utils === 'undefined') var Utils = {};

Utils.PrivacyValues = {
  SitePersonalization: '1',
  SiteFrequenting: '2',
  SiteWorking: '3',
  SocialNetworks: '4',
  PersonalizedAdvertising: '5'
};

Utils.Common = (function (window, $, undefined) {
  var noScrollClass = 'no-scroll';
  var earlyBirdsChecked = false;

  return {
    formatImgUrl: function (url, size) {
      var byPosition = url.indexOf('by'),
        undefinedSize = url.indexOf('|Dimension|');
      if (undefinedSize > -1) {
        return url.replace('|Dimension|', 'products/' + size + 'by' + size);
      } else if ($.inArray(size, window.imgSizes) && byPosition > -1) {
        var lowRes = '72by72',
          highRes = '1200by1200',
          startPos = url.indexOf(lowRes) > -1 ? 2 : url.indexOf(highRes) > -1 ? 4 : 3,
          endPos = url.indexOf(lowRes) > -1 ? 4 : url.indexOf(highRes) > -1 ? 6 : 5;
        return url.replace(url.substring(byPosition - startPos, byPosition + endPos), size + 'by' + size);
      } else {
        return url;
      }
    },
    getNoSizedImage: function (src) {
      var newSrc = src;

      // Remove params
      newSrc = newSrc.split('?')[0];

      // Remove '|Dimension|'
      newSrc = newSrc.replace('|Dimension|', 'products');

      // Remove domain name
      newSrc = newSrc.replace('https://cdn.laredoute.com', '');
      newSrc = newSrc.replace('https://cdn.laredoute.ru', '');

      // Remove old sizes
      newSrc = newSrc.replace('72by72/', '');
      newSrc = newSrc.replace('250by250/', '');
      newSrc = newSrc.replace('640by640/', '');
      newSrc = newSrc.replace('680by680/', '');
      newSrc = newSrc.replace('1200by1200/', '');

      // return
      return newSrc;
    },
    formatPrice: function (price) {
      if (typeof price === 'number') {
        price = price.toFixed(2);
      }
      price = '' + price;
      if (this.getCountry() !== 'pt') {
        price = price.replace('.', ',');
      }
      if (this.getCountry() !== 'com') {
        switch (window.wa_data.currencyCode) {
          case 'CHF':
            price = 'CHF ' + price.replace(',', '.');
            break;
          case 'GBP':
            price = '£' + price.replace(',', '.');
            break;
          case 'PLN':
            price += ' zł';
            break;
          case 'RUB':
            price += ' руб';
            break;
          case 'USD':
            price += ' $';
            break;
          default:
            price += ' €';
        }
      } else {
        price += ' €';
      }
      return price;
    },
    formatText: function (str) {
      return this.RemoveAccents(this.removeSpace(this.removePunctuation(str))).toLowerCase();
    },
    strCanBeParse: function (str) {
      try {
        JSON.parse(str);
      } catch (e) {
        return false;
      }
      return true;
    },
    startNoScroll: function () {
      var $body = $('body');
      if (!$body.hasClass(noScrollClass)) {
        $body.addClass(noScrollClass);
        return $body.hasClass(noScrollClass);
      }
    },
    stopNoScroll: function () {
      var $body = $('body');
      if ($body.hasClass(noScrollClass)) {
        $body.removeClass(noScrollClass);
        return !$body.hasClass(noScrollClass);
      }
    },
    isLocalStorageEnabled: function () {
      try {
        localStorage.setItem('__test', 'data');
      } catch (e) {
        if (/QUOTA_?EXCEEDED/i.test(e.name)) {
          return false;
        }
      }
      return true;
    },
    isAndroidDevice: function () {
      return /Android/i.test(navigator.userAgent);
    },
    isOldAndroid: function () {
      return /Android 4.0/i.test(navigator.userAgent) || /Android 4.1/i.test(navigator.userAgent) || /Android 4.2/i.test(navigator.userAgent);
    },
    isBlackBerryDevice: function () {
      return /BlackBerry/i.test(navigator.userAgent);
    },
    isAppleDevice: function () {
      if (Utils.Common.isAppleDeviceResult === undefined) Utils.Common.isAppleDeviceResult = /iPhone|iPad|iPod/i.test(navigator.userAgent);
      return Utils.Common.isAppleDeviceResult;
    },
    isOldAppleDevice: function () {
      if (Utils.Common.isAppleDeviceResult === undefined) Utils.Common.isAppleDeviceResult = /OS 1_|OS 2_|OS 3_|OS 4_|OS 5_|OS 6_|OS 7_|OS 8_|OS 9_/i.test(navigator.userAgent);
      return Utils.Common.isAppleDeviceResult;
    },
    isWindowsDevice: function () {
      return /IEMobile/i.test(navigator.userAgent);
    },
    isChromeIOSDevice: function () {
      return /CriOS/i.test(navigator.userAgent);
    },
    isFirefoxDevice: function () {
      return /Firefox/i.test(navigator.userAgent);
    },
    isExternalMobileInterfacing: function (app) {
      // detect external interfacing
      if (app === undefined) {
        return $('body').hasClass('external');
      } else {
        // detect interfacing app type
        return $('body').is('.external' + '.app-' + app);
      }
    },
    isCFAO: function () {
      return $('body').hasClass('cfao');
    },
    RemoveAccents: function (str) {
      var s = '';

      if (str != undefined) s = str.toString();

      var rExps;

      if (this.getSiteId() === 6) {
        rExps = [/[\xC0-\xC3]/g, /[\xE0-\xE3]/g, /[\xC8-\xCA]/g, /[\xE8-\xEB]/g, /[\xCC-\xCE]/g, /[\xEC-\xEE]/g, /[\xD2-\xD4]/g, /[\xF2-\xF4]/g, /[\xD9-\xDB]/g, /[\xF9-\xFB]/g];
      } else {
        rExps = [/[\xC0-\xC2]/g, /[\xE0-\xE2]/g, /[\xC8-\xCA]/g, /[\xE8-\xEB]/g, /[\xCC-\xCE]/g, /[\xEC-\xEE]/g, /[\xD2-\xD4]/g, /[\xF2-\xF4]/g, /[\xD9-\xDB]/g, /[\xF9-\xFB]/g];
      }

      var repChar = ['A', 'a', 'E', 'e', 'I', 'i', 'O', 'o', 'U', 'u'];

      for (var i = 0; i < rExps.length; i++) s = s.replace(rExps[i], repChar[i]);

      return s;
    },
    removeSpace: function (val) {
      return val.replace(/\s/g, '');
    },
    removePunctuation: function (str) {
      if (str != undefined) str = str.toString();
      return str.replace(/[#?!.,;:%]/g, '');
    },
    getCountryCode: function () {
      return $('body').data('countrycode');
    },
    getCountry: function (short) {
      // return short form of country
      // CO.UK -> UK
      if (short) {
        var country = Utils.Common.getCountryResult;
        if (country.indexOf('.') !== -1) {
          country = country.split('.')[1];
        }
        return country;
      }

      if (Utils.Common.getCountryResult === undefined) Utils.Common.getCountryResult = $('body').data('country');
      return Utils.Common.getCountryResult;
    },
    getSiteId: function () {
      if (Utils.Common.siteId === undefined) Utils.Common.siteId = $('body').data('siteid');
      return Utils.Common.siteId;
    },
    GetSessionViaAjax: function (sessionVar) {
      var response;
      $.ajax({
        url: '/ServiceGeneric/GetSession?sessionVar=' + sessionVar,
        dataType: 'text',
        async: false,
        cache: false,
        success: function (data, textStatus, jqXHR) {
          response = data;
        }
      });
      return response;
    },
    getImgUrl: function (img, resolution, country) {
      return img.replace('|Dimension|', 'products/' + resolution + 'by' + resolution);
    },
    isTouchDevice: function () {
      if (Utils.Common.isTouchDeviceResult === undefined) Utils.Common.isTouchDeviceResult = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
      return Utils.Common.isTouchDeviceResult;
    },
    updateContextInfoCustomer: function (callback) {
      $.ajax({
        url: '/servicegeneric/getcontextinfo',
        cache: false,
        success: function (data) {
          if (data && typeof data[0] != 'undefined' && data[0].Key == 'contextInfo') {
            //Do not update all data because the service doesn't know data about the current page.
            if (typeof contextInfo === varType.obj) {
              window.contextInfo.Customer = data[0].Value.Customer;
              if (typeof callback === 'function') {
                callback.call();
              }
            }
          }
        }
      });
    },
    onCustomClick: function ($el, fn) {
      var me = this;
      if ($el.length > 0 && typeof fn === varType.fn) {
        return $el.on('click auxclick', function (e) {
          if (e.type === 'click' || (e.type === 'auxclick' && e.which === 2)) {
            fn(this, e);
          }
        });
      } else {
        return false;
      }
    },
    onEarlyBirdsLoad: function (fn, count) {
      if (typeof fn !== varType.fn) {
        return false;
      }
      count = count !== undefined ? count : 5;
      if (window._ebq && window.eb) {
        fn();
      } else if (count > 0) {
        var me = this;
        setTimeout(function () {
          me.onEarlyBirdsLoad(fn, --count);
        }, 1000);
      } else {
        if (!earlyBirdsChecked) {
          earlyBirdsChecked = true;
          if (typeof _page !== 'undefined') {
            _page.Model.$eventContainer.trigger(window.globalTrackingEvent.EARLYBIRDS_NOT_LOADED);
          }
        }
        return false;
      }
    },
    hasSomethingToDisplay: function (domElement) {
      if (domElement.tagName === 'SCRIPT' || domElement.tagName === 'STYLE') {
        return false;
      }

      if (domElement.tagName === 'IMG' || domElement.tagName === 'IFRAME') {
        return true;
      }

      if (domElement.textContent.length > 0) {
        return true;
      }

      if (domElement.childElementCount === 0) {
        return false;
      } else {
        var result = false;
        domElement.childNodes.forEach(function (node) {
          if (Utils.Common.hasSomethingToDisplay(node)) {
            result = true;
            return false;
          }
        });
        return result;
      }
    },
    getCurrentPrivacy: function () {
      var currentCookie = Utils.CookieManager.ReadCookie('TC_PRIVACY_CENTER');
      if (currentCookie != null) {
        return currentCookie.split(',');
      }

      return [];
    },
    HighlightCustomerJourney: function (content) {
      var breabrumbItems = $('.breadcrumb__listItem');
      for(var i=0; i < breabrumbItems.length; i++) {
          var currentId = breabrumbItems[i].dataset.id;
          var foundMenuItem = $('.menu__listItem[data-id="'+ currentId +'"]');
          if(content !== undefined) {
            foundMenuItem = content.querySelectorAll('.menu__listItem[data-id="'+ currentId +'"]');
          }
          if(foundMenuItem.length > 0) {
              foundMenuItem[0].classList.add('menu__listItem--link-active');
          }
      }
    }
  };
})(window, jQuery);

Utils.CookieManager = (function (window, $, undefined) {
  return {
    EraseCookie: function (name) {
      Utils.CookieManager.CreateCookie(name, '', -1);
    },
    ReadCookie: function (name) {
      var nameEQ = escape(name) + '=';
      var ca = document.cookie.split(';');
      for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) === ' ') c = c.substring(1, c.length);

        //--  Main and Mobile site do not use same cookie encoding, so we must decode using both unescape and decodeURIComponent --//
        if (c.indexOf(nameEQ) === 0) {
          var res = '';

          try {
            res = decodeURIComponent(c.substring(nameEQ.length, c.length));
          } catch (err) {
            res = decodeURIComponent(unescape(c.substring(nameEQ.length, c.length)));
          }

          return res;
        }
      }
      return null;
    },

    CreateCookie: function (name, value, days, setRawValue, isCrossSite) {
      var expires;
      if (days && days != 0) {
        var date = new Date();
        date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
        expires = '; expires=' + date.toGMTString();
      } else {
        expires = '';
      }

      if (setRawValue != true) {
        value = escape(value);
      }

      var sameSite = '';
      if (isCrossSite == true && /OS 12_/i.test(navigator.userAgent) == false) {
        sameSite = '; secure=true; samesite=none';
      }

      document.cookie = escape(name) + '=' + value + expires + sameSite + '; path=/';
    }
  };
})(window, jQuery);

Utils.LocationManager = (function (window, $, undefined) {
  var myLocation = $.extend({}, window.location);
  return {
    initMyLocation: function () {
      myLocation = $.extend({}, window.location);
    },
    getMyLocation: function () {
      return myLocation;
    },
    setMyLocation: function (location) {
      myLocation = location;
    },
    getUrl: function () {
      var search = myLocation.search;
      if (search == '?') {
        search = '';
      }
      var hash = myLocation.hash;
      if (hash == '#') {
        hash = '';
      }
      return (myLocation.origin || myLocation.protocol + '//' + myLocation.host) + myLocation.pathname + search + hash;
    },
    updateKeyValueFromString: function (myString, key, value, sep) {
      if (key === undefined) {
        return myString;
      }
      sep = sep || '&';
      var arrKeyValue = myString.split(sep);
      var arrNewKeyValue = [];
      var hasUpdated = false;
      for (var i = 0; i < arrKeyValue.length; i++) {
        if (key == arrKeyValue[i].split('=')[0]) {
          if (value !== undefined && value !== '') {
            arrNewKeyValue.push(key + '=' + value);
          }
          hasUpdated = true;
        } else {
          if (arrKeyValue[i] != '') {
            arrNewKeyValue.push(arrKeyValue[i]);
          }
        }
      }
      if (!hasUpdated) {
        if (value !== undefined && value !== '') {
          arrNewKeyValue.push(key + '=' + value);
        }
      }
      return arrNewKeyValue.join(sep);
    },
    updateHash: function (key, value, sep) {
      var myHash = myLocation.hash;
      if (myHash === undefined) {
        myHash = '';
      }
      if (myHash.charAt(0) == '#') {
        myHash = myHash.substring(1);
      }
      var newHash = Utils.LocationManager.updateKeyValueFromString(myHash, key, value, sep);
      myLocation.hash = '#' + newHash;
    },
    updateParameter: function (key, value) {
      var mySearch = myLocation.search;
      if (mySearch === undefined) {
        mySearch = '';
      }
      if (mySearch.charAt(0) == '?') {
        mySearch = mySearch.substring(1);
      }
      var newSearch = Utils.LocationManager.updateKeyValueFromString(mySearch, key, value);
      myLocation.search = '?' + newSearch;
    }
  };
})(window, jQuery);

Utils.UrlManager = (function (window, $, undefined) {
  return {
    HasHash: function (hash) {
      var arrayHash = window.location.hash.replace('#', '').split('&');
      return arrayHash.indexOf(hash) > -1;
    },
    GetHashValue: function (key, sep) {
      if (key !== undefined) {
        sep = sep || /[|&]+/;
        if (window.location.hash.length > 0) {
          //How many key/value do we have ?
          var splitHash = window.location.hash.replace('#', '').split(sep); //we remove the # in the url

          //for each key value we parse them
          for (var i = 0; i < splitHash.length; i++) {
            if (key == splitHash[i].split('=')[0])
              if (typeof splitHash[i].split('=')[1] === undefined) return decodeURIComponent(splitHash[i].split('=')[0]);
              else return decodeURIComponent(splitHash[i].split('=')[1]);
          }
        }
        return null;
      } else {
        return decodeURIComponent(window.location.hash.replace('#', ''));
      }
    },
    RemoveHashValue: function (key, separator, shouldRewrite) {
      var newHash = '';
      if (separator === undefined) {
        if (window.location.hash.indexOf('|') !== -1 && window.location.hash.indexOf('&') !== -1) {
          console.error("Separator hash isn't defined");
        } else if (window.location.hash.indexOf('|') !== -1) separator = '|';
        else if (window.location.hash.indexOf('&') !== -1) separator = '&';
      }
      if (window.location.hash.length > 0) {
        //How many key/value do we have ?
        var splitHash = window.location.hash.replace('#', '').split(/[|&]+/); //we remove the # in the url

        //for each key value we parse them
        for (var i = 0; i < splitHash.length; i++) {
          if (key == splitHash[i].split('=')[0]) splitHash.splice(i, 1);
        }
        if (shouldRewrite === false) {
          newHash = splitHash.join(separator);
        } else {
          window.location.hash = splitHash.join(separator);
        }
      }
      if (shouldRewrite === false) {
        return (window.location.origin || window.location.protocol + '//' + window.location.host) + window.location.pathname + window.location.search + newHash;
      } else {
        return window.location.href;
      }
    },
    addOrChangeHashValue: function (key, value, shouldRewrite) {
      if (typeof key !== 'string' || (typeof value !== 'string' && typeof value !== 'number')) return window.location.href;

      //First remove so that we change hash value
      this.RemoveHashValue(key);

      var newHash = window.location.hash;
      if (newHash.length > 0) newHash += '&';
      newHash += key + '=' + value;

      if (shouldRewrite === false) {
        return (window.location.origin || window.location.protocol + '//' + window.location.host) + window.location.pathname + window.location.search + newHash;
      } else {
        window.location.hash = newHash;
        return window.location.href;
      }
    },
    updateHashFromUrl: function (url, paramName, paramValue) {
      var hashPosition = url.indexOf('#'),
        hasHash = hashPosition > -1,
        urlHash = '',
        pattern = new RegExp('(\\#|\\&)(' + paramName + '=).*?(&|$)', 'i'),
        newUrl = url;

      if (hasHash) {
        urlHash = url.substring(hashPosition);
        newUrl = url.substring(0, hashPosition);
      }

      if (urlHash.search(pattern) >= 0) {
        urlHash = urlHash.replace(pattern, '$1$2' + paramValue + '$3');
      } else {
        urlHash = urlHash + (urlHash.indexOf('#') >= 0 ? '&' : '#') + paramName + '=' + paramValue;
      }

      newUrl += urlHash;

      return newUrl;
    },
    removeHashFromUrl: function (url, paramName) {
      var regex = new RegExp('&?' + paramName + '=([^&]$|[^&]*)', 'i');
      // var regex = new RegExp('(\\#|\\&)(' + paramName + '=).*?(&|$)', 'i');
      var replaceResult = url.replace(regex, '');

      replaceResult = replaceResult.replace('#&', '#');

      return replaceResult.indexOf('#', replaceResult.length - 1) !== -1 ? replaceResult.split('#')[0] : replaceResult;
    },
    getUrlParameter: function (sParam, customSearch) {
      var sPageURL = customSearch !== undefined ? customSearch : window.location.search.substring(1);
      var sURLVariables = sPageURL.split('&');
      for (var i = 0; i < sURLVariables.length; i++) {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0].toLowerCase() == sParam.toLowerCase()) {
          return decodeURIComponent(sParameterName[1]);
        }
      }
    },
    addOrChangeParameterFromUrl: function (url, paramName, paramValue) {
      var hashPosition = url.indexOf('#'),
        hasHash = hashPosition > -1,
        urlHash = '',
        pattern = new RegExp('(\\?|\\&)(' + paramName + '=).*?(&|$)', 'i'),
        newUrl = url;

      if (hasHash) {
        urlHash = url.substring(hashPosition);
        newUrl = url.substring(0, hashPosition);
      }

      if (newUrl.search(pattern) >= 0) {
        newUrl = url.replace(pattern, '$1$2' + paramValue + '$3');
      } else {
        newUrl = newUrl + (newUrl.indexOf('?') >= 0 ? '&' : '?') + paramName + '=' + paramValue;
      }

      newUrl += urlHash;

      return newUrl;
    },
    removeParameterFromUrl: function (url, sParam) {
      var regex = new RegExp('&?' + sParam + '=([^&]$|[^&]*)', 'i');
      var hash = '';
      var hashPosition = url.indexOf('#');
      if (hashPosition > -1) {
        hash = url.substring(hashPosition);
        url = url.substring(0, hashPosition);
      }
      var replaceResult = url.replace(regex, '');

      return (replaceResult.indexOf('?', replaceResult.length - 1) !== -1 ? replaceResult.split('?')[0] : replaceResult) + hash;
    },
    getLastElementFromUrl: function (url) {
      var split = url.split('/');
      return split[split.length - 1];
    }
  };
})(window, jQuery);

Utils.OmnitureManager = (function (window, $, undefined) {
  return {
    addEvents: function (eventsName) {
      if (window.wa_data !== undefined && window.wa_data.events !== undefined) {
        var eventsList = eventsName.split(',');
        for (var i = 0; i < eventsList.length; i++) {
          if (window.wa_data.events.indexOf(eventsList[i]) === -1) window.wa_data.events = window.wa_data.events.length > 0 ? window.wa_data.events + ',' + eventsList[i] : eventsList[i];
        }
      }
    },
    removeEvents: function (eventsName) {
      if (window.wa_data.events !== undefined) {
        var eventsList = window.wa_data.events.split(',');
        var eventsToRemove = eventsName.split(',');
        for (var i = 0; i < eventsToRemove.length; i++) {
          var eventIndex = $.inArray(eventsToRemove[i], eventsList);
          if (eventIndex > -1) {
            eventsList.splice(eventIndex, 1);
          }
        }
        window.wa_data.events = eventsList.join(',');
      }
    },
    addShoppingToolHash: function ($link, shoppingToolValue) {
      var href = $link.attr('href');
      if (!href) {
        return;
      }
      if (href.indexOf('#') !== -1) {
        href += '&';
      } else {
        href += '#';
      }

      if (shoppingToolValue.indexOf('#') !== -1) {
        var rebuildParameter = shoppingToolValue.split('#');
        shoppingToolValue = rebuildParameter[0];
      }

      href += 'shoppingtool=' + shoppingToolValue;
      $link.attr('href', href);
    }
  };
})(window, jQuery);

Utils.StorageManager = (function (window, $, undefined) {
  var storageAvailable;
  var fromSession;

  return {
    isLocalStorageEnabled: function () {
      if (window.localStorage === null) {
        storageAvailable = false;
      } else {
        if (storageAvailable === undefined) {
          try {
            localStorage.setItem('__test', 'data');
          } catch (e) {
            storageAvailable = false;
          }

          if (storageAvailable === undefined) {
            storageAvailable = true;
          }
        }
      }

      return storageAvailable;
    },
    EraseStorageValue: function (name, fromSession) {
      fromSession = fromSession === undefined ? true : fromSession;

      if (this.isLocalStorageEnabled()) {
        if (fromSession) sessionStorage.removeItem(name);
        else localStorage.removeItem(name);
      } else Utils.CookieManager.CreateCookie(name, '', -1);
    },
    ReadStorageValue: function (name, fromSession) {
      fromSession = fromSession === undefined ? true : fromSession;

      // set by default to null because sessionStore or ReadCookie return if key "name" was not found
      var ret = null;

      if (this.isLocalStorageEnabled()) {
        if (fromSession) ret = sessionStorage.getItem(name);
        else ret = localStorage.getItem(name);
      } else ret = Utils.CookieManager.ReadCookie(name);

      if (ret !== null && typeof ret === 'string') {
        var backup = ret;
        try {
          ret = JSON.parse(ret);
        } catch (e) {
          console.log('UTILS : can JSON parse ' + (storageAvailable ? 'session storage' : 'cookie') + ' ' + name + ' with value : ' + backup);
          ret = backup;
        }
      }

      return ret;
    },
    CreateStorageValue: function (name, value, days) {
      if (typeof value === 'object') {
        value = JSON.stringify(value);
      }
      if (this.isLocalStorageEnabled()) {
        if (days === undefined) sessionStorage.setItem(name, value);
        else localStorage.setItem(name, value);
      } else {
        Utils.CookieManager.CreateCookie(name, value, days);
      }
      return value;
    },
    createLocalStorageValue: function (name, value) {
      return this.CreateStorageValue(name, value, 30);
    },
    eraseLocalStorageValue: function (name) {
      this.EraseStorageValue(name, false);
    },
    readLocalStorageValue: function (name) {
      return this.ReadStorageValue(name, false);
    }
  };
})(window, jQuery);
;
(function(u){var l;"undefined"!==typeof window?l=window:"undefined"!==typeof self&&(l=self);l.lazyload=u()})(function(){return function l(n,k,e){function r(g,m){if(!k[g]){if(!n[g]){var f="function"==typeof require&&require;if(!m&&f)return f(g,!0);if(t)return t(g,!0);f=Error("Cannot find module '"+g+"'");throw f.code="MODULE_NOT_FOUND",f;}f=k[g]={exports:{}};n[g][0].call(f.exports,function(e){var c=n[g][1][e];return r(c?c:e)},f,f.exports,l,n,k,e)}return k[g].exports}for(var t="function"==typeof require&&
require,m=0;m<e.length;m++)r(e[m]);return r}({1:[function(l,n,k){(function(e){function r(c){-1===k.call(p,c)&&p.push(c)}function t(c){function b(b){var d;d="function"===typeof c.src?c.src(b):b.getAttribute(c.src);d&&(b.src=d);b.setAttribute("data-lzled",!0);a[k.call(a,b)]=null}c=g({offset:333,src:"data-src",container:!1},c||{});"string"===typeof c.src&&r(c.src);var a=[];return function(h){h.onload=null;h.removeAttribute("onload");h.onerror=null;h.removeAttribute("onerror");-1===k.call(a,h)&&f(h,c,
b)}}function m(c){c="HTML"+c+"Element";if(!1!==c in e){var b=e[c].prototype.getAttribute;e[c].prototype.getAttribute=function(a){if("src"===a){for(var h,d=0,c=p.length;d<c&&!(h=b.call(this,p[d]));d++);return h||b.call(this,a)}return b.call(this,a)}}}function g(c,b){for(var a in c)void 0===b[a]&&(b[a]=c[a]);return b}function k(c){for(var b=this.length;b--&&this[b]!==c;);return b}n.exports=t;var f=l("in-viewport"),p=["data-src"];e.lzld=t();m("Image");m("IFrame")}).call(this,"undefined"!==typeof global?
global:"undefined"!==typeof self?self:"undefined"!==typeof window?window:{})},{"in-viewport":2}],2:[function(l,n,k){(function(e){function k(b,a,h){b.attachEvent?b.attachEvent("on"+a,h):b.addEventListener(a,h,!1)}function l(b,a,h){var d;return function(){var c=this,e=arguments,w=h&&!d;clearTimeout(d);d=setTimeout(function(){d=null;h||b.apply(c,e)},a);w&&b.apply(c,e)}}function m(b){function a(b,a,c){return{watch:function(){d.add(b,a,c)},dispose:function(){d.remove(b)}}}function h(a,d){if(!(c(e.document.documentElement,
a)&&c(e.document.documentElement,b)&&a.offsetWidth&&a.offsetHeight))return!1;var h=a.getBoundingClientRect(),f,q,k,g;b===e.document.body?(f=-d,q=-d,k=e.document.documentElement.clientWidth+d,g=e.document.documentElement.clientHeight+d):(g=b.getBoundingClientRect(),f=g.top-d,q=g.left-d,k=g.right+d,g=g.bottom+d);return h.right>=q&&h.left<=k&&h.bottom>=f&&h.top<=g}var d=g(),q=b===e.document.body?e:b,f=l(d.checkAll(function(b,a,c){h(b,a)&&(d.remove(b),c(b))}),15);k(q,"scroll",f);q===e&&k(e,"resize",f);
p&&v(d,b,f);setInterval(f,150);return{container:b,isInViewport:function(b,d,c){if(!c)return h(b,d);b=a(b,d,c);b.watch();return b}}}function g(){function b(b){for(var a=c.length-1;0<=a;a--)if(c[a][0]===b)return a;return-1}function a(a){return-1!==b(a)}var c=[];return{add:function(b,e,f){a(b)||c.push([b,e,f])},remove:function(a){a=b(a);-1!==a&&c.splice(a,1)},isWatched:a,checkAll:function(b){return function(){for(var a=c.length-1;0<=a;a--)b.apply(this,c[a])}}}}function v(b,a,c){function d(a){a=g.call([],
Array.prototype.slice.call(a.addedNodes),a.target);return 0<f.call(a,b.isWatched).length}var e=new MutationObserver(function(a){!0===a.some(d)&&setTimeout(c,0)}),f=Array.prototype.filter,g=Array.prototype.concat;e.observe(a,{childList:!0,subtree:!0,attributes:!0})}n.exports=function(b,a,c){var d=e.document.body;if(void 0===a||"function"===typeof a)c=a,a={};d=a.container||d;a=a.offset||0;for(var g=0;g<f.length;g++)if(f[g].container===d)return f[g].isInViewport(b,a,c);return f[f.push(m(d))-1].isInViewport(b,
a,c)};var f=[],p="function"===typeof e.MutationObserver,c=e.document.documentElement.compareDocumentPosition?function(b,a){return!!(b.compareDocumentPosition(a)&16)}:e.document.documentElement.contains?function(b,a){return b!==a&&(b.contains?b.contains(a):!1)}:function(b,a){for(;a=a.parentNode;)if(a===b)return!0;return!1}}).call(this,"undefined"!==typeof global?global:"undefined"!==typeof self?self:"undefined"!==typeof window?window:{})},{}]},{},[1])(1)});;
(function ($, undefined) {
    'use strict';
    var defaults = {
        item: 3,
        autoWidth: false,
        slideMove: 1,
        slideMargin: 10,
        addClass: '',
        mode: 'slide',
        useCSS: true,
        cssEasing: 'ease', //'cubic-bezier(0.25, 0, 0.25, 1)',
        easing: 'linear', //'for jquery animation',//
        speed: 400, //ms'
        auto: false,
        pauseOnHover: false,
        loop: false,
        slideEndAnimation: true,
        pause: 2000,
        keyPress: false,
        controls: true,
        prevHtml: '',
        nextHtml: '',
        rtl: false,
        adaptiveHeight: false,
        vertical: false,
        verticalHeight: 500,
        vThumbWidth: 100,
        thumbItem: 10,
        pager: true,
        gallery: false,
        galleryMargin: 5,
        thumbMargin: 5,
        currentPagerPosition: 'middle',
        enableTouch: true,
        enableDrag: true,
        freeMove: true,
        swipeThreshold: 40,
        responsive: [],
        /* jshint ignore:start */
        onBeforeStart: function ($el) {},
        onSliderLoad: function ($el) {},
        onBeforeSlide: function ($el, scene) {},
        onAfterSlide: function ($el, scene) {},
        onBeforeNextSlide: function ($el, scene) {},
        onBeforePrevSlide: function ($el, scene) {}
        /* jshint ignore:end */
    };
    $.fn.lightSlider = function (options) {
        if (this.length === 0) {
            return this;
        }

        if (this.length > 1) {
            this.each(function () {
                $(this).lightSlider(options);
            });
            return this;
        }

        var plugin = {},
            settings = $.extend(true, {}, defaults, options),
            settingsTemp = {},
            $el = this;
        plugin.$el = this;

        if (settings.mode === 'fade') {
            settings.vertical = false;
        }
        var $children = $el.children(),
            windowW = $(window).width(),
            breakpoint = null,
            resposiveObj = null,
            length = 0,
            w = 0,
            on = false,
            elSize = 0,
            $slide = '',
            scene = 0,
            property = (settings.vertical === true) ? 'height' : 'width',
            gutter = (settings.vertical === true) ? 'margin-bottom' : 'margin-right',
            slideValue = 0,
            pagerWidth = 0,
            slideWidth = 0,
            thumbWidth = 0,
            interval = null,
            isTouch = ('ontouchstart' in document.documentElement);
        var refresh = {};

        refresh.chbreakpoint = function () {
            windowW = $(window).width();
            if (settings.responsive.length) {
                var item;
                if (settings.autoWidth === false) {
                    item = settings.item;
                }
                if (windowW < settings.responsive[0].breakpoint) {
                    for (var i = 0; i < settings.responsive.length; i++) {
                        if (windowW < settings.responsive[i].breakpoint) {
                            breakpoint = settings.responsive[i].breakpoint;
                            resposiveObj = settings.responsive[i];
                        }
                    }
                }
                if (typeof resposiveObj !== 'undefined' && resposiveObj !== null) {
                    for (var j in resposiveObj.settings) {
                        if (resposiveObj.settings.hasOwnProperty(j)) {
                            if (typeof settingsTemp[j] === 'undefined' || settingsTemp[j] === null) {
                                settingsTemp[j] = settings[j];
                            }
                            settings[j] = resposiveObj.settings[j];
                        }
                    }
                }
                if (!$.isEmptyObject(settingsTemp) && windowW > settings.responsive[0].breakpoint) {
                    for (var k in settingsTemp) {
                        if (settingsTemp.hasOwnProperty(k)) {
                            settings[k] = settingsTemp[k];
                        }
                    }
                }
                if (settings.autoWidth === false) {
                    if (slideValue > 0 && slideWidth > 0) {
                        if (item !== settings.item) {
                            scene = Math.round(slideValue / ((slideWidth + settings.slideMargin) * settings.slideMove));
                        }
                    }
                }
            }
        };

        refresh.calSW = function () {
            if (settings.autoWidth === false) {
                slideWidth = (elSize - ((settings.item * (settings.slideMargin)) - settings.slideMargin)) / settings.item;
            }
        };

        refresh.calWidth = function (cln) {
            var ln = cln === true ? $slide.find('.lslide').length : $children.length;
            if (settings.autoWidth === false) {
                w = ln * (slideWidth + settings.slideMargin);
            } else {
                w = 0;
                for (var i = 0; i < ln; i++) {
                    w += (parseInt($children.eq(i).width()) + settings.slideMargin);
                }
            }
            return w;
        };
        plugin = {
            doCss: function () {
                var support = function () {
                    var transition = ['transition', 'MozTransition', 'WebkitTransition', 'OTransition', 'msTransition', 'KhtmlTransition'];
                    var root = document.documentElement;
                    for (var i = 0; i < transition.length; i++) {
                        if (transition[i] in root.style) {
                            return true;
                        }
                    }
                };
                if (settings.useCSS && support()) {
                    return true;
                }
                return false;
            },
            keyPress: function () {
                if (settings.keyPress) {
                    $(document).on('keyup.lightslider', function (e) {
                        if (!$(':focus').is('input, textarea')) {
                            if (e.preventDefault) {
                                e.preventDefault();
                            } else {
                                e.returnValue = false;
                            }
                            if (e.keyCode === 37) {
                                $el.goToPrevSlide();
                            } else if (e.keyCode === 39) {
                                $el.goToNextSlide();
                            }
                        }
                    });
                }
            },
            controls: function () {
                if (settings.controls) {
                    $el.after('<div class="lSAction"><a class="lSPrev">' + settings.prevHtml + '</a><a class="lSNext">' + settings.nextHtml + '</a></div>');
                    if (!settings.autoWidth) {
                        if (length <= settings.item) {
                            $slide.find('.lSAction').hide();
                        }
                    } else {
                        if (refresh.calWidth(false) < elSize) {
                            $slide.find('.lSAction').hide();
                        }
                    }
                    $slide.find('.lSAction a').on('click', function (e) {
                        if (e.preventDefault) {
                            e.preventDefault();
                        } else {
                            e.returnValue = false;
                        }
                        if ($(this).attr('class') === 'lSPrev') {
                            $el.goToPrevSlide();
                        } else {
                            $el.goToNextSlide();
                        }
                        return false;
                    });
                }
            },
            initialStyle: function () {
                var $this = this;
                if (settings.mode === 'fade') {
                    settings.autoWidth = false;
                    settings.slideEndAnimation = false;
                }
                if (settings.auto) {
                    settings.slideEndAnimation = false;
                }
                if (settings.autoWidth) {
                    settings.slideMove = 1;
                    settings.item = 1;
                }
                if (settings.loop) {
                    settings.slideMove = 1;
                    settings.freeMove = false;
                }
                settings.onBeforeStart.call(this, $el);
                refresh.chbreakpoint();
                $el.addClass('lightSlider').wrap('<div class="lSSlideOuter ' + settings.addClass + '"><div class="lSSlideWrapper"></div></div>');
                $slide = $el.parent('.lSSlideWrapper');
                if (settings.rtl === true) {
                    $slide.parent().addClass('lSrtl');
                }
                if (settings.vertical) {
                    $slide.parent().addClass('vertical');
                    elSize = settings.verticalHeight;
                    $slide.css('height', elSize + 'px');
                } else {
                    elSize = $el.outerWidth();
                }
                $children.addClass('lslide');
                if (settings.loop === true && settings.mode === 'slide') {
                    refresh.calSW();
                    refresh.clone = function () {
                        if (refresh.calWidth(true) > elSize) {
                            /**/
                            var tWr = 0,
                                tI = 0;
                            for (var k = 0; k < $children.length; k++) {
                                tWr += (parseInt($el.find('.lslide').eq(k).width()) + settings.slideMargin);
                                tI++;
                                if (tWr >= (elSize + settings.slideMargin)) {
                                    break;
                                }
                            }
                            var tItem = settings.autoWidth === true ? tI : settings.item;

                            /**/
                            if (tItem < $el.find('.clone.left').length) {
                                for (var i = 0; i < $el.find('.clone.left').length - tItem; i++) {
                                    $children.eq(i).remove();
                                }
                            }
                            if (tItem < $el.find('.clone.right').length) {
                                for (var j = $children.length - 1; j > ($children.length - 1 - $el.find('.clone.right').length); j--) {
                                    scene--;
                                    $children.eq(j).remove();
                                }
                            }
                            /**/
                            for (var n = $el.find('.clone.right').length; n < tItem; n++) {
                                $el.find('.lslide').eq(n).clone().removeClass('lslide').addClass('clone right').appendTo($el);
                                scene++;
                            }
                            for (var m = $el.find('.lslide').length - $el.find('.clone.left').length; m > ($el.find('.lslide').length - tItem); m--) {
                                $el.find('.lslide').eq(m - 1).clone().removeClass('lslide').addClass('clone left').prependTo($el);
                            }
                            $children = $el.children();
                        } else {
                            if ($children.hasClass('clone')) {
                                $el.find('.clone').remove();
                                $this.move($el, 0);
                            }
                        }
                    };
                    refresh.clone();
                }
                refresh.sSW = function () {
                    length = $children.length;
                    if (settings.rtl === true && settings.vertical === false) {
                        gutter = 'margin-left';
                    }
                    if (settings.autoWidth === false) {
                        $children.css(property, slideWidth + 'px');
                    }
                    $children.css(gutter, settings.slideMargin + 'px');
                    w = refresh.calWidth(false);
                    $el.css(property, w + 'px');
                    if (settings.loop === true && settings.mode === 'slide') {
                        if (on === false) {
                            scene = $el.find('.clone.left').length;
                        }
                    }
                };
                refresh.calL = function () {
                    $children = $el.children();
                    length = $children.length;
                };
                if (this.doCss()) {
                    $slide.addClass('usingCss');
                }
                refresh.calL();
                if (settings.mode === 'slide') {
                    refresh.calSW();
                    refresh.sSW();
                    if (settings.loop === true) {
                        slideValue = $this.slideValue();
                        this.move($el, slideValue);
                    }
                    if (settings.vertical === false) {
                        this.setHeight($el, false);
                    }

                } else {
                    this.setHeight($el, true);
                    $el.addClass('lSFade');
                    if (!this.doCss()) {
                        $children.fadeOut(0);
                        $children.eq(scene).fadeIn(0);
                    }
                }
                if (settings.loop === true && settings.mode === 'slide') {
                    $children.eq(scene).addClass('active');
                } else {
                    $children.first().addClass('active');
                }
            },
            pager: function () {
                var $this = this;
                refresh.createPager = function () {
                    thumbWidth = (elSize - ((settings.thumbItem * (settings.thumbMargin)) - settings.thumbMargin)) / settings.thumbItem;
                    var $children = $slide.find('.lslide');
                    var length = $slide.find('.lslide').length;
                    var i = 0,
                        pagers = '',
                        v = 0;
                    for (i = 0; i < length; i++) {
                        if (settings.mode === 'slide') {
                            // calculate scene * slide value
                            if (!settings.autoWidth) {
                                v = i * ((slideWidth + settings.slideMargin) * settings.slideMove);
                            } else {
                                v += ((parseInt($children.eq(i).width()) + settings.slideMargin) * settings.slideMove);
                            }
                        }
                        var thumb = $children.eq(i * settings.slideMove).attr('data-thumb');
                        if (settings.gallery === true) {
                            pagers += '<li style="width:100%;' + property + ':' + thumbWidth + 'px;' + gutter + ':' + settings.thumbMargin + 'px"><a href="#"><img src="' + thumb + '" /></a></li>';
                        } else {
                            pagers += '<li><a href="#">' + (i + 1) + '</a></li>';
                        }
                        if (settings.mode === 'slide') {
                            if ((v) >= w - elSize - settings.slideMargin) {
                                i = i + 1;
                                var minPgr = 2;
                                if (settings.autoWidth) {
                                    pagers += '<li><a href="#">' + (i + 1) + '</a></li>';
                                    minPgr = 1;
                                }
                                if (i < minPgr) {
                                    pagers = null;
                                    $slide.parent().addClass('noPager');
                                } else {
                                    $slide.parent().removeClass('noPager');
                                }
                                break;
                            }
                        }
                    }
                    var $cSouter = $slide.parent();
                    $cSouter.find('.lSPager').html(pagers); 
                    if (settings.gallery === true) {
                        if (settings.vertical === true) {
                            // set Gallery thumbnail width
                            $cSouter.find('.lSPager').css('width', settings.vThumbWidth + 'px');
                        }
                        pagerWidth = (i * (settings.thumbMargin + thumbWidth)) + 0.5;
                        $cSouter.find('.lSPager').css({
                            property: pagerWidth + 'px',
                            'transition-duration': settings.speed + 'ms'
                        });
                        if (settings.vertical === true) {
                            $slide.parent().css('padding-right', (settings.vThumbWidth + settings.galleryMargin) + 'px');
                        }
                        $cSouter.find('.lSPager').css(property, pagerWidth + 'px');
                    }
                    var $pager = $cSouter.find('.lSPager').find('li');
                    $pager.first().addClass('active');
                    $pager.on('click', function () {
                        if (settings.loop === true && settings.mode === 'slide') {
                            scene = scene + ($pager.index(this) - $cSouter.find('.lSPager').find('li.active').index());
                        } else {
                            scene = $pager.index(this);
                        }
                        $el.mode(false);
                        if (settings.gallery === true) {
                            $this.slideThumb();
                        }
                        return false;
                    });
                };
                if (settings.pager) {
                    var cl = 'lSpg';
                    if (settings.gallery) {
                        cl = 'lSGallery';
                    }
                    $slide.after('<ul class="lSPager ' + cl + '"></ul>');
                    var gMargin = (settings.vertical) ? 'margin-left' : 'margin-top';
                    $slide.parent().find('.lSPager').css(gMargin, settings.galleryMargin + 'px');
                    refresh.createPager();
                }

                setTimeout(function () {
                    refresh.init();
                }, 0);
            },
            setHeight: function (ob, fade) {
                var obj = null,
                    $this = this;
                if (settings.loop) {
                    obj = ob.children('.lslide ').first();
                } else {
                    obj = ob.children().first();
                }
                var setCss = function () {
                    var tH = obj.outerHeight(),
                        tP = 0,
                        tHT = tH;
                    if (fade) {
                        tH = 0;
                        tP = ((tHT) * 100) / elSize;
                    }
                    ob.css({
                        'height': tH + 'px',
                        'padding-bottom': tP + '%'
                    });
                };
                setCss();
                if (obj.find('img').length) {
                    if ( obj.find('img')[0].complete) {
                        setCss();
                        if (!interval) {
                            $this.auto();
                        }   
                    }else{
                        obj.find('img').on('load', function () {
                            setTimeout(function () {
                                setCss();
                                if (!interval) {
                                    $this.auto();
                                }
                            }, 100);
                        });
                    }
                }else{
                    if (!interval) {
                        $this.auto();
                    }
                }
            },
            active: function (ob, t) {
                if (this.doCss() && settings.mode === 'fade') {
                    $slide.addClass('on');
                }
                var sc = 0;
                if (scene * settings.slideMove < length) {
                    ob.removeClass('active');
                    if (!this.doCss() && settings.mode === 'fade' && t === false) {
                        ob.fadeOut(settings.speed);
                    }
                    if (t === true) {
                        sc = scene;
                    } else {
                        sc = scene * settings.slideMove;
                    }
                    //t === true ? sc = scene : sc = scene * settings.slideMove;
                    var l, nl;
                    if (t === true) {
                        l = ob.length;
                        nl = l - 1;
                        if (sc + 1 >= l) {
                            sc = nl;
                        }
                    }
                    if (settings.loop === true && settings.mode === 'slide') {
                        //t === true ? sc = scene - $el.find('.clone.left').length : sc = scene * settings.slideMove;
                        if (t === true) {
                            sc = scene - $el.find('.clone.left').length;
                        } else {
                            sc = scene * settings.slideMove;
                        }
                        if (t === true) {
                            l = ob.length;
                            nl = l - 1;
                            if (sc + 1 === l) {
                                sc = nl;
                            } else if (sc + 1 > l) {
                                sc = 0;
                            }
                        }
                    }

                    if (!this.doCss() && settings.mode === 'fade' && t === false) {
                        ob.eq(sc).fadeIn(settings.speed);
                    }
                    ob.eq(sc).addClass('active');
                } else {
                    ob.removeClass('active');
                    ob.eq(ob.length - 1).addClass('active');
                    if (!this.doCss() && settings.mode === 'fade' && t === false) {
                        ob.fadeOut(settings.speed);
                        ob.eq(sc).fadeIn(settings.speed);
                    }
                }
            },
            move: function (ob, v) {
                if (settings.rtl === true) {
                    v = -v;
                }
                if (this.doCss()) {
                    if (settings.vertical === true) {
                        ob.css({
                            'transform': 'translate3d(0px, ' + (-v) + 'px, 0px)',
                            '-webkit-transform': 'translate3d(0px, ' + (-v) + 'px, 0px)'
                        });
                    } else {
                        ob.css({
                            'transform': 'translate3d(' + (-v) + 'px, 0px, 0px)',
                            '-webkit-transform': 'translate3d(' + (-v) + 'px, 0px, 0px)',
                        });
                    }
                } else {
                    if (settings.vertical === true) {
                        ob.css('position', 'relative').animate({
                            top: -v + 'px'
                        }, settings.speed, settings.easing);
                    } else {
                        ob.css('position', 'relative').animate({
                            left: -v + 'px'
                        }, settings.speed, settings.easing);
                    }
                }
                var $thumb = $slide.parent().find('.lSPager').find('li');
                this.active($thumb, true);
            },
            fade: function () {
                this.active($children, false);
                var $thumb = $slide.parent().find('.lSPager').find('li');
                this.active($thumb, true);
            },
            slide: function () {
                var $this = this;
                refresh.calSlide = function () {
                    if (w > elSize) {
                        slideValue = $this.slideValue();
                        $this.active($children, false);
                        if ((slideValue) > w - elSize - settings.slideMargin) {
                            slideValue = w - elSize - settings.slideMargin;
                        } else if (slideValue < 0) {
                            slideValue = 0;
                        }
                        $this.move($el, slideValue);
                        if (settings.loop === true && settings.mode === 'slide') {
                            if (scene >= (length - ($el.find('.clone.left').length / settings.slideMove))) {
                                $this.resetSlide($el.find('.clone.left').length);
                            }
                            if (scene === 0) {
                                $this.resetSlide($slide.find('.lslide').length);
                            }
                        }
                    }
                };
                refresh.calSlide();
            },
            resetSlide: function (s) {
                var $this = this;
                $slide.find('.lSAction a').addClass('disabled');
                setTimeout(function () {
                    scene = s;
                    $slide.css('transition-duration', '0ms');
                    slideValue = $this.slideValue();
                    $this.active($children, false);
                    plugin.move($el, slideValue);
                    setTimeout(function () {
                        $slide.css('transition-duration', settings.speed + 'ms');
                        $slide.find('.lSAction a').removeClass('disabled');
                    }, 50);
                }, settings.speed + 100);
            },
            slideValue: function () {
                var _sV = 0;
                if (settings.autoWidth === false) {
                    _sV = scene * ((slideWidth + settings.slideMargin) * settings.slideMove);
                } else {
                    _sV = 0;
                    for (var i = 0; i < scene; i++) {
                        _sV += (parseInt($children.eq(i).width()) + settings.slideMargin);
                    }
                }
                return _sV;
            },
            slideThumb: function () {
                var position;
                switch (settings.currentPagerPosition) {
                case 'left':
                    position = 0;
                    break;
                case 'middle':
                    position = (elSize / 2) - (thumbWidth / 2);
                    break;
                case 'right':
                    position = elSize - thumbWidth;
                }
                var sc = scene - $el.find('.clone.left').length;
                var $pager = $slide.parent().find('.lSPager');
                if (settings.mode === 'slide' && settings.loop === true) {
                    if (sc >= $pager.children().length) {
                        sc = 0;
                    } else if (sc < 0) {
                        sc = $pager.children().length;
                    }
                }
                var thumbSlide = sc * ((thumbWidth + settings.thumbMargin)) - (position);
                if ((thumbSlide + elSize) > pagerWidth) {
                    thumbSlide = pagerWidth - elSize - settings.thumbMargin;
                }
                if (thumbSlide < 0) {
                    thumbSlide = 0;
                }
                this.move($pager, thumbSlide);
            },
            auto: function () {
                if (settings.auto) {
                    clearInterval(interval);
                    interval = setInterval(function () {
                        $el.goToNextSlide();
                    }, settings.pause);
                }
            },
            pauseOnHover: function(){
                var $this = this;
                if (settings.auto && settings.pauseOnHover) {
                    $slide.on('mouseenter', function(){
                        $(this).addClass('ls-hover');
                        $el.pause();
                        settings.auto = true;
                    });
                    $slide.on('mouseleave',function(){
                        $(this).removeClass('ls-hover');
                        if (!$slide.find('.lightSlider').hasClass('lsGrabbing')) {
                            $this.auto();
                        }
                    });
                }
            },
            touchMove: function (endCoords, startCoords) {
                $slide.css('transition-duration', '0ms');
                if (settings.mode === 'slide') {
                    var distance = endCoords - startCoords;
                    var swipeVal = slideValue - distance;
                    if ((swipeVal) >= w - elSize - settings.slideMargin) {
                        if (settings.freeMove === false) {
                            swipeVal = w - elSize - settings.slideMargin;
                        } else {
                            var swipeValT = w - elSize - settings.slideMargin;
                            swipeVal = swipeValT + ((swipeVal - swipeValT) / 5);

                        }
                    } else if (swipeVal < 0) {
                        if (settings.freeMove === false) {
                            swipeVal = 0;
                        } else {
                            swipeVal = swipeVal / 5;
                        }
                    }
                    this.move($el, swipeVal);
                }
            },

            touchEnd: function (distance) {
                $slide.css('transition-duration', settings.speed + 'ms');
                if (settings.mode === 'slide') {
                    var mxVal = false;
                    var _next = true;
                    slideValue = slideValue - distance;
                    if ((slideValue) > w - elSize - settings.slideMargin) {
                        slideValue = w - elSize - settings.slideMargin;
                        if (settings.autoWidth === false) {
                            mxVal = true;
                        }
                    } else if (slideValue < 0) {
                        slideValue = 0;
                    }
                    var gC = function (next) {
                        var ad = 0;
                        if (!mxVal) {
                            if (next) {
                                ad = 1;
                            }
                        }
                        if (!settings.autoWidth) {
                            var num = slideValue / ((slideWidth + settings.slideMargin) * settings.slideMove);
                            scene = parseInt(num) + ad;
                            if (slideValue >= (w - elSize - settings.slideMargin)) {
                                if (num % 1 !== 0) {
                                    scene++;
                                }
                            }
                        } else {
                            var tW = 0;
                            for (var i = 0; i < $children.length; i++) {
                                tW += (parseInt($children.eq(i).width()) + settings.slideMargin);
                                scene = i + ad;
                                if (tW >= slideValue) {
                                    break;
                                }
                            }
                        }
                    };
                    if (distance >= settings.swipeThreshold) {
                        gC(false);
                        _next = false;
                    } else if (distance <= -settings.swipeThreshold) {
                        gC(true);
                        _next = false;
                    }
                    $el.mode(_next);
                    this.slideThumb();
                } else {
                    if (distance >= settings.swipeThreshold) {
                        $el.goToPrevSlide();
                    } else if (distance <= -settings.swipeThreshold) {
                        $el.goToNextSlide();
                    }
                }
            },



            enableDrag: function () {
                var $this = this;
                if (!isTouch) {
                    var startCoords = 0,
                        endCoords = 0,
                        isDraging = false;
                    $slide.find('.lightSlider').addClass('lsGrab');
                    $slide.on('mousedown', function (e) {
                        if (w < elSize) {
                            if (w !== 0) {
                                return false;
                            }
                        }
                        if ($(e.target).attr('class') !== ('lSPrev') && $(e.target).attr('class') !== ('lSNext')) {
                            startCoords = (settings.vertical === true) ? e.pageY : e.pageX;
                            isDraging = true;
                            if (e.preventDefault) {
                                e.preventDefault();
                            } else {
                                e.returnValue = false;
                            }
                            // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723
                            $slide.scrollLeft += 1;
                            $slide.scrollLeft -= 1;
                            // *
                            $slide.find('.lightSlider').removeClass('lsGrab').addClass('lsGrabbing');
                            clearInterval(interval);
                        }
                    });
                    $(window).on('mousemove', function (e) {
                        if (isDraging) {
                            endCoords = (settings.vertical === true) ? e.pageY : e.pageX;
                            $this.touchMove(endCoords, startCoords);
                        }
                    });
                    $(window).on('mouseup', function (e) {
                        if (isDraging) {
                            $slide.find('.lightSlider').removeClass('lsGrabbing').addClass('lsGrab');
                            isDraging = false;
                            endCoords = (settings.vertical === true) ? e.pageY : e.pageX;
                            var distance = endCoords - startCoords;
                            if (Math.abs(distance) >= settings.swipeThreshold) {
                                $(window).on('click.ls', function (e) {
                                    if (e.preventDefault) {
                                        e.preventDefault();
                                    } else {
                                        e.returnValue = false;
                                    }
                                    e.stopImmediatePropagation();
                                    e.stopPropagation();
                                    $(window).off('click.ls');
                                });
                            }

                            $this.touchEnd(distance);

                        }
                    });
                }
            },




            enableTouch: function () {
                var $this = this;
                if (isTouch) {
                    var startCoords = {},
                        endCoords = {};
                    $slide.on('touchstart', function (e) {
                        endCoords = e.originalEvent.targetTouches[0];
                        startCoords.pageX = e.originalEvent.targetTouches[0].pageX;
                        startCoords.pageY = e.originalEvent.targetTouches[0].pageY;
                        clearInterval(interval);
                    });
                    $slide.on('touchmove', function (e) {
                        if (w < elSize) {
                            if (w !== 0) {
                                return false;
                            }
                        }
                        var orig = e.originalEvent;
                        endCoords = orig.targetTouches[0];
                        var xMovement = Math.abs(endCoords.pageX - startCoords.pageX);
                        var yMovement = Math.abs(endCoords.pageY - startCoords.pageY);
                        if (settings.vertical === true) {
                            if ((yMovement * 3) > xMovement) {
                                e.preventDefault();
                            }
                            $this.touchMove(endCoords.pageY, startCoords.pageY);
                        } else {
                            if ((xMovement * 3) > yMovement) {
                                e.preventDefault();
                            }
                            $this.touchMove(endCoords.pageX, startCoords.pageX);
                        }

                    });
                    $slide.on('touchend', function () {
                        if (w < elSize) {
                            if (w !== 0) {
                                return false;
                            }
                        }
                        var distance;
                        if (settings.vertical === true) {
                            distance = endCoords.pageY - startCoords.pageY;
                        } else {
                            distance = endCoords.pageX - startCoords.pageX;
                        }
                        $this.touchEnd(distance);
                    });
                }
            },
            build: function () {
                var $this = this;
                $this.initialStyle();
                if (this.doCss()) {

                    if (settings.enableTouch === true) {
                        $this.enableTouch();
                    }
                    if (settings.enableDrag === true) {
                        $this.enableDrag();
                    }
                }

                $(window).on('focus', function(){
                    $this.auto();
                });
                
                $(window).on('blur', function(){
                    clearInterval(interval);
                });

                $this.pager();
                $this.pauseOnHover();
                $this.controls();
                $this.keyPress();
            }
        };
        plugin.build();
        refresh.init = function () {
            refresh.chbreakpoint();
            if (settings.vertical === true) {
                if (settings.item > 1) {
                    elSize = settings.verticalHeight;
                } else {
                    elSize = $children.outerHeight();
                }
                $slide.css('height', elSize + 'px');
            } else {
                elSize = $slide.outerWidth();
            }
            if (settings.loop === true && settings.mode === 'slide') {
                refresh.clone();
            }
            refresh.calL();
            if (settings.mode === 'slide') {
                $el.removeClass('lSSlide');
            }
            if (settings.mode === 'slide') {
                refresh.calSW();
                refresh.sSW();
            }
            setTimeout(function () {
                if (settings.mode === 'slide') {
                    $el.addClass('lSSlide');
                }
            }, 1000);
            if (settings.pager) {
                refresh.createPager();
            }
            if (settings.adaptiveHeight === true && settings.vertical === false) {
                $el.css('height', $children.eq(scene).outerHeight(true));
            }
            if (settings.adaptiveHeight === false) {
                if (settings.mode === 'slide') {
                    if (settings.vertical === false) {
                        plugin.setHeight($el, false);
                    }else{
                        plugin.auto();
                    }
                } else {
                    plugin.setHeight($el, true);
                }
            }
            if (settings.gallery === true) {
                plugin.slideThumb();
            }
            if (settings.mode === 'slide') {
                plugin.slide();
            }
            if (settings.autoWidth === false) {
                if ($children.length <= settings.item) {
                    $slide.find('.lSAction').hide();
                } else {
                    $slide.find('.lSAction').show();
                }
            } else {
                if ((refresh.calWidth(false) < elSize) && (w !== 0)) {
                    $slide.find('.lSAction').hide();
                } else {
                    $slide.find('.lSAction').show();
                }
            }
        };
        $el.goToPrevSlide = function () {
            if (scene > 0) {
                settings.onBeforePrevSlide.call(this, $el, scene);
                scene--;
                $el.mode(false);
                if (settings.gallery === true) {
                    plugin.slideThumb();
                }
            } else {
                if (settings.loop === true) {
                    settings.onBeforePrevSlide.call(this, $el, scene);
                    if (settings.mode === 'fade') {
                        var l = (length - 1);
                        scene = parseInt(l / settings.slideMove);
                    }
                    $el.mode(false);
                    if (settings.gallery === true) {
                        plugin.slideThumb();
                    }
                } else if (settings.slideEndAnimation === true) {
                    $el.addClass('leftEnd');
                    setTimeout(function () {
                        $el.removeClass('leftEnd');
                    }, 400);
                }
            }
        };
        $el.goToNextSlide = function () {
            var nextI = true;
            if (settings.mode === 'slide') {
                var _slideValue = plugin.slideValue();
                nextI = _slideValue < w - elSize - settings.slideMargin;
            }
            if (((scene * settings.slideMove) < length - settings.slideMove) && nextI) {
                settings.onBeforeNextSlide.call(this, $el, scene);
                scene++;
                $el.mode(false);
                if (settings.gallery === true) {
                    plugin.slideThumb();
                }
            } else {
                if (settings.loop === true) {
                    settings.onBeforeNextSlide.call(this, $el, scene);
                    scene = 0;
                    $el.mode(false);
                    if (settings.gallery === true) {
                        plugin.slideThumb();
                    }
                } else if (settings.slideEndAnimation === true) {
                    $el.addClass('rightEnd');
                    setTimeout(function () {
                        $el.removeClass('rightEnd');
                    }, 400);
                }
            }
        };
        $el.mode = function (_touch) {
            if (settings.adaptiveHeight === true && settings.vertical === false) {
                $el.css('height', $children.eq(scene).outerHeight(true));
            }
            if (on === false) {
                if (settings.mode === 'slide') {
                    if (plugin.doCss()) {
                        $el.addClass('lSSlide');
                        if (settings.speed !== '') {
                            $slide.css('transition-duration', settings.speed + 'ms');
                        }
                        if (settings.cssEasing !== '') {
                            $slide.css('transition-timing-function', settings.cssEasing);
                        }
                    }
                } else {
                    if (plugin.doCss()) {
                        if (settings.speed !== '') {
                            $el.css('transition-duration', settings.speed + 'ms');
                        }
                        if (settings.cssEasing !== '') {
                            $el.css('transition-timing-function', settings.cssEasing);
                        }
                    }
                }
            }
            if (!_touch) {
                settings.onBeforeSlide.call(this, $el, scene);
            }
            if (settings.mode === 'slide') {
                plugin.slide();
            } else {
                plugin.fade();
            }
            if (!$slide.hasClass('ls-hover')) {
                plugin.auto();
            }
            setTimeout(function () {
                if (!_touch) {
                    settings.onAfterSlide.call(this, $el, scene);
                }
            }, settings.speed);
            on = true;
        };
        $el.play = function () {
            $el.goToNextSlide();
            settings.auto = true;
            plugin.auto();
        };
        $el.pause = function () {
            settings.auto = false;
            clearInterval(interval);
        };
        $el.refresh = function () {
            refresh.init();
        };
        $el.getCurrentSlideCount = function () {
            var sc = scene;
            if (settings.loop) {
                var ln = $slide.find('.lslide').length,
                    cl = $el.find('.clone.left').length;
                if (scene <= cl - 1) {
                    sc = ln + (scene - cl);
                } else if (scene >= (ln + cl)) {
                    sc = scene - ln - cl;
                } else {
                    sc = scene - cl;
                }
            }
            return sc + 1;
        }; 
        $el.getTotalSlideCount = function () {
            return $slide.find('.lslide').length;
        };
        $el.goToSlide = function (s) {
            if (settings.loop) {
                scene = (s + $el.find('.clone.left').length - 1);
            } else {
                scene = s;
            }
            $el.mode(false);
            if (settings.gallery === true) {
                plugin.slideThumb();
            }
        };
        $el.destroy = function () {
            if ($el.lightSlider) {
                $el.goToPrevSlide = function(){};
                $el.goToNextSlide = function(){};
                $el.mode = function(){};
                $el.play = function(){};
                $el.pause = function(){};
                $el.refresh = function(){};
                $el.getCurrentSlideCount = function(){};
                $el.getTotalSlideCount = function(){};
                $el.goToSlide = function(){}; 
                $el.lightSlider = null;
                refresh = {
                    init : function(){}
                };
                $el.parent().parent().find('.lSAction, .lSPager').remove();
                $el.removeClass('lightSlider lSFade lSSlide lsGrab lsGrabbing leftEnd right').removeAttr('style').unwrap().unwrap();
                $el.children().removeAttr('style');
                $children.removeClass('lslide active');
                $el.find('.clone').remove();
                $children = null;
                interval = null;
                on = false;
                scene = 0;
            }

        };
        setTimeout(function () {
            settings.onSliderLoad.call(this, $el);
        }, 10);
        $(window).on('resize orientationchange', function (e) {
            setTimeout(function () {
                if (e.preventDefault) {
                    e.preventDefault();
                } else {
                    e.returnValue = false;
                }
                refresh.init();
            }, 200);
        });
        return this;
    };
}(jQuery));
;
/* How to use it

HTML :
<div id="myAwesomeCarousel" class="carousel">
    <div class="carousel-item">first item</div>
    <div class="carousel-item">second item</div>
    <!-- as many items as you want -->
</div>

JS :
$('#myAwesomeCarousel').carousel();

To automatically set the carousel, add the class `apply-carousel` to the .carousel div
(ex. <div id="myAwesomeCarousel" class="carousel apply-carousel">)

Options :

Name                |  Expected               |  Default    |  Description
====================|=========================|=============|=========================================================================
enabledOnMobile     |  boolean                |  false      |  If true, lightSlider is used also on mobile. Else, CSS animation only
--------------------|-------------------------|-------------|-------------------------------------------------------------------------
displayedItems      |  number                 |  undefined  |  If defined, override the itemnumber value.
.                   |                         |             |  DEPRECATED : we should use only one property.
--------------------|-------------------------|-------------|-------------------------------------------------------------------------
itemnumber          |  number                 |  3 | 4 | 5  |  The number of items displayed at the same time.
. (HTML only)       |                         |             |  The default value depends on the resolution.
--------------------|-------------------------|-------------|-------------------------------------------------------------------------
method (JS only)    |  string                 |  undefined  |  If the method exists, it is executed when the carousel is ready.
--------------------|-------------------------|-------------|-------------------------------------------------------------------------
slidemargin         |  number                 |  10         |  The space between two items
--------------------|-------------------------|-------------|-------------------------------------------------------------------------
triggereventonslide |  string                 |  undefined  |  If it is a string, an event will be fired before each slide action
--------------------|-------------------------|-------------|-------------------------------------------------------------------------
isVertical          |  boolean                |  false      |  
--------------------|-------------------------|-------------|-------------------------------------------------------------------------

Two ways to use the options :
. HTML way (with data attribute)
    => <div class="carousel" data-itemnumber="4" data-enabled-on-mobile="true">
           <div class="carousel-item">first item</div>
           <div class="carousel-item">second item</div>
       </div>
. JavaScript way
    => $('#myAwesomeCarousel').carousel({
        enabledOnMobile: true,
        itemnumber: 4,
        method: 'next'
    });

Two ways to interact with the carousel :
. $('#myAwesomeCarousel').data('carousel').next(); // error if the carousel is not set yet.
. $('#myAwesomeCarousel').carousel('next'); // if the carousel is not set yet, it is set then go to the next elements.

Our carousel is based on another plugin : lightSlider.

*/

(function (global, $) {
    'use strict';

    // Global properties
    var namespace = 'carousel',
        $arrowTemplate = $('<span>', {
            class: 'carousel-arrow',
            style: 'display: none;'
        });

    $[namespace] = function (element, options) {
        // Private properties
        var plugin = this;
        var $element = $(element);
        var settings = $.extend(
            {
                enabledOnMobile: false,
                slidemargin: 10,
                verticalHeight: 500
            },
            options
        );
        var displayArrow;
        var isLightSlider = false;
        var itemDisplayed;

        if (global.isMobileDevice && !settings.enabledOnMobile) {
            return;
        }

        // Patch zsb inter
        var patchZsb = $element.hasClass('zsb');
        if (patchZsb) itemDisplayed = 3;

        var enableableArrows =
            $element.data('enableableArrows') !== undefined
                ? $element.data('enableableArrows')
                : false;
        var hasItems =
            $element.data('hasItems') !== undefined
                ? $element.data('hasItems')
                : false;

        // Public properties
        this.isFillable = false;

        // Public methods
        plugin.destroy = function () {
            if (isLightSlider) {
                $element.destroy();
            }
            $leftArrow.off('click');
            $rightArrow.off('click');
            $element.find('> div').addClass('carousel-item');
            $element.addClass('carousel').removeData(namespace);
        };
        plugin.reset = function () {
            if (isLightSlider || this.isFillable) {
                var $items;
                if (patchZsb || hasItems)
                    $items = $element.find('.carousel-item');
                else {
                    $items = $element.find('> div');
                }
                if ($items.length <= Math.floor(itemDisplayed)) {
                    isLightSlider = false;
                    hideArrows();
                    $element.addClass('carousel');
                    $items.addClass('carousel-item');
                    if (!this.isFillable) {
                        $element.destroy();
                    }
                } else {
                    if (this.isFillable) {
                        isLightSlider = true;
                        adjustArrow();
                        $element.removeClass('carousel');
                        $items.removeClass('carousel-item');
                    }
                    $element.refresh();
                }
            }
        };
        plugin.goToFirstSlide = function () {
            $element.goToSlide(0);
        };
        plugin.next = function () {
            $element.goToNextSlide();
        };
        plugin.prev = function () {
            $element.goToPrevSlide();
        };

        // Private methods
        var adjustArrow = function () {
            if (displayArrow) {
                if ($element.getCurrentSlideCount() === 1) {
                    if (enableableArrows) {
                        $leftArrow.disable();
                    } else {
                        $leftArrow.hide();
                    }
                } else {
                    if (enableableArrows) {
                        $leftArrow.enable();
                    } else {
                        $leftArrow.show();
                    }
                }

                if (
                    $element.getCurrentSlideCount() *
                        Math.floor(itemDisplayed) >=
                    $element.getTotalSlideCount()
                ) {
                    if (enableableArrows) {
                        $rightArrow.disable();
                    } else {
                        $rightArrow.hide();
                    }
                } else {
                    if (enableableArrows) {
                        $rightArrow.enable();
                    } else {
                        $rightArrow.show();
                    }
                }
            } else {
                hideArrows();
            }
        };
        var hideArrows = function () {
            if (enableableArrows) {
                $leftArrow.disable();
                $rightArrow.disable();
            } else {
                $leftArrow.hide();
                $rightArrow.hide();
            }
        };
        var getItemNumber = function () {
            var screenType = global.LR_App.utils.getScreenSize();
            if (options.itemnumberxs !== undefined && screenType == 'xs') {
                return parseInt(options.itemnumberxs);
            } else if (
                options.itemnumbersm !== undefined &&
                screenType === 'sm'
            ) {
                return parseInt(options.itemnumbersm);
            } else if (
                options.itemnumbermd !== undefined &&
                screenType === 'md'
            ) {
                return parseInt(options.itemnumbermd);
            } else if (
                options.itemnumberlg !== undefined &&
                (screenType === 'lg' || screenType === 'xl')
            ) {
                return parseInt(options.itemnumberlg);
            }
            return options.itemnumber || global._LaRedoute.getScreenType() + 1;
        };

        // DOM Picks
        var $leftArrow = settings.leftArrowId
            ? $('#' + settings.leftArrowId)
            : $arrowTemplate.clone().addClass('left');
        var $rightArrow = settings.rightArrowId
            ? $('#' + settings.rightArrowId)
            : $arrowTemplate.clone().addClass('right');

        // DOM adjustments
        if (!enableableArrows) {
            $element.after($leftArrow, $rightArrow);
        }

        // Events
        $leftArrow.on('click', function () {
            $element.goToPrevSlide();
        });
        $rightArrow.on('click', function () {
            $element.goToNextSlide();
        });

        // Init
        settings.itemnumber = getItemNumber();
        itemDisplayed =
            $element.data('displayedItems') !== undefined
                ? $element.data('displayedItems')
                : settings.itemnumber;

        $element.attr('data-itemnumber', settings.itemnumber);
        $element[settings.isVertical ? 'addClass' : 'removeClass'](
            'carousel--vertical'
        );
        var $items = $element.find('.carousel-item');
        if ($items.length <= Math.floor(itemDisplayed)) {
            hideArrows();
            return;
        } else {
            $items.removeClass('carousel-item');
            isLightSlider = true;
        }

        $element.removeClass('carousel').lightSlider({
            item: itemDisplayed,
            slideMove: Math.floor(itemDisplayed),
            slideMargin: settings.slidemargin,
            pager: false,
            controls: false,
            gallery: false,
            enableDrag: false,
            enableTouch: true,
            useCSS: true,
            vertical: settings.isVertical,
            verticalHeight: settings.verticalHeight,
            onBeforeSlide: function () {
                if (typeof settings.triggereventonslide === global.varType.str)
                    global.$eventContainer.trigger(
                        settings.triggereventonslide
                    );
                adjustArrow();
            }
        });
        displayArrow =
            $element.getTotalSlideCount() > Math.floor(itemDisplayed);

        adjustArrow();
    };
})(window, window.jQuery);
;
(function ($) {
    $.feedback = function (element, options) {
        var plugin = this;
        var $element = $(element),
            element = element;

        plugin.init = function () {
            plugin.isActive = false;
            plugin.$adjustment = $('<div>', { class: 'feedback-adjustment' });
            plugin.$content = $('<div>', { class: 'feedback' }).append(
                plugin.$adjustment
            );
            if (options.style === 'dot') {
                var dot = $('<span>', { text: '.' });
                plugin.$content = $('<span>', {
                    class: 'anim-blink-inf'
                }).append(dot.clone(), dot.clone(), dot.clone());
            } else {
                var $symbol = $('<span>', {
                    class: 'anim-blink-inf-' + options.style
                });
                var $animContent = $('<div>', {
                    class: 'feedback-content anim-blink-inf'
                });
                plugin.$adjustment.append($animContent);
                for (var i = 0; i < options.number; i++)
                    $animContent.append($symbol.clone());
            }
        };
        plugin.add = function () {
            if (plugin.isActive === false) {
                $element.addClass('feedback-container').append(plugin.$content);
                if (plugin.height === undefined)
                    plugin.height = plugin.$adjustment.height();
                plugin.$adjustment.css('margin-top', -(plugin.height / 2));
                plugin.isActive = true;
            }
        };
        plugin.remove = function () {
            if (plugin.isActive) {
                $element.removeClass('feedback-container');
                plugin.$content.detach();
                plugin.isActive = false;
            }
        };

        plugin.init();
    };

    $.fn.feedback = function (data) {
        if (
            Utils.Common.isAppleDevice() === false ||
            data.forceIosDevice === true
        ) {
            return this.each(function () {
                var $this = $(this);
                if ($this.data('feedback') === undefined) {
                    var options = {
                        style: 'point',
                        number: 3
                    };
                    $.extend(options, $this.data());
                    if (typeof data === 'object') $.extend(options, data);
                    var plugin = new $.feedback(this, options);
                    $this.data('feedback', plugin);
                }
                if (
                    (typeof data === 'object' && data.method === 'add') ||
                    data === 'add'
                )
                    $this.data('feedback').add();
                else if (
                    (typeof data === 'object' && data.method === 'remove') ||
                    data === 'remove'
                )
                    $this.data('feedback').remove();
            });
        }
    };
})(jQuery);
;
(function ($) {
    var namespace = 'field';

    $[namespace] = function (element) {
        var plugin = this;
        var $input = $(element);
        var focusClass = 'active';
        var unFocusClass = 'is-unfocused';
        var numberOfAttempts = 0;

        function handleAutoFill() {
            var intervalAttempt = setInterval(function () {
                focusIfValue();
                numberOfAttempts++;
                if (
                    numberOfAttempts > 9 ||
                    plugin.$label.hasClass(focusClass)
                ) {
                    clearInterval(intervalAttempt);
                }
            }, 1000);
        }

        function focusIfValue() {
            if ($input.val()) {
                plugin.activeFocus();
            }
        }

        plugin.init = function () {
            // DOM Picking
            plugin.$field = $input.parent('.field');
            plugin.$label = $input.siblings('.field-label');

            // Private methods
            // * on focus display label at top
            var focusHandler = function () {
                plugin.$label.addClass(focusClass).removeClass(unFocusClass);
            };
            // * when losing focus, display label in the middle of input or keep it at top if input has value
            var focusOutHandler = function () {
                if (!$input.val()) {
                    plugin.removeFocus();
                } else {
                    plugin.activeFocus();
                }
            };

            // * events binding
            $input.on('focus', focusHandler).on('focusout', focusOutHandler);

            // * autofill
            focusIfValue();
            handleAutoFill();
        };
        plugin.activeFocus = function () {
            plugin.$label.addClass(focusClass).removeClass(unFocusClass);
        };
        plugin.removeFocus = function () {
            plugin.$label.addClass(unFocusClass).removeClass(focusClass);
        };
        plugin.update = function () {
            if ($input.val()) {
                plugin.activeFocus();
            } else if (!$input.val()) {
                plugin.removeFocus();
            }
            // * autofill : wait 1s for autofill to proceed than update focus state
            handleAutoFill();
        };
        plugin.hide = function () {
            plugin.$field.hide();
        };
        plugin.show = function () {
            plugin.$field.show();
        };
        plugin.destroy = function () {
            $input.data(namespace, undefined);
            if (typeof $.fields !== 'undefined') {
                delete $.fields[plugin.name];
            }
        };

        plugin.init();
    };

    $.fn[namespace] = function (data) {
        return this.each(function () {
            var $this = $(this);
            if ($this.data(namespace) === undefined) {
                var plugin = new $[namespace](this);
                $this.data(namespace, plugin);
            }
            if (data === 'update') {
                $this.data(namespace).update();
            }
        });
    };
})(jQuery);
;
(function (global, $) {
    'use strict';

    /**
     * jQuery `is` method shortcut
     */
    $.fn.isChecked = function () {
        return this.is(':checked');
    };

    var getLoadingClasses = function (otherClasses) {
        otherClasses = otherClasses || '';
        var loadingClasses = [global.elementStatus.loading, otherClasses];
        return loadingClasses.join(' ');
    };

    // Add some functions for add, remove, or check for a specific element status
    var classes = [
        global.elementStatus.available,
        global.elementStatus.disabled,
        global.elementStatus.hidden,
        global.elementStatus.opened,
        global.elementStatus.selected,
        global.elementStatus.visible
    ];
    classes.forEach(function(val) {
        var name = val.charAt(0).toUpperCase() + val.slice(1);
        $.fn['add' + name] = function () {
            return this.addClass(global.elementStatus[val]);
        };
        $.fn['remove' + name] = function () {
            return this.removeClass(global.elementStatus[val]);
        };
        $.fn['is' + name] = function () {
            return this.hasClass(global.elementStatus[val]);
        };
    });

    /**
     *
     * ACTIVE
     */
    $.fn.addActive = function (otherClasses){
        otherClasses = otherClasses || '';
        return this.addClass(global.Utils.Enum.Status.Active, otherClasses);
    };
    $.fn.removeActive = function (otherClasses){
        otherClasses = otherClasses || '';
        return this.removeClass(global.Utils.Enum.Status.Active, otherClasses);
    };

    $.fn.isActive = function (){
        return this.hasClass(global.Utils.Enum.Status.Active);
    };

    /**
     * LOADING
     */
    $.fn.addLoading = function (otherClasses) {
        return this.addClass(getLoadingClasses(otherClasses));
    };

    $.fn.removeLoading = function (otherClasses) {
        return this.removeClass(getLoadingClasses(otherClasses));
    };

    /**
     * Merge value of several fields in one field (often
     * hidden).
     */
    $.fn.mergeFieldsValue = function (fields, options) {
        if (this.length === 0) {
            return;
        }

        if (!$.isArray(fields)) {
            throw "mergeFieldsValue: fields must be Array";
            return;
        }

        var me = this;

        me.settings = $.extend({
            // The separator between each gathered fields
            fieldValueSeparator: '',
            triggerEvent: 'change',
            validatorActionDuringEvent: null,
            validatorTriggerEvent: 'blur'
        }, options);

        me.fields = fields;
        me.fieldsLength = me.fields.length;

        me.allFieldsExists = function () {
            var bool = true;
            $.each(me.fields, function (i, field) {
                if ($(field).length === 0) {
                    bool = false;
                    throw "mergeFieldsValue.fieldsExists() : " + field + " does not exist";
                }
            });
            return bool;
        };

        me.getFieldsSelector = function () {
            if (me.allFieldsExists()) {
                return me.fields.join();
            }
            return '';
        };

        me.isAllFieldsEmpty = function () {
            var emptyFields = me.fields.filter(function (field) {
                var $field = field instanceof $ ? field : $(field);
                return $field.val() === '';
            });

            return emptyFields.length === me.fieldsLength;
        };

        $(me.getFieldsSelector()).on(me.settings.triggerEvent, function () {
            if (!me.isAllFieldsEmpty()) {
                var mergedValue = [];
                $.each(me.fields, function (i, field) {
                    mergedValue.push($(field).val().toString());
                });
                me.val(mergedValue.join(me.settings.fieldValueSeparator));
            } else {
                me.val('');
            }
            if (typeof me.settings.validatorActionDuringEvent === 'function') {
                me.settings.validatorActionDuringEvent.apply(me);
            }
        });

        return me;
    };

    $.fn.enable = function () {
        return this.toggleDisable(false);
    };

    $.fn.disable = function () {
        return this.toggleDisable(true);
    };

    $.fn.toggleDisable = function (isDisabled) {
        // If isDisabled not a Boolean
        if (typeof isDisabled !== 'boolean') {
            // We disable the jQuery object
            isDisabled = true;
        }
        return this.prop(global.Utils.Enum.Status.Disabled, isDisabled);
    };

    $.fn.setMaxlength = function (maxlength) {
        return this.prop('maxlength', maxlength);
    };

    //-- is visible on screen? --//
    $.fn.isInViewport = function (percentageVisible) {
        var percentage = !percentageVisible || percentageVisible < 0 ? 0 : percentageVisible > 1 ? 1 : percentageVisible;
        var minVisibleHeight = $(this).outerHeight() * percentage;

        var elementTop = $(this).offset().top + minVisibleHeight;
        var elementBottom = $(this).offset().top + $(this).outerHeight() - minVisibleHeight;
        var viewportTop = $(window).scrollTop();
        var viewportBottom = viewportTop + $(window).height();
        return elementBottom > viewportTop && elementTop < viewportBottom;
    };

    //-- is visible in parent (scrolling left to right)? --//
    $.fn.isInParentViewport = function (percentageVisible) {
        var $scrollableParent = $(this).offsetParent();

        var percentage = !percentageVisible || percentageVisible < 0 ? 0 : percentageVisible > 1 ? 1 : percentageVisible;
        var minVisibleWidth = $(this).outerWidth() * percentage;

        var elementLeft = $(this).offset().left + minVisibleWidth;
        var elementRight = $(this).offset().left + $(this).outerWidth() - minVisibleWidth;
        var viewportLeft = $(window).scrollLeft();
        var viewportRight = viewportLeft + $scrollableParent.width();
        return elementRight > viewportLeft && elementLeft < viewportRight;
    };

    $.getHeaderTooltipClasses = function (customClasses) {
        var separator = ' ';
        var classesArray = [];
        if (typeof customClasses === 'string') {
            var customClassesArray = customClasses.split(separator);
            if (customClassesArray.length === 1) {
                classesArray.push(customClasses);
            } else {
                classesArray = $.merge(classesArray, customClassesArray);
            }
        }
        return $.merge(classesArray, global.Utils.Enum.Class.Header.TooltipDefaultClasses).join(separator);
    };
})(window, window.jQuery);
;
(function($) {
    $.fn.optionPanel = function(option) {
        var panel = this;

        if ($('#optionPanel').length === 0) {
            $('<div>', { id: 'optionPanel', class: 'loading' }).appendTo('body');
            $('<span>', { class: 'option-panel-close close' }).appendTo('#optionPanel');
            $('.option-panel-close, #overlay').on('click', function() { panel.close(); });
        }

        this.open = function(panelID, callback, params) {
            if (panelID !== undefined) var container = panelID;
            else if (callback !== undefined) var container = callback;

            if (typeof container !== 'undefined') {
                if ($('#' + container).length === 0) {
                    $('<div>', {id: container, class: 'option-panel-content'}).appendTo('#optionPanel');
                    var fn = window.callbackFunctions[callback];
                    var fnInstance;
                    // get instance to apply the function if specified
                    if (window.callbackFunctions[callback+"Instance"] !== undefined) {
                        fnInstance = window.callbackFunctions[callback + "Instance"];
                    }
                    if(params) params = params.replace(/\'/g,'\"');
                    if (typeof fn === 'function'){
                        if (fnInstance !== undefined) {
                            fn.call(fnInstance, container, params);
                        }
                    else fn(container, params);
                    }
                } else {
                    $('#' + container).show();
                    panel.endLoading();
                }
                $('body').addClass('no-scroll');
                $('#optionPanel').addClass('show');
                $('#overlay').addClass('for-right-panel is-visible');
            }
        };

        this.close = function() {
            $('body').removeClass('no-scroll');
            $('#optionPanel').removeClass('show');
            $('#overlay').removeClass('for-right-panel');
            setTimeout(function() {
                $('.option-panel-content').hide();
                $('#optionPanel').addClass('loading');
                $('#overlay').removeClass('is-visible');
            }, 600);
        };

        this.endLoading = function() {
            $('#optionPanel').removeClass('loading');
        };

        return this.each(function() {
            var callbacks = new Object();
                callbacks.beforeOpening = $(this).data('open');
            var panelID = $(this).data('id');
            var params = $(this).data('params')

            switch (option) {
                case 'close':
                    panel.close(); break;
                case 'open':
                    panel.open(panelID, callbacks.beforeOpening, params); break;
                case 'endLoading':
                    panel.endLoading(); break;
                default:
                    $(this).on('click', function(e) {
                        e.preventDefault();
                        panel.open(panelID, callbacks.beforeOpening, params);
                    });
                }
        });
    }
})(jQuery);;
/* How to use it

HTML :
<div id="myAwesomePopin" class="popin">
    popin content here
</div>

JS :
$('#myAwesomePopin').popin();

To automatically set the popin, add the class `apply-popin` to the popin div
(ex. <div id="myAwesomePopin" class="popin apply-popin">)

Options :

Name              |  Expected               |  Default    |  Description
==================|=========================|=============|=========================================================================
clickableOverlay  |  boolean                |  true       |  If false, click on the overlay doesn't close the popin.
------------------|-------------------------|-------------|-------------------------------------------------------------------------
block             |  string (CSS selector)  |  undefined  |  Works only with url parameter. If url and block are defined,
.                 |                         |             |  Only the `$(block)` will be displayed into the popin.
.                 |                         |             |  (Usefull for the static page displayed into a popin)
------------------|-------------------------|-------------|-------------------------------------------------------------------------
context (JS only) |  JavaScript object      |  undefined  |  Used if onLoad is defined. Add a context to the onLoad callback.
------------------|-------------------------|-------------|-------------------------------------------------------------------------
method (JS only)  |  string                 |  undefined  |  If the method exists, it is executed when the popin is ready.
------------------|-------------------------|-------------|-------------------------------------------------------------------------
onLoad (JS only)  |  function               |  undefined  |  The function is executed when the popin is ready to be opened.
------------------|-------------------------|-------------|-------------------------------------------------------------------------
onlyCloseButton   |  boolean                |  undefined  |  If true, deactivate the closing action on click on the overlay.
.                 |                         |             |  Deprecated, use clickableOverlay instead
------------------|-------------------------|-------------|-------------------------------------------------------------------------
position          |  'undefined'            |  undefined  |  If 'undefined' the vertical position will be calculate depending on the
.                 |  or 'defined'           |             |  screen height and the popin height.
.                 |                         |             |  If 'defined' the popin is sticked to the top of the page.
------------------|-------------------------|-------------|-------------------------------------------------------------------------
preload           |  boolean                |  false      |  If true, for an AJAX call (with url option), the call is done
.                 |                         |             |  at the loading of the page.
------------------|-------------------------|-------------|-------------------------------------------------------------------------
size              |  'fullscreen'           |  undefined  |  Change the design of the popin and add the class `popin-fullscreen`
------------------|-------------------------|-------------|-------------------------------------------------------------------------
style             |  string                 |  undefined  |  Add a class `popin-[style]` (used for specific design).
------------------|-------------------------|-------------|-------------------------------------------------------------------------
trackMergeUrl     |  boolean                |  undefined  |  Specific implementation for a tracking issue.
------------------|-------------------------|-------------|-------------------------------------------------------------------------
trackName         |  string                 |  undefined  |  Specific implementation for a tracking issue.
------------------|-------------------------|-------------|-------------------------------------------------------------------------
trigger           |  string (CSS selector)  |  undefined  |  On click on the trigger, the popin will open.
.                 |  or jQuery DOM object   |             |
------------------|-------------------------|-------------|-------------------------------------------------------------------------
url               |  string                 |  undefined  |  If url is defined, an AJAX call is made to get the url content.
------------------|-------------------------|-------------|-------------------------------------------------------------------------

Two ways to use the options :
. HTML way (with data attribute)
    => <div class="popin" data-url="/delivery-info.aspx" data-block="#this-block">popin content</div>
. JavaScript way
    => $myPopin.popin({
        url: '/delivery-info.aspx',
        block: '#this-block'
    });

Two ways to open a popin :
. $myPopin.data('popin').open(); // error if the popin is not set yet.
. $myPopin.popin('open'); // if the popin is not set yet, it is set then opened.

*/

(function (global, $) {
    'use strict';

    var namespace = 'popin';

    $[namespace] = function (element, options) {
        // Private properties
        var plugin = this;
        var defaultOptions = {
            clickableOverlay: true,
            preload: false
        };
        var settings = $.extend({}, defaultOptions, options);
        var allowedSizes = ['fullscreen'];

        // DOM picks
        var $element = $(element);
        var $initialContainer = $element.parent();
        var $trigger;
        var $arrow;

        if (settings.trigger !== undefined) {
            if (
                typeof settings.trigger === global.varType.obj &&
                settings.trigger.length > 0
            )
                $trigger = plugin.$trigger = settings.trigger;
            else if (typeof settings.trigger === global.varType.str)
                $trigger = plugin.$trigger = $(settings.trigger);
            $arrow = $trigger.find('.lr-arrow.lr-arrow-selector');
        }

        // DOM adjustments
        var $globalContainer = (plugin.$container = $('<div>', {
            class: namespace + '-wrapper fade',
            'data-name': $element.attr('id')
        }));
        var $popinContainer = $('<div>', {
            class: namespace + '-container'
        }).appendTo($globalContainer);
        var $overlay = $('<div>', { class: namespace + '-overlay' }).appendTo(
            $popinContainer
        );
        var $btnCloseContainer = $('<div>', {
            class: namespace + '-btn-close-container'
        }).prependTo($element);
        var $btnClose = $('<button>', {
            // class: namespace + '-btn-close close',
            class: 'pluginPopin',
            'data-cerberus': 'popin_close'
        }).appendTo($btnCloseContainer);
        var $crossIcon = $('<i>', {
            class: 'lr-icon lr-icon-cross-small'
        }).appendTo($btnClose);
        // $btnClose.addClass('plugin-popin');

        $element.appendTo($popinContainer);
        $globalContainer.appendTo('body');

        // Private methods
        var handleHighPopin = function () {
            $overlay.addClass(namespace + '-high');
            // $btnClose.addClass(namespace + '-btn-close-fixed');
        };
        var hasArrow = function () {
            return $arrow && $arrow.length > 0;
        };
        var hideOnEscape = function (e) {
            if (e.key === 'Escape') {
                hidePopin();
            }
        };
        var hidePopin = function () {
            global.Utils.Common.stopNoScroll();
            $globalContainer.removeClass('in').removeAttr('style');
            $element.focusout();
            $element.trigger(namespace + '.close');

            $(document).off('keyup', hideOnEscape);
        };
        var isSizeAllowed = function (size) {
            if ($.inArray(size, allowedSizes) !== -1) {
                return true;
            }
            return false;
        };
        var loadPopinContent = function () {
            return $.ajax({
                url: settings.url,
                success: function (data) {
                    var popinContent = $('<div>', { html: data });
                    if (settings.block !== undefined) {
                        popinContent = popinContent.find(settings.block);
                    }
                    popinContent.appendTo($element);
                    if (typeof settings.onLoad === 'function')
                        if (settings.context !== undefined)
                            settings.onLoad.call(settings.context, $element);
                        else settings.onLoad($element);
                    plugin.isLoaded = true;
                    if (plugin.shouldBeOpened === true) showPopin();
                },
                error: function () {
                    console.error(namespace + ' : ajax error');
                },
                complete: function () {
                    if ($trigger !== undefined) $trigger.feedback('remove');
                }
            });
        };
        var removeHighPopin = function () {
            $overlay.removeClass(namespace + '-high');
            // $btnClose.removeClass(namespace + '-btn-close-fixed');
        };
        var showPopin = function () {
            global.Utils.Common.startNoScroll();
            if ($('.popin-wrapper.in').length > 0) {
                // if other popin is open
                $popinContainer.css(
                    'z-index',
                    parseInt($globalContainer.css('z-index')) + 1
                );
            }
            $globalContainer.addClass('in');
            if (
                settings.position === undefined ||
                settings.position === 'undefined'
            ) {
                plugin.determinePosition();
                if ($popinContainer.find('img').length > 0) {
                    $popinContainer.find('img').each(function (i, el) {
                        $(el).load(function () {
                            plugin.determinePosition();
                        });
                    });
                }
            } else if (settings.position === 'defined') handleHighPopin();
            $globalContainer.scrollTop(0);
            $element.focusin().trigger(namespace + '.open');

            // FULLR : add some Omniture tracking on popin
            if (settings.trackName !== undefined) {
                var country = global.Utils.Common.getCountry(true);
                if (
                    typeof settings.url != 'undefined' &&
                    typeof settings.trackName != 'undefined'
                ) {
                    global.wa_data.pageName =
                        country.toUpperCase() +
                        ':RE:' +
                        settings.trackName +
                        (settings.trackMergeUrl
                            ? ':' +
                              settings.url
                                  .split('?')[0]
                                  .replace(/\/m\/|\/|.aspx/g, '')
                            : '');
                    global.wa_data.channel = settings.trackName
                        .split(':')[0]
                        .toLowerCase();
                }
                global._satellite.track('DC_POPINLOADED');
            }

            $(document).on('keyup', hideOnEscape);
        };

        // Public methods
        plugin.open = function () {
            if (settings.url !== undefined && plugin.isLoaded === false) {
                if ($trigger !== undefined) $trigger.feedback('add');
                if (!settings.preload && plugin.shouldBeOpened === false) {
                    loadPopinContent();
                }
                plugin.shouldBeOpened = true;
            } else {
                showPopin();
                global.Utils.Common.startNoScroll();
            }
        };
        plugin.close = function () {
            hidePopin();
        };
        plugin.destroy = function () {
            plugin.close();
            $overlay.remove();
            $element.appendTo($initialContainer);
            $globalContainer.remove();
            $btnClose.remove();
            if ($trigger !== undefined) $trigger.off('click');
            $element.removeData(namespace);
        };
        plugin.determinePosition = function () {
            settings.position = 'done';
            var popinHeight = $popinContainer.outerHeight();
            var windowHeight = $(global).height();
            if (popinHeight < windowHeight) {
                $popinContainer.css({
                    marginTop: -(popinHeight / 2),
                    top: '50%'
                });
                removeHighPopin();
            } else {
                handleHighPopin();
            }
        };

        // Events
        if ($trigger !== undefined) {
            $trigger.on('click', function () {
                if ($(this).hasClass('disabled') === false) {
                    plugin.open();
                }
            });
        }

        $btnClose.on('click', function () {
            plugin.close();
        });
        if (settings.clickableOverlay && settings.onlyCloseButton !== true) {
            $overlay.on('click', function () {
                plugin.close();
            });
        }

        // Init
        $element.show();
        if (settings.url !== undefined) {
            plugin.isLoaded = false;
            plugin.shouldBeOpened = false;
            if (settings.preload) loadPopinContent();
        } else if (typeof settings.onLoad === 'function') {
            if (settings.context !== undefined)
                settings.onLoad.call(settings.context, $element);
            else settings.onLoad($element);
        }
        if (isSizeAllowed(settings.size)) {
            if (settings.size === 'fullscreen') {
                $overlay.addClass(namespace + '-overlay-white');
                if (global.Utils.Common.isAppleDevice()) {
                    $overlay.addClass(namespace + '-overlay-fullscreen');
                }
            }
            $popinContainer.addClass(namespace + '-' + settings.size);
        }
        if (settings.style) $element.addClass(namespace + '-' + settings.style);
        if (hasArrow()) {
            $arrow.addClass('lr-arrow-right');
        }
    };
})(window, window.jQuery);

window.popinEvent = {
    close: 'popin.close',
    open: 'popin.open'
};
;
(function($){

    var namespace = 'progressBar';

    $[namespace] = function(element) {
        // Private properties
 
        // Public properties
        
        // DOM Picks
        var $container = $(element);
        var containerWidth = $container.width();
        var $progressbarProgress = $container.find('.progressbar-progress');
        var $progressbarInfo = $container.find('.progressbar-info');
        var progressbarProgressPercent = $progressbarProgress.data('percentProgress');
        var percentProgress = progressbarProgressPercent.toString().indexOf(',') !== -1 ? parseFloat(progressbarProgressPercent.replace(',', '.')) : parseInt(progressbarProgressPercent);
        var $progressbarTriangle = $container.find('.progressbar-triangle');
        var fadeDuration = parseInt($progressbarProgress.css('transitionDuration')) * 1000 / 2;
        // DOM building elements
        
        // DOM adjustments
        
        // Private methods
        var positionInfo = function(){
            var halfProgressbarInfoWidth = $progressbarInfo.width() / 2; 
            var progressbarProgressWidth = containerWidth * percentProgress / 100;
            if(progressbarProgressWidth < halfProgressbarInfoWidth) {
                $progressbarInfo.css('left', 0);
            } else if(progressbarProgressWidth > halfProgressbarInfoWidth && containerWidth - halfProgressbarInfoWidth < progressbarProgressWidth) {
                $progressbarInfo.css('right', 0);
            } else {
                $progressbarInfo.css('left', progressbarProgressWidth - halfProgressbarInfoWidth);
            }
            return $progressbarInfo.fadeIn(fadeDuration);
        }
        
        // Public methods
        
        // Events
        
        // Init
        $progressbarProgress.width(percentProgress + '%');
        $progressbarTriangle.fadeIn(fadeDuration, function(){
            if($progressbarInfo.length === 1){
                positionInfo();
            }
        });


    }
    $.fn[namespace] = function () {
        return this.each(function() {
            var $this = $(this);
            if ($this.data(namespace) === undefined) {
                $this.data(namespace, new $[namespace](this));
            }
        });
    }
})(jQuery);;
(function (global, $) {
    "use strict";

    var namespace = "readmore";

    var EVENT_CLICK = "click";

    $[namespace] = function (element, options) {
        // Private properties
        var plugin = this;
        var openedClass = "readmore--opened";
        var LABELS = global.labels["MobileV3_Common"];

        // Parameters
        var defaultSettings = {
            maxHeight: 60,
            showText: LABELS["ReadMore"],
            hideText: LABELS["ReadLess"],
            openOnInit: false
        };
        var settings = $.extend({}, defaultSettings, options);

        // Public properties
        plugin.isOpen = settings.openOnInit;

        // DOM
        var $element = $(element);
        var $link = $("<a>", {
            href: "#",
            class: "readmore_link",
            text: getLinkText()
        });

        // DOM building
        $element.addClass(namespace);
        if ($element.siblings(".readmore_link").length === 0) {
            $element.after($link);
        } else {
            $link = $element.siblings(".readmore_link");
        }

        // Private methods
        function getLinkText() {
            if (plugin.isOpen) {
                return settings.hideText;
            } else {
                return settings.showText;
            }
        }

        // Public methods
        plugin.open = function () {
            if (plugin.isOpen) {
                return;
            }

            $element
                .addClass(openedClass)
                .height("auto");
            plugin.isOpen = true;
            $link.text(getLinkText());
        };

        plugin.close = function () {
            $element
                .removeClass(openedClass)
                .height(settings.maxHeight);
            plugin.isOpen = false;
            $link.text(getLinkText());
        };

        plugin.toggle = function (forceOpening) {
            if (!plugin.isOpen || forceOpening === true) {
                plugin.open();
            } else {
                plugin.close();
            }
        };

        // Events
        $link.on(EVENT_CLICK, function (event) {
            event.preventDefault();
            plugin.toggle();
        });

        // Init
        if (settings.openOnInit) {
            plugin.open();
        } else {
            plugin.close();
        }
    };
})(window, jQuery);;
(function (global, $) {
  'use strict';

  // Shared properties
  var namespace = 'reco';
  var moduleTemplate = {
    carousel: 'carousel',
    list: 'list'
  };
  var utilsCommon = global.Utils.Common;
  var zoneType = {
    atb: 'ATB',
    histo: 'histo'
  };
  var $removeModel = $('<div>', { class: 'close' });

  $[namespace] = function (element, options) {
    // Private properties
    var me = this;
    var $container = $(element);
    var settings = options;
    var isHisto = settings.type === zoneType.histo;
    var isSHP = settings.rating === true;
    var acceptPriceForHisto = true;
    var template = settings.template ? settings.template : moduleTemplate.carousel;
    var cerberusLabel = settings.cerberus || settings.key;
    var dataCerberus = 'data-cerberus';
    var isDelayed = false;
    var mod;
    var productCount = 0;
    var targetEvent;
    const imageUrlPrefix = 'https://cdn.laredoute.com';

    // DOM picks
    var $title = $container.find('.' + namespace + '-title');

    // DOM building element
    var $productModel = $('#productModel').find('.product'),
      $content,
      $modItemModel;

    // Private methods
    var getModuleParameters = function () {
      if (mod === moduleTemplate.carousel && settings.type !== zoneType.atb) {
        return { itemnumberlg: 6 };
      }
    };
    var buildProducts = function (products) {
        if ($.isArray(products) && products.length > 0) {
          var $products = $();

          $content = $container.find('.' + mod);
          if ($content.length === 0) $content = $('<div>', { class: mod }).appendTo($container);
          $.each(products, function (index) {
            $products = $products.add(newProduct(this));
          });
          $content.html($products);
          if (typeof $.fn[mod] === varType.fn) {
            if (isDelayed) {
              if (canApply()) $content[mod](getModuleParameters());
              else
                window.$eventContainer.one(targetEvent, function () {
                  $content[mod](getModuleParameters());
                });
            } else $content[mod](getModuleParameters());
          }
        } else {
          // handle here the error/no result case
          $container.hide();
        }
      },
      canApply = function () {
        return true;
      },
      newProduct = function (productInfos) {
        var $modItem = $modItemModel.clone(),
          $product = $productModel.clone(),
          $link = $product.find('.product-link'),
          originalPrice = productInfos.priceCatalog,
          finalPrice = productInfos.finalPrice,
          ecotax = parseFloat(productInfos.ecotax),
          hasEcoTax = ecotax > 0,
          level4CatId = productInfos.lvl4CatId,
          level5CatId = productInfos.lvl5CatId;
        if (isHisto) var $remove = $removeModel.clone().attr('data-productid', productInfos.id).appendTo($product);

        if (hasEcoTax) {
          finalPrice = (finalPrice * 100 + ecotax * 100) / 100;
          originalPrice = (originalPrice * 100 + ecotax * 100) / 100;
        }

        $product.attr('data-index', productCount);
        $product.attr(dataCerberus, cerberusLabel + '_product' + productCount++);
        $product.find('.product-brand').text(productInfos.brand);
        $product.find('.product-title').text(productInfos.title);

        if (!isHisto || acceptPriceForHisto) {
          $product.find('.product-price').text(utilsCommon.formatPrice(finalPrice));
          if (productInfos.priceCatalog !== productInfos.finalPrice) $product.find('.product-original-price').text(utilsCommon.formatPrice(originalPrice)).show();
          if (productInfos.discount !== undefined && productInfos.discount !== 0)
            $product
              .find('.product-discount')
              .text('-' + productInfos.discount + '%')
              .show();
          if (productInfos.hasSeveralPrices === 1) $product.find('.product-price-from').show();
          if (hasEcoTax)
            $product
              .find('.product-eco-part')
              .text(function (index, oldText) {
                return oldText.replace('{0}', utilsCommon.formatPrice(ecotax));
              })
              .show();
          if (productInfos.sticker === 'Go For Good') {
            $product.find('.product-sticker-bottom-left').text(productInfos.sticker).show();
          }
          // adding lvl 4 or 5 (if exist) category ID to prices on .com
          if (_page.country === 'com') {
            var levelCatId = level5CatId !== undefined ? level5CatId : level4CatId;
            $product.find('.product-price').attr('data-pc', levelCatId);
            $product.find('.product-original-price').attr('data-pc', levelCatId);

            $product.find('.product-thumb-price').find('.product-thumb-from').attr('data-pc', levelCatId);
            $product.find('.product-thumb-price').find('.product-thumb-after').attr('data-pc', levelCatId);
          }
        }

        if (isSHP) {
          if (productInfos.rating !== undefined) {
            if (productInfos.rating >= 3.25) {
              $product.find('.rating-stars-container').css('display', 'inline-block');
            }
            var stringRating = (Math.round(productInfos.rating * 2) / 2).toString().replace('.', '_');
            $product.find('.enable-stars').addClass('rating-' + stringRating);
            $product.find('.review-number').text('(' + productInfos.reviewCount + ')');
          }
        }

        // Changement made for Criteo Sponso
        if (productInfos.onClickBeacon !== undefined || productInfos.onViewBeacon !== undefined) {
          $product.find('.product-info').append('<span>Sponsorisé</span>');
            $product.addClass('onViewOnClickBeaconPSF018')
                .attr('data-onclickbeacon', productInfos.onClickBeacon)
                .attr('data-onviewbeacon', productInfos.onViewBeacon)
                .attr('data-onloadbeacon', productInfos.onLoadBeacon);
        }

        if (mod === moduleTemplate.list) {
          $modItem.attr('data-maincatId', productInfos.mainCat.id);
          $modItem.attr('data-subcatId', productInfos.subCat.id);
        }

        $modItem.append($product);

        var photo = productInfos.photo;
        var $img = $('<img>', {
          src: imageUrlPrefix + photo + '?width=300&dpr=1',
          class: 'product-img',
          alt: productInfos.title
        });
        $product.find('.product-img').append($img);

        var domain = 'https://www.laredoute.' + _page.country,
          url = productInfos.url.replace(domain, ''),
          hasSearch = url.indexOf('?') >= 0,
          search = '',
          suffix_key = cerberusLabel;
        if (_page.name == pageName.hp) {
          suffix_key += '_' + utilsCommon.formatText(settings.title);
        } else {
          suffix_key += '_' + _page.pageType.toLowerCase();
        }

        if (hasSearch) search = url.split('?')[1];
        if (global.isMobileDevice) {
          url += '#shoppingtool=' + suffix_key;
        }
        $link.prop('href', url).data('productid', productInfos.id);

        /* global.Utils.Common.onCustomClick($link, function() {
					Utils.CookieManager.CreateCookie('quickzoomshoppingtool', suffix_key);
				}); */

        if (isHisto) {
          $remove.on('click', function () {
            window._ebq.push([
              'trackActivity',
              {
                original_id: productInfos.id,
                verb: 'view',
                opposite: true,
                type: 'product'
              }
            ]);
            $modItem.remove();
            if ($content.is(':empty')) $container.hide();
            if (typeof $.fn[mod] === varType.fn) $content[mod]('reset');
          });
        }

        return $modItem;
      },
      setModuleInfo = function () {
        mod = template;
        if (mod === moduleTemplate.list) {
          $modItemModel = $('<li>', { class: 'col-xs-6 col-md-4' });
        } else {
          $modItemModel = $('<div>', { class: mod + '-item' });
        }

        if (settings.type === zoneType.atb) {
          isDelayed = true;
          targetEvent = pdpEvent.atbOpen;
          canApply = function () {
            return $('#layerAtb').is(':visible');
          };
        }
      };

    // Public Method
    me.addNewProducts = function (products) {
      if ($.isArray(products) && products.length > 0) {
        var $products = $();

        $.each(products, function (index) {
          $products = $products.add(newProduct(this));
        });
        $content.append($products);
      }
    };

    // Init
    setModuleInfo();
    $container.show();

    $container.attr(dataCerberus, cerberusLabel);
    if (typeof settings.title === varType.str) {
      if ($title.length === 0)
        $title = $('<div>', {
          class: 'reco-title catalog-subtitle'
        }).prependTo($container);
      $title.html(settings.title).attr(dataCerberus, cerberusLabel + '_title');
    }

    if (settings.isMultiZone) {
      // $.each(settings.productsInfos, function(i, zone) {
      //     $container.find('.reco-title-' + i).text(zone.title).attr(dataCerberus, cerberusLabel + '_strategy' + i);
      //     buildProducts(zone.products, $container.find('.reco-content-' + i));
      // });
    } else {
      buildProducts(settings.productsInfos);
    }
  };

  $.fn[namespace] = function (data) {
    return this.each(function () {
      var $this = $(this);
      if ($this.data(namespace) === undefined) {
        var options = $this.data();
        if (typeof data === varType.obj) $.extend(options, data);
        var plugin = new $[namespace](this, options);
        $this.data(namespace, plugin);
      }
      if (typeof data === varType.str) {
        var pluginMethod = $this.data(namespace)[data];
        if (typeof pluginMethod === varType.fn) {
          pluginMethod.apply(this);
        }
      }
    });
  };
})(window, jQuery);
;
(function (global, $) {
    'use strict';

    var namespace = 'scrollable';

    $[namespace] = function (element, options) {
        // Private properties
        var $element = $(element);
        var elementProps = getElementProps();
        var elementWidth = elementProps.width;
        var elementRect = elementProps.offset;
        var elementLeftPosition = elementRect.left;
        var elementTopPosition = elementRect.top;
        var updating = false;
        var defaultOptions = {
            offsetLeft: elementLeftPosition,
            offsetTop: elementTopPosition,
            top: 16,
            zIndex: 1
        };
        var settings = $.extend({}, defaultOptions, options);

        // Private methods
        function getElementProps() {
            return {
                offset: $element.offset(),
                width: $element.outerWidth()
            };
        }

        function resetElementPosition() {
            $element.css({
                position: 'static'
            });
        }

        function setPositionStyle() {
            var positionTop = settings.offsetTop - settings.top;

            if (
                global.scrollY >= positionTop ||
                global.pageYOffset >= positionTop
            ) {
                $element.css({
                    position: 'fixed',
                    left: elementLeftPosition,
                    top: settings.top,
                    width: elementWidth,
                    zIndex: settings.zIndex
                });
            } else {
                resetElementPosition();
                /**
                 * After resetting the position of the element
                 * back to "static" we can update the element's
                 * properties to be sure they are still good.
                 */
                var elementCurrentProps = getElementProps();
                elementWidth = elementCurrentProps.width;
                elementLeftPosition = elementCurrentProps.offset.left;
            }

            updating = false;
        }

        // Events
        $(global)
            .on('scroll', function () {
                if (updating) {
                    return;
                } else {
                    updating = true;
                    // To avoid blinking
                    setPositionStyle();
                }
            })
            .on('resize', function () {
                resetElementPosition();
            });
    };
})(window, jQuery);
;
(function(global, $) {
    'use strict';

    // Shared properties
    var namespace = 'sidePanel',
        sidePanelNumber = 0;

    global.sidePanelEvent = {
        childrenClosed: namespace + '.childrenClosed.',
        childrenOpening: namespace + '.childrenOpening.',
        parentClosing: namespace + '.parentClosing.',
    };

    $[namespace] = function(element, options) {
        // Private properties
        var currentIndex,
            initialIndex = 50, // For RU (cf. flocktory-widget-overlay) // not agreed, flocktory-widget-overlay has to change.
            isOpened = false,
            name = $(element).attr('id'),
            plugin = this,
            settings = $.extend({
                from: 'right',
                parent: 'none',
                stickedBtnPosition: 'none',
            }, options);

        // Public properties

        // DOM Picks
        var $element = $(element),
            $overlay = $('#overlay'),
            $stickedBtn = $(settings.stickedBtn),
            $trigger = $(settings.trigger);

        // DOM building elements
        var $container = $('<div>', {
                class: 'panel-wrapper-' + settings.from,
                'data-name': name
            })
            // .css('height', $element.height() > $(window).height() ? '100%' : $element.css('height'))
            .appendTo('body');

        // DOM adjustments
        $container.append($element);

        // Private methods
        var childrenClose = function() {
                setTimeout(function() {
                    global.$eventContainer.trigger(global.sidePanelEvent.childrenClosed + settings.parent);
                }, 400);
            },
            childrenOpen = function() {
                global.$eventContainer.trigger(global.sidePanelEvent.childrenOpening + settings.parent);
                setTimeout(plugin.open, 400);
            },
            copyBtn = function() {
                if (settings.stickedBtnPosition === 'top') {
                    $stickedBtn.parent().removeClass('panel-wrapper-bottom-with-sticked-btn');
                    $stickedBtn.prependTo($container);
                    $container.addClass('panel-wrapper-bottom-with-sticked-btn');
                
                    // $trigger = $(settings.trigger);
                }
            },
            haveStickedButton = function() {
                return settings.stickedBtnPosition !== 'none' && $stickedBtn.length > 0;
            },
            hide = function() {
                $container.css('zIndex', '').removeClass(global.elementStatus.opened);
            },
            isParent = function() {
                return settings.parent === 'none';
            },
            show = function() {
                $container.css('zIndex', currentIndex).addClass(global.elementStatus.opened);
            };

        // Public methods
        plugin.open = function() {
            if (!isOpened) {
                isOpened = true;

                if (haveStickedButton()) {
                    copyBtn();
                    if (isParent()) {
                        $stickedBtn.find('.lr-arrow').removeClass('lr-arrow-up').addClass('lr-arrow-down');
                        $('#backToTop').hide();
                    }
                }

                currentIndex = initialIndex + sidePanelNumber;
                show();

                sidePanelNumber += 1;
                global.Utils.Common.startNoScroll();
                $overlay.addClass(global.elementStatus.visible);
            }
        };
        plugin.close = function() {
            if (isOpened) {
                isOpened = false;

                if (haveStickedButton()) {
                    global.$eventContainer.trigger(global.sidePanelEvent.parentClosing + name);
                    if (isParent()) {
                        $stickedBtn.find('.lr-arrow').removeClass('lr-arrow-down').addClass('lr-arrow-up');
                        setTimeout(function() {$('#backToTop').show();}, 400);
                    }
                }

                hide();

                sidePanelNumber -= 1;
                if (sidePanelNumber === 0) {
                    global.Utils.Common.stopNoScroll();
                    $overlay.removeClass(global.elementStatus.visible);
                }

                if (!isParent()) {
                    childrenClose();
                }
            }
        };
        plugin.destroy = function() {
            plugin.close();
            $overlay.off('click', plugin.close);
            if ($trigger.length > 0) {
                $trigger.off('click', plugin.open);
            }
            $container.remove();
        };
        plugin.toggle = function() {
            if (isOpened) {
                plugin.close();
            } else {
                plugin.open();
            }
        };
        plugin.copyButtonOnParent = function() {
            if (isParent()) {
                copyBtn();
            }
        };

        // Events
        $overlay.on('click', plugin.close);
        if ($trigger.length > 0) {
            if (haveStickedButton()) {
                if (isParent()) {
                    $trigger.on('click', plugin.toggle);
                } else {
                    $trigger.on('click', childrenOpen);
                }
            } else {
                $trigger.on('click', plugin.open);
            }
        }
        global.$eventContainer.on(global.sidePanelEvent.childrenClosed + name, function() {
            if (isOpened) {
                if (haveStickedButton()) {
                    copyBtn();
                }
                show();
            }
        });
        global.$eventContainer.on(global.sidePanelEvent.childrenOpening + name, function() {
            if (isOpened) {
                hide();
            }
        });
        global.$eventContainer.on(global.sidePanelEvent.parentClosing + settings.parent, plugin.close);

        // Init
    };

    $.fn[namespace] = function(data) {
        return this.each(function() {
            var $this = $(this);
            if ($this.data(namespace) === undefined) {
                var options = $this.data();
                if (typeof data === varType.obj) $.extend(options, data);
                var plugin = new $[namespace](this, options);
                $this.data(namespace, plugin);
            }
            if (typeof data === varType.str) {
                var pluginMethod = $this.data(namespace)[data];
                if (typeof pluginMethod === varType.fn) {
                    pluginMethod.apply(this);
                }
            }
        });
    };
})(window, jQuery);
;
/* How to use it

HTML :
<div id="myAwesomeSlider" class="slider">
    <div class="slide">The first slide</div>
    <div class="slide">The second slide</div>
    <div class="slide">Etc...</div>
</div>

// Add classes "show" and "opened" on the slide you want to toggle by default

JS :
$('#myAwesomeSlider').slider();

The slider can be automatically set by using the class `apply-slider`
(ie. <div id="myAwesomeSlider" class="slider apply-slider">)

Note :
o there is no default behaviour to switch from one slide to another.
  You have to handle it, for exemple by adding a button with a click event and use `next`, `prev` or `goTo` method.
o the slide plugin below is used to make the slides of the slider.
o `goTo` method :
    . if no params are used, it's similar to `next` method
    . first param is the id of the target slide.
    . second param is an object with new URL information (if you need to handle the browser historic)
      ex: var newURL = {
        action: 'replace', // or 'push' to add a new entry
        history: {
            origin:
                window.location.origin ||
                window.location.protocol + '//' + window.location.host,
            pathname: window.location.pathname,
            search: window.location.search,
            hash: '#goto=targetSlide',
            datas: { slideName: 'targetSlide' }
        }
      }
    . example of call : $('#myAwesomeSlider').data('slider').goTo('#targetSlide', newURL);
    . if you want to go back to the previous slide with a `history.back();` you need to use the second param,
      and handle the back with the window popstate event. (ie. example into `Basket.js`)
o `addSlide` method :
    . first param is the id of the new slide. If the element already exists into the DOM, it is added to the slider.
    . second param is an object with the slide informations.
        - `after` : the slide is added after the $(after) element. If undefined, the slide is added at the end of the slider.
        - `content` : if the id doesn't exists, the new slide is created and filled with the `content`

Options :

Name              |  Expected               |  Default    |  Description
==================|=========================|=============|=========================================================================
fullpage          |  boolean                |  true       |  If false, the window doesn't scroll top when sliding.
------------------|-------------------------|-------------|-------------------------------------------------------------------------

To go next or prev :
$('#myAwesomeSlider').slider('next')
$('#myAwesomeSlider').slider('prev')

To add a slide :
$('#myAwesomeSlider').data('slider').addSlide('#newSlide', { after: '#secondSlide' })

*/

(function ($) {
    'use strict';

    var namespace = 'slider';

    $[namespace] = function (element, options) {
        // Private properties
        var plugin = this;
        var defaultOptions = {
            fullpage: true
        };
        var settings = $.extend({}, defaultOptions, options);

        // Public properties

        // DOM picks
        var $element = $(element);
        var $current;

        // DOM building element

        // DOM adjustments

        // Private methods
        var currentSlide = function () {
            return $element.find('.slide.opened').last();
        };
        var updateCurrentSlide = function ($el) {
            $current = $el;
            plugin.currentId = $el.attr('id');
            $current.prevAll('.opened').removeClass('show');
            $current.nextAll().removeClass('show opened');
        };

        // Public methods
        plugin.goTo = function (slideId, params) {
            params = params || {};
            if (params.action !== undefined) {
                params.history = params.history || {};
                var newUrl =
                    params.history.origin ||
                    window.location.origin ||
                    window.location.protocol + '//' + window.location.host;
                newUrl += params.history.pathname || window.location.pathname;
                newUrl += params.history.search || window.location.search;
                if (params.history.hash) {
                    newUrl += params.history.hash;
                }
                if (params.action === 'replace') {
                    window.history.replaceState(
                        params.history.datas,
                        slideId,
                        newUrl
                    );
                } else if (params.action === 'push') {
                    window.history.pushState(
                        params.history.datas,
                        slideId,
                        newUrl
                    );
                }
            }

            var $goTo;
            if (slideId === undefined && $current !== undefined)
                $goTo = $current.next();
            else
                $goTo = $(
                    (('' + slideId).indexOf('#') === -1 ? '#' : '') + slideId
                );

            if ($goTo.length > 0 && $goTo.attr('id') !== plugin.currentId) {
                $goTo.data('slide').open();
                updateCurrentSlide($goTo);
                if (settings.fullpage) {
                    $('html, body').animate({ scrollTop: 0 }, 0);
                }
                $element.trigger(namespace + '.slide');
            } else if ($goTo.length === 0) {
                $element.trigger(namespace + '.error');
            }

            if (typeof params.cb === 'function') params.cb();
        };
        plugin.next = function () {
            plugin.goTo();
        };
        plugin.prev = function () {
            if (
                $current !== undefined &&
                $current.is(':first-child') === false
            ) {
                $current.data('slide').close();
                $current = currentSlide();
                $current.addClass('show');
                plugin.currentId = $current.attr('id');
                $element.trigger(namespace + '.slide');
            }
        };
        plugin.addSlide = function (id, data) {
            data = data || {};
            var $newSlide;
            if ($('#' + id).length > 0) {
                $newSlide = $('#' + id);
                $newSlide.addClass('slide');
            } else {
                $newSlide = $('<div>', {
                    id: id,
                    class: 'slide',
                    html: data.content
                });
            }
            if (data.after !== undefined) $('#' + data.after).after($newSlide);
            else $element.append($newSlide);
            $newSlide.addClass('slide').slide();
        };

        // Events

        // Init
        plugin.$slides = $element.find('> .slide');
        plugin.$slides.slide();
        plugin.$slides.on('slide.open', function () {
            updateCurrentSlide($(this));
        });

        var $children = $element.children('.slide.show.opened');
        if ($children.length === 1) {
            $current = $children;
        }
    };
})(window.jQuery);

(function ($) {
    'use strict';

    var namespace = 'slide';

    $[namespace] = function (element, options) {
        var plugin = this;
        var $element = $(element);

        plugin.init = function () {
            if (options.content !== undefined) {
                $element.html(options.content);
            }
            if (options.trigger !== undefined) {
                $(options.trigger).on('click', function () {
                    plugin.open();
                });
            }
        };

        plugin.open = function () {
            $element.addClass('show opened');
            $element.trigger(namespace + '.open');
        };
        plugin.close = function () {
            $element.removeClass('show opened');
            $element.trigger(namespace + '.close');
        };

        plugin.init();
    };
})(window.jQuery);
;
(function (global, $) {
  'use strict';

  var namespace = 'snackbar';

  var EVENT_CLICK = 'click';

  $[namespace] = function (element, options) {
    // Private properties
    var plugin = this;
    var crossSize;
    var closebuttonPosition;
    var unlimitedType = ['error'];
    var EVENT_OPEN = namespace + '.open';
    var EVENT_CLOSE = namespace + '.close';
    var defaultGutter = 16;
    var $element = $(element);
    var isMobile = _LaRedoute.dataGlobal.isMobileDevice;

    // Parameters
    var defaultSettings = {
      timeout: 5000,
      customCSS: null,
      //Use 'icon : null' for no icon
      icon: 'info',
      type: 'info',
      // `isStatic` shows the message in the document body (not really a
      // snackbar anymore)
      isStatic: false,
      closebuttonPosition: ''
    };

    /* change params depending on type */
    if (options.type === 'error' || $element.hasClass('snackbar--error')) {
      defaultSettings.timeout = null;
      defaultSettings.icon = 'warning';
    } else if (options.type === 'success' || $element.hasClass('snackbar--success')) {
      defaultSettings.icon = 'tick';
    }

    /* change style cross depending on device */
    if (isMobile) {
      crossSize = 'big';
    } else {
      crossSize = 'small';
    }

    var settings = $.extend({}, defaultSettings, options);

    // Public properties
    plugin.isOpen = false;

    // DOM
    if (!settings.isStatic) {
      // move the element to the top
      $element.appendTo('body');
    }

    if (!$element.hasClass('snackbar')) {
      $element.addClass('snackbar');
    }

    if (settings.isStatic && !$element.hasClass('snackbar--static')) {
      $element.addClass('snackbar--static');
    }

    // DOM building

    /* Loadbar */
    if (!settings.isStatic) {
      /* Close button */
      var $closeButton = $('<div />', {
        class: namespace + '_closeButton lr-icon lr-icon-cross-' + crossSize
      }).appendTo($element);
      if (settings.closebuttonPosition === 'top') {
        $closeButton.addClass('cross-top');
      }

      $('<div class="snackbar_loadBar">' + '<div class="snackbar_loadBar snackbar_loadBar--loading"></div>' + '</div>').appendTo($element);
    }

    /* Icon */
    if (settings.icon !== null) {
      $('<span class="lr-icon lr-icon-' + settings.icon + '"></span>').prependTo($element);
    }

    // Private methods
    function show() {
      var animateProperties = { top: 0 };

      if (!isMobile) {
        animateProperties = {
          right: defaultGutter,
          opacity: 1
        };
      }

      return $element.show().animate(animateProperties, {
        complete: function () {
          $element.trigger(EVENT_OPEN);
        }
      });
    }

    function hide() {
      var animateProperties = { top: -originalHeight };

      if (!isMobile) {
        animateProperties = {
          right: -originalWidth,
          opacity: 0
        };
      }

      return $element.animate(animateProperties, {
        complete: function () {
          $element.hide().trigger(EVENT_CLOSE);
        }
      });
    }

    function animateProgressBar() {
      return $element.find(
        $('.snackbar_loadBar--loading').animate(
          {
            width: '100%'
          },
          settings.timeout
        )
      );
    }

    function resetProgressBar() {
      return $element.find($('.snackbar_loadBar--loading').stop(true, true).width(0));
    }

    // Public methods
    plugin.open = function () {
      if (settings.isStatic) {
        $element.show();
      } else {
        if (plugin.isOpen) {
          return $element;
        }
        if ($.inArray(settings.type, unlimitedType) === -1) {
          resetProgressBar();
          animateProgressBar();
        }
        show();
      }
    };

    plugin.close = function () {
      if (settings.isStatic) {
        $element.hide();
      } else {
        hide();
      }
    };

    // Events
    if (!settings.isStatic) {
      $closeButton.on(EVENT_CLICK, function () {
        plugin.close();
      });
    }

    $element
      .on(EVENT_OPEN, function () {
        // if timeout negative then snackbar will remain till the cross is clicked
        if (settings.timeout > 0) {
          plugin.closeInterval = global.setInterval(function () {
            plugin.close();
          }, settings.timeout);
        }
      })
      .on(EVENT_CLOSE, function () {
        if (plugin.closeInterval) {
          clearInterval(plugin.closeInterval);
        }
      });

    // Init
    var originalHeight = $element.outerHeight();
    var originalWidth = $element.outerWidth();
    var headerHeight = $('#banner-container').outerHeight() + $('#header').outerHeight() + $('#menuMain').outerHeight() + $('#bannerBelowHeader').outerHeight() + defaultGutter;

    if (!settings.isStatic) {
      $element.css(
        isMobile
          ? {
              maxWidth: 'none',
              top: -originalHeight,
              paddingRight: '60px'
            }
          : {
              top: headerHeight,
              right: -originalWidth,
              opacity: 0
            }
      );
    }

    $element.addClass('snackbar--' + settings.type);

    if (global._LaRedoute.getScreenType() > 1 && settings.customCSS) {
      $element.css(settings.customCSS);
    }
  };
})(window, jQuery);
;
(function ($) {
    $.fn.toggleBlock = function (options) {
        var blockClass = '.toggle';
        var settings = $.extend({
            animationDuration: 400,
            blockTextClass: blockClass + 'text',
            blockTitleClass: blockClass + '-title',
            chevronClass: '.chevron',
            chevronClosedClass: '.chevron-down',
            chevronOpenedClass: '.chevron-up',
            openedClass: 'opened',
            toggleTargetClass: blockClass + '-target',
            toggleTriggerClass: blockClass + '-trigger',
            toggleTargetClosedHeight: 120,
            triggerEvent: 'click',
        }, options);

        var self = this,
            $self = $(self);

        var openClassName = toClassName(settings.openedClass);

        function toClassName(selector) {
            return selector.replace('.', '');
        }

        /**
         * Determine if there is a chevron inside the block
         * returns {Boolean}
         */
        self.hasChevron = function () {
            return $self.find(settings.chevronClass).length > 0;
        };

        self.getInitialTargetHeight = function () {
            return self.toggleTargetInitialHeight;
        };

        self.setTargetInitialHeight = function (height) {
            self.toggleTargetInitialHeight = height;
        };

        /**
         * Change the chevron from open status
         * to close.
         */
        self.switchCloseChevron = function () {
            self.toggleChevronClass(settings.chevronOpenedClass, settings.chevronClosedClass);
        };

        /**
         * Change the chevron from close status
         * to open.
         */
        self.switchOpenChevron = function () {
            self.toggleChevronClass(settings.chevronClosedClass, settings.chevronOpenedClass);
        };

        self.toggleChevronClass = function (selectorToFindAndRemove, selectorToAdd) {
            if (self.hasChevron()) {
                return $self.find(selectorToFindAndRemove).removeClass(toClassName(selectorToFindAndRemove)).addClass(toClassName(selectorToAdd));
            }
        };

        /**
         * Indicate whether the block has a target.
         * returns {Boolean}
         */
        self.hasTarget = function (depth) {
            return self.getTarget().length > 0;
        };

        self.getTarget = function () {
            return $self.find(settings.toggleTargetClass);
        };

        self.getTrigger = function () {
            return $self.find(settings.toggleTriggerClass);
        };

        /**
         * Indicate whether the toggle block is opened.
         * returns {Boolean}
         */
        self.isOpen = function () {
            return $self.hasClass(settings.openedClass);
        };

        // Options of the animation of the target
        var animationOptionsObject = {
            duration: settings.animationDuration
        };

        self.openBlock = function () {
            $self.addClass(openClassName);
            self.getTarget().animate({
                height: self.getInitialTargetHeight()
            }, animationOptionsObject);
        };

        self.closeBlock = function () {
            $self.removeClass(openClassName);
            self.getTarget().animate({
                height: settings.toggleTargetClosedHeight
            }, animationOptionsObject);
        };

        self.isTogglable = function () {
            return self.getInitialTargetHeight() > settings.toggleTargetClosedHeight;
        };

        $(function () {
            // We save the original height of the target block
            self.setTargetInitialHeight(self.getTarget().height());
            // Setting of its new height (status closed)
            self.getTarget().css({
                height: settings.toggleTargetClosedHeight
            });

            if (!self.isTogglable()) {
                $(self).removeClass(openClassName);
            } else {
                $(settings.toggleTriggerClass).on(settings.triggerEvent, function (event) {
                    event.preventDefault();
                    if (self.hasTarget()) {
                        // If the block is opened
                        if (self.isOpen()) {
                            self.closeBlock();
                            self.switchCloseChevron();
                        }
                        // Else if it is closed
                        else {
                            self.openBlock();
                            self.switchOpenChevron();
                        }
                    }
                });
            }
        });
        return this;
    }

    $(function () {
        $('.toggle').toggleBlock();
    });
})(window.jQuery);;
(function($) {
    'use strict';

    var namespace = 'tooltip';

    // Events
    var closeEvent = namespace + '.close';
    var openEvent = namespace + '.open';

    $[namespace] = function(element, options, callbacks) {
        var plugin = this;
        var $element = $(element);

        var isVisibleClass = 'is-visible';

        var defaultSettings = {
            closeOverlay: false,
            showClose: false,
            style: 'default'
        };

        plugin.open = function() {
            plugin.$wrapper.show();
            plugin.opened = true;
            if (plugin.$overlay) {
                plugin.$overlay.addClass(isVisibleClass);
            }
            $element.trigger(openEvent);
        };
        plugin.close = function() {
            plugin.$wrapper.hide();
            plugin.opened = false;
            $element.trigger(closeEvent);
            if (plugin.$overlay) {
                plugin.$overlay.removeClass(isVisibleClass);
            }
        };

        // Init
        (function() {
            // properties
            plugin.settings = $.extend(defaultSettings, options);
            plugin.opened = false;

            // dom picks
            plugin.$parent = $element.parent();
            if (options.trigger !== undefined) plugin.$trigger = $(options.trigger);

            // dom adjustments
            plugin.$overlay = false;

            if (options.closeOverlay){
                plugin.$overlay = $('<div>', {class: namespace + '-overlay'}).appendTo(plugin.$parent);
            }
            plugin.$wrapper = $('<div>', {class: namespace + '-wrapper'}).insertAfter($element).append($element);
            var styleClass = plugin.settings.style.split(' ');
            styleClass.forEach(function(el) {
                plugin.$wrapper.addClass(namespace + '-' + el);
            });
            if (plugin.settings.showClose) plugin.$btnClose = $('<span>', {class: namespace + '-btn-close close'}).appendTo($element);
            $element.show();

            // options application
            if ($.inArray(plugin.settings.position, ['bottom', 'top', 'top left']) !== -1) {
                var positions = plugin.settings.position.split(' ');
                plugin.$wrapper.addClass(function () {
                    var classes = [];
                    $.each(positions, function (index, position) {
                        classes.push(namespace + '-' + position);
                    });
                    return classes.join(' ');
                });
            }
            if (options.widthRestriction) {
                plugin.$wrapper.css('max-width', '100%');
                $element.css('max-width', '100%');
            }

            // events
            if (options.trigger !== undefined && plugin.$trigger.length > 0) {
                if (Utils.Common.isTouchDevice() || options.triggerEvent == 'click')
                    plugin.$trigger.on('click', function(e) {
                        e.stopPropagation();
                        e.preventDefault();
                        if (plugin.opened) plugin.close();
                        else plugin.open();
                    });
                else plugin.$trigger.on('mouseenter', function() { plugin.open(); });
            }
            if (options.temp) {
                $element.on(openEvent, function() {
                    setTimeout(function() {
                        plugin.close();
                    }, options.tempDuration || 2000);
                });
            } else {
                plugin.$parent.on('mouseleave', function() {
                    plugin.close();
                });
            }
            if (plugin.settings.showClose) plugin.$btnClose.on('click', function() { plugin.close(); });
            if (options.closeOverlay) {
                plugin.$overlay.on('click', function() { if (plugin.opened) plugin.close(); });
            }
        })();
    };

    $.fn[namespace] = function(data) {
        return this.each(function() {
            if ($(this).data(namespace) === undefined) {
                var options = $(this).data();
                if (typeof data === varType.obj) {
                    $.extend(options, data);
                }
                var plugin = new $[namespace](this, options);
                $(this).data(namespace, plugin);
            }
            if (typeof data === varType.str) {
                var tooltipMethod = $(this).data(namespace)[data];
                if (typeof tooltipMethod === varType.fn) {
                    tooltipMethod.apply(this);
                }
            }
        });
    };
})(jQuery);
;
(function (global, $) {
    'use strict';

    var namespaces = [
        'carousel',
        'popin',
        'readmore',
        'scrollable',
        'showpassword',
        'slide',
        'slider',
        'snackbar'
    ];

    namespaces.forEach(function (namespace) {
        $.fn[namespace] = function (data) {
            return this.each(function () {
                var $this = $(this);
                if ($this.data(namespace) === undefined) {
                    var options = $this.data();
                    if (typeof data === global.varType.obj)
                        $.extend(options, data);
                    var plugin = new $[namespace](this, options);
                    $this.data(namespace, plugin);
                }
                var pluginMethod;
                if (typeof data === global.varType.str) {
                    pluginMethod = $this.data(namespace)[data];
                } else if (
                    typeof data === global.varType.obj &&
                    typeof data.method === global.varType.str
                ) {
                    pluginMethod = $this.data(namespace)[data.method];
                }
                if (typeof pluginMethod === global.varType.fn) {
                    pluginMethod.apply(this);
                }
            });
        };
    });
})(window, window.jQuery);
;
/*!
 * Swipe 2.2.11
 *
 * Brad Birdsall
 * Copyright 2013, MIT License
 *
*/

// if the module has no dependencies, the above pattern can be simplified to
// eslint-disable-next-line no-extra-semi
;(function (root, factory) {
    // eslint-disable-next-line no-undef
    if (typeof define === 'function' && define.amd) {
      // AMD. Register as an anonymous module.
      // eslint-disable-next-line no-undef
      define([], function(){
        root.Swipe = factory();
        return root.Swipe;
      });
    } else if (typeof module === 'object' && module.exports) {
      // Node. Does not work with strict CommonJS, but
      // only CommonJS-like environments that support module.exports,
      // like Node.
      module.exports = factory();
    } else {
      // Browser globals
      root.Swipe = factory();
    }
  }(this, function () {
    // Establish the root object, `window` (`self`) in the browser, `global`
    // on the server, or `this` in some virtual machines. We use `self`
    // instead of `window` for `WebWorker` support.
    var root = typeof self == 'object' && self.self === self && self ||
               typeof global == 'object' && global.global === global && global ||
               this;

    var _document = root.document;

    function Swipe(container, options) {

      'use strict';

      options = options || {};

      // setup initial vars
      var start = {};
      var delta = {};
      var isScrolling;

      // setup auto slideshow
      var delay = options.auto || 0;
      var interval;

      var disabled = false;

      // utilities
      // simple no operation function
      var noop = function() {};
      // offload a functions execution
      var offloadFn = function(fn) { setTimeout(fn || noop, 0); };
      // Returns a function, that, as long as it continues to be invoked, will not
      // be triggered.
      var throttle = function (fn, threshhold) {
        threshhold = threshhold || 100;
        var timeout = null;

        function cancel() {
          if (timeout) clearTimeout(timeout);
        }

        function throttledFn() {
          var context = this;
          var args = arguments;
          cancel();
          timeout = setTimeout(function() {
            timeout = null;
            fn.apply(context, args);
          }, threshhold);
        }

        // allow remove throttled timeout
        throttledFn.cancel = cancel;

        return throttledFn;
      };

      // check browser capabilities
      var browser = {
        addEventListener: !!root.addEventListener,
        // eslint-disable-next-line no-undef
        touch: ('ontouchstart' in root) || root.DocumentTouch && _document instanceof DocumentTouch,
        transitions: (function(temp) {
          var props = ['transitionProperty', 'WebkitTransition', 'MozTransition', 'OTransition', 'msTransition'];
          for ( var i in props ) {
            if (temp.style[ props[i] ] !== undefined){
              return true;
            }
          }
          return false;
        })(_document.createElement('swipe'))
      };

      // quit if no root element
      if (!container) return;

      var element = container.children[0];
      var slides, slidePos, width, length;
      var index = parseInt(options.startSlide, 10) || 0;
      var speed = options.speed || 300;
      options.continuous = options.continuous !== undefined ? options.continuous : true;

      // AutoRestart option: auto restart slideshow after user's touch event
      options.autoRestart = options.autoRestart !== undefined ? options.autoRestart : false;

      // throttled setup
      var throttledSetup = throttle(setup);

      // setup event capturing
      var events = {

        handleEvent: function(event) {
          if (disabled) return;

          switch (event.type) {
            case 'mousedown':
            case 'touchstart': this.start(event); break;
            case 'mousemove':
            case 'touchmove': this.move(event); break;
            case 'mouseup':
            case 'mouseleave':
            case 'touchend': this.end(event); break;
            case 'webkitTransitionEnd':
            case 'msTransitionEnd':
            case 'oTransitionEnd':
            case 'otransitionend':
            case 'transitionend': this.transitionEnd(event); break;
            case 'resize': throttledSetup(); break;
          }

          if (options.stopPropagation) {
            event.stopPropagation();
          }
        },

        start: function(event) {
          var touches;

          if (isMouseEvent(event)) {
            touches = event;
            event.preventDefault(); // For desktop Safari drag
          } else {
            touches = event.touches[0];
          }

          // measure start values
          start = {

            // get initial touch coords
            x: touches.pageX,
            y: touches.pageY,

            // store time to determine touch duration
            time: +new Date()

          };

          // used for testing first move event
          isScrolling = undefined;

          // reset delta and end measurements
          delta = {};

          // attach touchmove and touchend listeners
          if (isMouseEvent(event)) {
            element.addEventListener('mousemove', this, false);
            element.addEventListener('mouseup', this, false);
            element.addEventListener('mouseleave', this, false);
          } else {
            element.addEventListener('touchmove', this, false);
            element.addEventListener('touchend', this, false);
          }

        },

        move: function(event) {
          var touches;

          if (isMouseEvent(event)) {
            touches = event;
          } else {
            // ensure swiping with one touch and not pinching
            if ( event.touches.length > 1 || event.scale && event.scale !== 1) {
              return;
            }

            if (options.disableScroll) {
              event.preventDefault();
            }

            touches = event.touches[0];
          }

          // measure change in x and y
          delta = {
            x: touches.pageX - start.x,
            y: touches.pageY - start.y
          };

          // determine if scrolling test has run - one time test
          if ( typeof isScrolling === 'undefined') {
            isScrolling = !!( isScrolling || Math.abs(delta.x) < Math.abs(delta.y) );
          }

          // if user is not trying to scroll vertically
          if (!isScrolling) {

            // prevent native scrolling
            event.preventDefault();

            // stop slideshow
            stop();

            // increase resistance if first or last slide
            if (options.continuous) { // we don't add resistance at the end

              translate(circle(index-1), delta.x + slidePos[circle(index-1)], 0);
              translate(index, delta.x + slidePos[index], 0);
              translate(circle(index+1), delta.x + slidePos[circle(index+1)], 0);

            } else {

              delta.x =
                delta.x /
                ( (!index && delta.x > 0 ||             // if first slide and sliding left
                   index === slides.length - 1 &&        // or if last slide and sliding right
                   delta.x < 0                           // and if sliding at all
                  ) ?
                 ( Math.abs(delta.x) / width + 1 )      // determine resistance level
                 : 1 );                                 // no resistance if false

              // translate 1:1
              translate(index-1, delta.x + slidePos[index-1], 0);
              translate(index, delta.x + slidePos[index], 0);
              translate(index+1, delta.x + slidePos[index+1], 0);
            }
          }
        },

        end: function(event) {

          // measure duration
          var duration = +new Date() - start.time;

          // determine if slide attempt triggers next/prev slide
          var isValidSlide =
              Number(duration) < 250 &&         // if slide duration is less than 250ms
              Math.abs(delta.x) > 20 ||         // and if slide amt is greater than 20px
              Math.abs(delta.x) > width/2;      // or if slide amt is greater than half the width

          // determine if slide attempt is past start and end
          var isPastBounds =
              !index && delta.x > 0 ||                      // if first slide and slide amt is greater than 0
              index === slides.length - 1 && delta.x < 0;   // or if last slide and slide amt is less than 0

          if (options.continuous) {
            isPastBounds = false;
          }

          // OLD determine direction of swipe (true:right, false:left)
          // determine direction of swipe (1: backward, -1: forward)
          var direction = Math.abs(delta.x) / delta.x;

          // if not scrolling vertically
          if (!isScrolling) {

            if (isValidSlide && !isPastBounds) {

              // if we're moving right
              if (direction < 0) {

                if (options.continuous) { // we need to get the next in this direction in place

                  move(circle(index-1), -width, 0);
                  move(circle(index+2), width, 0);

                } else {
                  move(index-1, -width, 0);
                }

                move(index, slidePos[index]-width, speed);
                move(circle(index+1), slidePos[circle(index+1)]-width, speed);
                index = circle(index+1);

              } else {
                if (options.continuous) { // we need to get the next in this direction in place

                  move(circle(index+1), width, 0);
                  move(circle(index-2), -width, 0);

                } else {
                  move(index+1, width, 0);
                }

                move(index, slidePos[index]+width, speed);
                move(circle(index-1), slidePos[circle(index-1)]+width, speed);
                index = circle(index-1);
              }

              runCallback(getPos(), slides[index], direction);

            } else {

              if (options.continuous) {

                move(circle(index-1), -width, speed);
                move(index, 0, speed);
                move(circle(index+1), width, speed);

              } else {

                move(index-1, -width, speed);
                move(index, 0, speed);
                move(index+1, width, speed);
              }
            }
          }

          // kill touchmove and touchend event listeners until touchstart called again
          if (isMouseEvent(event)) {
            element.removeEventListener('mousemove', events, false);
            element.removeEventListener('mouseup', events, false);
            element.removeEventListener('mouseleave', events, false);
          } else {
            element.removeEventListener('touchmove', events, false);
            element.removeEventListener('touchend', events, false);
          }

        },

        transitionEnd: function(event) {
          var currentIndex = parseInt(event.target.getAttribute('data-index'), 10);
          if (currentIndex === index) {
            if (delay || options.autoRestart) restart();

            runTransitionEnd(getPos(), slides[index]);
          }
        }
      };

      // trigger setup
      setup();

      // start auto slideshow if applicable
      begin();

      // Expose the Swipe API
      return {
        // initialize
        setup: setup,

        // go to slide
        slide: function(to, speed) {
          stop();
          slide(to, speed);
        },

        // move to previous
        prev: function() {
          stop();
          prev();
        },

        // move to next
        next: function() {
          stop();
          next();
        },

        // Restart slideshow
        restart: restart,

        // cancel slideshow
        stop: stop,

        // return current index position
        getPos: getPos,

        // disable slideshow
        disable: disable,

        // enable slideshow
        enable: enable,

        // return total number of slides
        getNumSlides: function() { return length; },

        // completely remove swipe
        kill: kill
      };

      // remove all event listeners
      function detachEvents() {
        if (browser.addEventListener) {
          // remove current event listeners
          element.removeEventListener('touchstart', events, false);
          element.removeEventListener('mousedown', events, false);
          element.removeEventListener('webkitTransitionEnd', events, false);
          element.removeEventListener('msTransitionEnd', events, false);
          element.removeEventListener('oTransitionEnd', events, false);
          element.removeEventListener('otransitionend', events, false);
          element.removeEventListener('transitionend', events, false);
          root.removeEventListener('resize', events, false);
        } else {
          root.onresize = null;
        }
      }

      // add event listeners
      function attachEvents() {
        if (browser.addEventListener) {

          // set touchstart event on element
          if (browser.touch) {
            element.addEventListener('touchstart', events, false);
          }

          if (options.draggable) {
            element.addEventListener('mousedown', events, false);
          }

          if (browser.transitions) {
            element.addEventListener('webkitTransitionEnd', events, false);
            element.addEventListener('msTransitionEnd', events, false);
            element.addEventListener('oTransitionEnd', events, false);
            element.addEventListener('otransitionend', events, false);
            element.addEventListener('transitionend', events, false);
          }

          // set resize event on window
          root.addEventListener('resize', events, false);

        } else {
          root.onresize = throttledSetup; // to play nice with old IE
        }
      }

      // clone nodes when there is only two slides
      function cloneNode(el) {
        var clone = el.cloneNode(true);
        element.appendChild(clone);

        // tag these slides as clones (to remove them on kill)
        clone.setAttribute('data-cloned', true);

        // Remove id from element
        clone.removeAttribute('id');
      }

      function setup(opts) {
        // Overwrite options if necessary
        if (opts != null) {
          for (var prop in opts) {
            options[prop] = opts[prop];
          }
        }

        // cache slides
        slides = element.children;
        length = slides.length;

        // slides length correction, minus cloned slides
        for (var i = 0; i < slides.length; i++) {
          if (slides[i].getAttribute('data-cloned')) length--;
        }

        // set continuous to false if only one slide
        if (slides.length < 2) {
          options.continuous = false;
        }

        // special case if two slides
        if (browser.transitions && options.continuous && slides.length < 3) {
          cloneNode(slides[0]);
          cloneNode(slides[1]);

          slides = element.children;
        }

        // create an array to store current positions of each slide
        slidePos = new Array(slides.length);

        // determine width of each slide
        width = container.getBoundingClientRect().width || container.offsetWidth;

        element.style.width = (slides.length * width * 2) + 'px';

        // stack elements
        var pos = slides.length;
        while(pos--) {
          var slide = slides[pos];

          slide.style.width = width + 'px';
          slide.setAttribute('data-index', pos);

          if (browser.transitions) {
            slide.style.left = (pos * -width) + 'px';
            move(pos, index > pos ? -width : (index < pos ? width : 0), 0);
          }
        }

        // reposition elements before and after index
        if (options.continuous && browser.transitions) {
          move(circle(index-1), -width, 0);
          move(circle(index+1), width, 0);
        }

        if (!browser.transitions) {
          element.style.left = (index * -width) + 'px';
        }

        container.style.visibility = 'visible';

        // reinitialize events
        detachEvents();
        attachEvents();
      }

      function prev() {
        if (disabled) return;

        if (options.continuous) {
          slide(index-1);
        } else if (index) {
          slide(index-1);
        }
      }

      function next() {
        if (disabled) return;

        if (options.continuous) {
          slide(index+1);
        } else if (index < slides.length - 1) {
          slide(index+1);
        }
      }

      function runCallback(pos, index, dir) {
        if (options.callback) {
          options.callback(pos, index, dir);
        }
      }

      function runTransitionEnd(pos, index) {
        if (options.transitionEnd) {
          options.transitionEnd(pos, index);
        }
      }

      function circle(index) {

        // a simple positive modulo using slides.length
        return (slides.length + (index % slides.length)) % slides.length;
      }

      function getPos() {
        // Fix for the clone issue in the event of 2 slides
        var currentIndex = index;

        if (currentIndex >= length) {
          currentIndex = currentIndex - length;
        }

        return currentIndex;
      }

      function slide(to, slideSpeed) {

        // ensure to is of type 'number'
        to = typeof to !== 'number' ? parseInt(to, 10) : to;

        // do nothing if already on requested slide
        if (index === to) return;

        if (browser.transitions) {

          var direction = Math.abs(index-to) / (index-to); // 1: backward, -1: forward

          // get the actual position of the slide
          if (options.continuous) {
            var natural_direction = direction;
            direction = -slidePos[circle(to)] / width;

            // if going forward but to < index, use to = slides.length + to
            // if going backward but to > index, use to = -slides.length + to
            if (direction !== natural_direction) {
              to = -direction * slides.length + to;
            }

          }

          var diff = Math.abs(index-to) - 1;

          // move all the slides between index and to in the right direction
          while (diff--) {
            move( circle((to > index ? to : index) - diff - 1), width * direction, 0);
          }

          to = circle(to);

          move(index, width * direction, slideSpeed || speed);
          move(to, 0, slideSpeed || speed);

          if (options.continuous) { // we need to get the next in place
            move(circle(to - direction), -(width * direction), 0);
          }

        } else {

          to = circle(to);
          animate(index * -width, to * -width, slideSpeed || speed);
          // no fallback for a circular continuous if the browser does not accept transitions
        }

        index = to;
        offloadFn(function() {
          runCallback(getPos(), slides[index], direction);
        });
      }

      function move(index, dist, speed) {
        translate(index, dist, speed);
        slidePos[index] = dist;
      }

      function translate(index, dist, speed) {

        var slide = slides[index];
        var style = slide && slide.style;

        if (!style) return;

        style.webkitTransitionDuration =
          style.MozTransitionDuration =
          style.msTransitionDuration =
          style.OTransitionDuration =
          style.transitionDuration = speed + 'ms';

        style.webkitTransform = 'translate(' + dist + 'px,0)' + 'translateZ(0)';
        style.msTransform =
          style.MozTransform =
          style.OTransform = 'translateX(' + dist + 'px)';

      }

      function animate(from, to, speed) {

        // if not an animation, just reposition
        if (!speed) {
          element.style.left = to + 'px';
          return;
        }

        var start = +new Date();

        var timer = setInterval(function() {
          var timeElap = +new Date() - start;

          if (timeElap > speed) {

            element.style.left = to + 'px';

            if (delay || options.autoRestart) restart();

            runTransitionEnd(getPos(), slides[index]);

            clearInterval(timer);

            return;
          }

          element.style.left = (( (to - from) * (Math.floor((timeElap / speed) * 100) / 100) ) + from) + 'px';
        }, 4);

      }

      function begin() {
        delay = options.auto || 0;
        if (delay) interval = setTimeout(next, delay);
      }

      function stop() {
        delay = 0;
        clearTimeout(interval);
      }

      function restart() {
        stop();
        begin();
      }

      function disable() {
        stop();
        disabled = true;
      }

      function enable() {
        disabled = false;
        restart();
      }

      function isMouseEvent(e) {
        return /^mouse/.test(e.type);
      }

      function kill() {
        // cancel slideshow
        stop();

        // remove inline styles
        container.style.visibility = '';

        // reset element
        element.style.width = '';
        element.style.left = '';

        // reset slides
        var pos = slides.length;
        while (pos--) {

          if (browser.transitions) {
            translate(pos, 0, 0);
          }

          var slide = slides[pos];

          // if the slide is tagged as clone, remove it
          if (slide.getAttribute('data-cloned')) {
            var _parent = slide.parentElement;
            _parent.removeChild(slide);
          }

          // remove styles
          slide.style.width = '';
          slide.style.left = '';

          slide.style.webkitTransitionDuration =
            slide.style.MozTransitionDuration =
            slide.style.msTransitionDuration =
            slide.style.OTransitionDuration =
            slide.style.transitionDuration = '';

          slide.style.webkitTransform =
            slide.style.msTransform =
            slide.style.MozTransform =
            slide.style.OTransform = '';

          // remove custom attributes (?)
          // slide.removeAttribute('data-index');
        }

        // remove all events
        detachEvents();

        // remove throttled function timeout
        throttledSetup.cancel();
      }
    }

    if ( root.jQuery || root.Zepto ) {
      (function($) {
        $.fn.Swipe = function(params) {
          return this.each(function() {
            $(this).data('Swipe', new Swipe($(this)[0], params));
          });
        };
      })( root.jQuery || root.Zepto );
    }

    return Swipe;
  }));
;
/*
== malihu jquery custom scrollbar plugin == 
Version: 3.1.5 
Plugin URI: http://manos.malihu.gr/jquery-custom-content-scroller 
Author: malihu
Author URI: http://manos.malihu.gr
License: MIT License (MIT)
*/

/*
Copyright Manos Malihutsakis (email: manos@malihu.gr)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

/*
The code below is fairly long, fully commented and should be normally used in development. 
For production, use either the minified jquery.mCustomScrollbar.min.js script or 
the production-ready jquery.mCustomScrollbar.concat.min.js which contains the plugin 
and dependencies (minified). 
*/

(function(factory){
	if(typeof define==="function" && define.amd){
		define(["jquery"],factory);
	}else if(typeof module!=="undefined" && module.exports){
		module.exports=factory;
	}else{
		factory(jQuery,window,document);
	}
}(function($){
(function(init){
	/*!
	* jQuery Mousewheel 3.1.13
	*
	* Copyright 2015 jQuery Foundation and other contributors
	* Released under the MIT license.
	* http://jquery.org/license
	*/
	!function(a){"function"==typeof define&&define.amd?define(["jquery"],a):"object"==typeof exports?module.exports=a:a(jQuery)}(function(a){function b(b){var g=b||window.event,h=i.call(arguments,1),j=0,l=0,m=0,n=0,o=0,p=0;if(b=a.event.fix(g),b.type="mousewheel","detail"in g&&(m=-1*g.detail),"wheelDelta"in g&&(m=g.wheelDelta),"wheelDeltaY"in g&&(m=g.wheelDeltaY),"wheelDeltaX"in g&&(l=-1*g.wheelDeltaX),"axis"in g&&g.axis===g.HORIZONTAL_AXIS&&(l=-1*m,m=0),j=0===m?l:m,"deltaY"in g&&(m=-1*g.deltaY,j=m),"deltaX"in g&&(l=g.deltaX,0===m&&(j=-1*l)),0!==m||0!==l){if(1===g.deltaMode){var q=a.data(this,"mousewheel-line-height");j*=q,m*=q,l*=q}else if(2===g.deltaMode){var r=a.data(this,"mousewheel-page-height");j*=r,m*=r,l*=r}if(n=Math.max(Math.abs(m),Math.abs(l)),(!f||f>n)&&(f=n,d(g,n)&&(f/=40)),d(g,n)&&(j/=40,l/=40,m/=40),j=Math[j>=1?"floor":"ceil"](j/f),l=Math[l>=1?"floor":"ceil"](l/f),m=Math[m>=1?"floor":"ceil"](m/f),k.settings.normalizeOffset&&this.getBoundingClientRect){var s=this.getBoundingClientRect();o=b.clientX-s.left,p=b.clientY-s.top}return b.deltaX=l,b.deltaY=m,b.deltaFactor=f,b.offsetX=o,b.offsetY=p,b.deltaMode=0,h.unshift(b,j,l,m),e&&clearTimeout(e),e=setTimeout(c,200),(a.event.dispatch||a.event.handle).apply(this,h)}}function c(){f=null}function d(a,b){return k.settings.adjustOldDeltas&&"mousewheel"===a.type&&b%120===0}var e,f,g=["wheel","mousewheel","DOMMouseScroll","MozMousePixelScroll"],h="onwheel"in document||document.documentMode>=9?["wheel"]:["mousewheel","DomMouseScroll","MozMousePixelScroll"],i=Array.prototype.slice;if(a.event.fixHooks)for(var j=g.length;j;)a.event.fixHooks[g[--j]]=a.event.mouseHooks;var k=a.event.special.mousewheel={version:"3.1.12",setup:function(){if(this.addEventListener)for(var c=h.length;c;)this.addEventListener(h[--c],b,!1);else this.onmousewheel=b;a.data(this,"mousewheel-line-height",k.getLineHeight(this)),a.data(this,"mousewheel-page-height",k.getPageHeight(this))},teardown:function(){if(this.removeEventListener)for(var c=h.length;c;)this.removeEventListener(h[--c],b,!1);else this.onmousewheel=null;a.removeData(this,"mousewheel-line-height"),a.removeData(this,"mousewheel-page-height")},getLineHeight:function(b){var c=a(b),d=c["offsetParent"in a.fn?"offsetParent":"parent"]();return d.length||(d=a("body")),parseInt(d.css("fontSize"),10)||parseInt(c.css("fontSize"),10)||16},getPageHeight:function(b){return a(b).height()},settings:{adjustOldDeltas:!0,normalizeOffset:!0}};a.fn.extend({mousewheel:function(a){return a?this.bind("mousewheel",a):this.trigger("mousewheel")},unmousewheel:function(a){return this.unbind("mousewheel",a)}})});

	init();
}(function(){
	
	/* 
	----------------------------------------
	PLUGIN NAMESPACE, PREFIX, DEFAULT SELECTOR(S) 
	----------------------------------------
	*/
	
	var pluginNS="mCustomScrollbar",
		pluginPfx="mCS",
		defaultSelector=".mCustomScrollbar",
	
	
		
	
	
	/* 
	----------------------------------------
	DEFAULT OPTIONS 
	----------------------------------------
	*/
	
		defaults={
			/*
			set element/content width/height programmatically 
			values: boolean, pixels, percentage 
				option						default
				-------------------------------------
				setWidth					false
				setHeight					false
			*/
			/*
			set the initial css top property of content  
			values: string (e.g. "-100px", "10%" etc.)
			*/
			setTop:0,
			/*
			set the initial css left property of content  
			values: string (e.g. "-100px", "10%" etc.)
			*/
			setLeft:0,
			/* 
			scrollbar axis (vertical and/or horizontal scrollbars) 
			values (string): "y", "x", "yx"
			*/
			axis:"y",
			/*
			position of scrollbar relative to content  
			values (string): "inside", "outside" ("outside" requires elements with position:relative)
			*/
			scrollbarPosition:"inside",
			/*
			scrolling inertia
			values: integer (milliseconds)
			*/
			scrollInertia:950,
			/* 
			auto-adjust scrollbar dragger length
			values: boolean
			*/
			autoDraggerLength:true,
			/*
			auto-hide scrollbar when idle 
			values: boolean
				option						default
				-------------------------------------
				autoHideScrollbar			false
			*/
			/*
			auto-expands scrollbar on mouse-over and dragging
			values: boolean
				option						default
				-------------------------------------
				autoExpandScrollbar			false
			*/
			/*
			always show scrollbar, even when there's nothing to scroll 
			values: integer (0=disable, 1=always show dragger rail and buttons, 2=always show dragger rail, dragger and buttons), boolean
			*/
			alwaysShowScrollbar:0,
			/*
			scrolling always snaps to a multiple of this number in pixels
			values: integer, array ([y,x])
				option						default
				-------------------------------------
				snapAmount					null
			*/
			/*
			when snapping, snap with this number in pixels as an offset 
			values: integer
			*/
			snapOffset:0,
			/* 
			mouse-wheel scrolling
			*/
			mouseWheel:{
				/* 
				enable mouse-wheel scrolling
				values: boolean
				*/
				enable:true,
				/* 
				scrolling amount in pixels
				values: "auto", integer 
				*/
				scrollAmount:"auto",
				/* 
				mouse-wheel scrolling axis 
				the default scrolling direction when both vertical and horizontal scrollbars are present 
				values (string): "y", "x" 
				*/
				axis:"y",
				/* 
				prevent the default behaviour which automatically scrolls the parent element(s) when end of scrolling is reached 
				values: boolean
					option						default
					-------------------------------------
					preventDefault				null
				*/
				/*
				the reported mouse-wheel delta value. The number of lines (translated to pixels) one wheel notch scrolls.  
				values: "auto", integer 
				"auto" uses the default OS/browser value 
				*/
				deltaFactor:"auto",
				/*
				normalize mouse-wheel delta to -1 or 1 (disables mouse-wheel acceleration) 
				values: boolean
					option						default
					-------------------------------------
					normalizeDelta				null
				*/
				/*
				invert mouse-wheel scrolling direction 
				values: boolean
					option						default
					-------------------------------------
					invert						null
				*/
				/*
				the tags that disable mouse-wheel when cursor is over them
				*/
				disableOver:["select","option","keygen","datalist","textarea"]
			},
			/* 
			scrollbar buttons
			*/
			scrollButtons:{ 
				/*
				enable scrollbar buttons
				values: boolean
					option						default
					-------------------------------------
					enable						null
				*/
				/*
				scrollbar buttons scrolling type 
				values (string): "stepless", "stepped"
				*/
				scrollType:"stepless",
				/*
				scrolling amount in pixels
				values: "auto", integer 
				*/
				scrollAmount:"auto"
				/*
				tabindex of the scrollbar buttons
				values: false, integer
					option						default
					-------------------------------------
					tabindex					null
				*/
			},
			/* 
			keyboard scrolling
			*/
			keyboard:{ 
				/*
				enable scrolling via keyboard
				values: boolean
				*/
				enable:true,
				/*
				keyboard scrolling type 
				values (string): "stepless", "stepped"
				*/
				scrollType:"stepless",
				/*
				scrolling amount in pixels
				values: "auto", integer 
				*/
				scrollAmount:"auto"
			},
			/*
			enable content touch-swipe scrolling 
			values: boolean, integer, string (number)
			integer values define the axis-specific minimum amount required for scrolling momentum
			*/
			contentTouchScroll:25,
			/*
			enable/disable document (default) touch-swipe scrolling 
			*/
			documentTouchScroll:true,
			/*
			advanced option parameters
			*/
			advanced:{
				/*
				auto-expand content horizontally (for "x" or "yx" axis) 
				values: boolean, integer (the value 2 forces the non scrollHeight/scrollWidth method, the value 3 forces the scrollHeight/scrollWidth method)
					option						default
					-------------------------------------
					autoExpandHorizontalScroll	null
				*/
				/*
				auto-scroll to elements with focus
				*/
				autoScrollOnFocus:"input,textarea,select,button,datalist,keygen,a[tabindex],area,object,[contenteditable='true']",
				/*
				auto-update scrollbars on content, element or viewport resize 
				should be true for fluid layouts/elements, adding/removing content dynamically, hiding/showing elements, content with images etc. 
				values: boolean
				*/
				updateOnContentResize:true,
				/*
				auto-update scrollbars each time each image inside the element is fully loaded 
				values: "auto", boolean
				*/
				updateOnImageLoad:"auto",
				/*
				auto-update scrollbars based on the amount and size changes of specific selectors 
				useful when you need to update the scrollbar(s) automatically, each time a type of element is added, removed or changes its size 
				values: boolean, string (e.g. "ul li" will auto-update scrollbars each time list-items inside the element are changed) 
				a value of true (boolean) will auto-update scrollbars each time any element is changed
					option						default
					-------------------------------------
					updateOnSelectorChange		null
				*/
				/*
				extra selectors that'll allow scrollbar dragging upon mousemove/up, pointermove/up, touchend etc. (e.g. "selector-1, selector-2")
					option						default
					-------------------------------------
					extraDraggableSelectors		null
				*/
				/*
				extra selectors that'll release scrollbar dragging upon mouseup, pointerup, touchend etc. (e.g. "selector-1, selector-2")
					option						default
					-------------------------------------
					releaseDraggableSelectors	null
				*/
				/*
				auto-update timeout 
				values: integer (milliseconds)
				*/
				autoUpdateTimeout:60
			},
			/* 
			scrollbar theme 
			values: string (see CSS/plugin URI for a list of ready-to-use themes)
			*/
			theme:"light",
			/*
			user defined callback functions
			*/
			callbacks:{
				/*
				Available callbacks: 
					callback					default
					-------------------------------------
					onCreate					null
					onInit						null
					onScrollStart				null
					onScroll					null
					onTotalScroll				null
					onTotalScrollBack			null
					whileScrolling				null
					onOverflowY					null
					onOverflowX					null
					onOverflowYNone				null
					onOverflowXNone				null
					onImageLoad					null
					onSelectorChange			null
					onBeforeUpdate				null
					onUpdate					null
				*/
				onTotalScrollOffset:0,
				onTotalScrollBackOffset:0,
				alwaysTriggerOffsets:true
			}
			/*
			add scrollbar(s) on all elements matching the current selector, now and in the future 
			values: boolean, string 
			string values: "on" (enable), "once" (disable after first invocation), "off" (disable)
			liveSelector values: string (selector)
				option						default
				-------------------------------------
				live						false
				liveSelector				null
			*/
		},
	
	
	
	
	
	/* 
	----------------------------------------
	VARS, CONSTANTS 
	----------------------------------------
	*/
	
		totalInstances=0, /* plugin instances amount */
		liveTimers={}, /* live option timers */
		oldIE=(window.attachEvent && !window.addEventListener) ? 1 : 0, /* detect IE < 9 */
		touchActive=false,touchable, /* global touch vars (for touch and pointer events) */
		/* general plugin classes */
		classes=[
			"mCSB_dragger_onDrag","mCSB_scrollTools_onDrag","mCS_img_loaded","mCS_disabled","mCS_destroyed","mCS_no_scrollbar",
			"mCS-autoHide","mCS-dir-rtl","mCS_no_scrollbar_y","mCS_no_scrollbar_x","mCS_y_hidden","mCS_x_hidden","mCSB_draggerContainer",
			"mCSB_buttonUp","mCSB_buttonDown","mCSB_buttonLeft","mCSB_buttonRight"
		],
		
	
	
	
	
	/* 
	----------------------------------------
	METHODS 
	----------------------------------------
	*/
	
		methods={
			
			/* 
			plugin initialization method 
			creates the scrollbar(s), plugin data object and options
			----------------------------------------
			*/
			
			init:function(options){
				
				var options=$.extend(true,{},defaults,options),
					selector=_selector.call(this); /* validate selector */
				
				/* 
				if live option is enabled, monitor for elements matching the current selector and 
				apply scrollbar(s) when found (now and in the future) 
				*/
				if(options.live){
					var liveSelector=options.liveSelector || this.selector || defaultSelector, /* live selector(s) */
						$liveSelector=$(liveSelector); /* live selector(s) as jquery object */
					if(options.live==="off"){
						/* 
						disable live if requested 
						usage: $(selector).mCustomScrollbar({live:"off"}); 
						*/
						removeLiveTimers(liveSelector);
						return;
					}
					liveTimers[liveSelector]=setTimeout(function(){
						/* call mCustomScrollbar fn on live selector(s) every half-second */
						$liveSelector.mCustomScrollbar(options);
						if(options.live==="once" && $liveSelector.length){
							/* disable live after first invocation */
							removeLiveTimers(liveSelector);
						}
					},500);
				}else{
					removeLiveTimers(liveSelector);
				}
				
				/* options backward compatibility (for versions < 3.0.0) and normalization */
				options.setWidth=(options.set_width) ? options.set_width : options.setWidth;
				options.setHeight=(options.set_height) ? options.set_height : options.setHeight;
				options.axis=(options.horizontalScroll) ? "x" : _findAxis(options.axis);
				options.scrollInertia=options.scrollInertia>0 && options.scrollInertia<17 ? 17 : options.scrollInertia;
				if(typeof options.mouseWheel!=="object" &&  options.mouseWheel==true){ /* old school mouseWheel option (non-object) */
					options.mouseWheel={enable:true,scrollAmount:"auto",axis:"y",preventDefault:false,deltaFactor:"auto",normalizeDelta:false,invert:false}
				}
				options.mouseWheel.scrollAmount=!options.mouseWheelPixels ? options.mouseWheel.scrollAmount : options.mouseWheelPixels;
				options.mouseWheel.normalizeDelta=!options.advanced.normalizeMouseWheelDelta ? options.mouseWheel.normalizeDelta : options.advanced.normalizeMouseWheelDelta;
				options.scrollButtons.scrollType=_findScrollButtonsType(options.scrollButtons.scrollType); 
				
				_theme(options); /* theme-specific options */
				
				/* plugin constructor */
				return $(selector).each(function(){
					
					var $this=$(this);
					
					if(!$this.data(pluginPfx)){ /* prevent multiple instantiations */
					
						/* store options and create objects in jquery data */
						$this.data(pluginPfx,{
							idx:++totalInstances, /* instance index */
							opt:options, /* options */
							scrollRatio:{y:null,x:null}, /* scrollbar to content ratio */
							overflowed:null, /* overflowed axis */
							contentReset:{y:null,x:null}, /* object to check when content resets */
							bindEvents:false, /* object to check if events are bound */
							tweenRunning:false, /* object to check if tween is running */
							sequential:{}, /* sequential scrolling object */
							langDir:$this.css("direction"), /* detect/store direction (ltr or rtl) */
							cbOffsets:null, /* object to check whether callback offsets always trigger */
							/* 
							object to check how scrolling events where last triggered 
							"internal" (default - triggered by this script), "external" (triggered by other scripts, e.g. via scrollTo method) 
							usage: object.data("mCS").trigger
							*/
							trigger:null,
							/* 
							object to check for changes in elements in order to call the update method automatically 
							*/
							poll:{size:{o:0,n:0},img:{o:0,n:0},change:{o:0,n:0}}
						});
						
						var d=$this.data(pluginPfx),o=d.opt,
							/* HTML data attributes */
							htmlDataAxis=$this.data("mcs-axis"),htmlDataSbPos=$this.data("mcs-scrollbar-position"),htmlDataTheme=$this.data("mcs-theme");
						 
						if(htmlDataAxis){o.axis=htmlDataAxis;} /* usage example: data-mcs-axis="y" */
						if(htmlDataSbPos){o.scrollbarPosition=htmlDataSbPos;} /* usage example: data-mcs-scrollbar-position="outside" */
						if(htmlDataTheme){ /* usage example: data-mcs-theme="minimal" */
							o.theme=htmlDataTheme;
							_theme(o); /* theme-specific options */
						}
						
						_pluginMarkup.call(this); /* add plugin markup */
						
						if(d && o.callbacks.onCreate && typeof o.callbacks.onCreate==="function"){o.callbacks.onCreate.call(this);} /* callbacks: onCreate */
						
						$("#mCSB_"+d.idx+"_container img:not(."+classes[2]+")").addClass(classes[2]); /* flag loaded images */
						
						methods.update.call(null,$this); /* call the update method */
					
					}
					
				});
				
			},
			/* ---------------------------------------- */
			
			
			
			/* 
			plugin update method 
			updates content and scrollbar(s) values, events and status 
			----------------------------------------
			usage: $(selector).mCustomScrollbar("update");
			*/
			
			update:function(el,cb){
				
				var selector=el || _selector.call(this); /* validate selector */
				
				return $(selector).each(function(){
					
					var $this=$(this);
					
					if($this.data(pluginPfx)){ /* check if plugin has initialized */
						
						var d=$this.data(pluginPfx),o=d.opt,
							mCSB_container=$("#mCSB_"+d.idx+"_container"),
							mCustomScrollBox=$("#mCSB_"+d.idx),
							mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")];
						
						if(!mCSB_container.length){return;}
						
						if(d.tweenRunning){_stop($this);} /* stop any running tweens while updating */
						
						if(cb && d && o.callbacks.onBeforeUpdate && typeof o.callbacks.onBeforeUpdate==="function"){o.callbacks.onBeforeUpdate.call(this);} /* callbacks: onBeforeUpdate */
						
						/* if element was disabled or destroyed, remove class(es) */
						if($this.hasClass(classes[3])){$this.removeClass(classes[3]);}
						if($this.hasClass(classes[4])){$this.removeClass(classes[4]);}
						
						/* css flexbox fix, detect/set max-height */
						mCustomScrollBox.css("max-height","none");
						if(mCustomScrollBox.height()!==$this.height()){mCustomScrollBox.css("max-height",$this.height());}
						
						_expandContentHorizontally.call(this); /* expand content horizontally */
						
						if(o.axis!=="y" && !o.advanced.autoExpandHorizontalScroll){
							mCSB_container.css("width",_contentWidth(mCSB_container));
						}
						
						d.overflowed=_overflowed.call(this); /* determine if scrolling is required */
						
						_scrollbarVisibility.call(this); /* show/hide scrollbar(s) */
						
						/* auto-adjust scrollbar dragger length analogous to content */
						if(o.autoDraggerLength){_setDraggerLength.call(this);}
						
						_scrollRatio.call(this); /* calculate and store scrollbar to content ratio */
						
						_bindEvents.call(this); /* bind scrollbar events */
						
						/* reset scrolling position and/or events */
						var to=[Math.abs(mCSB_container[0].offsetTop),Math.abs(mCSB_container[0].offsetLeft)];
						if(o.axis!=="x"){ /* y/yx axis */
							if(!d.overflowed[0]){ /* y scrolling is not required */
								_resetContentPosition.call(this); /* reset content position */
								if(o.axis==="y"){
									_unbindEvents.call(this);
								}else if(o.axis==="yx" && d.overflowed[1]){
									_scrollTo($this,to[1].toString(),{dir:"x",dur:0,overwrite:"none"});
								}
							}else if(mCSB_dragger[0].height()>mCSB_dragger[0].parent().height()){
								_resetContentPosition.call(this); /* reset content position */
							}else{ /* y scrolling is required */
								_scrollTo($this,to[0].toString(),{dir:"y",dur:0,overwrite:"none"});
								d.contentReset.y=null;
							}
						}
						if(o.axis!=="y"){ /* x/yx axis */
							if(!d.overflowed[1]){ /* x scrolling is not required */
								_resetContentPosition.call(this); /* reset content position */
								if(o.axis==="x"){
									_unbindEvents.call(this);
								}else if(o.axis==="yx" && d.overflowed[0]){
									_scrollTo($this,to[0].toString(),{dir:"y",dur:0,overwrite:"none"});
								}
							}else if(mCSB_dragger[1].width()>mCSB_dragger[1].parent().width()){
								_resetContentPosition.call(this); /* reset content position */
							}else{ /* x scrolling is required */
								_scrollTo($this,to[1].toString(),{dir:"x",dur:0,overwrite:"none"});
								d.contentReset.x=null;
							}
						}
						
						/* callbacks: onImageLoad, onSelectorChange, onUpdate */
						if(cb && d){
							if(cb===2 && o.callbacks.onImageLoad && typeof o.callbacks.onImageLoad==="function"){
								o.callbacks.onImageLoad.call(this);
							}else if(cb===3 && o.callbacks.onSelectorChange && typeof o.callbacks.onSelectorChange==="function"){
								o.callbacks.onSelectorChange.call(this);
							}else if(o.callbacks.onUpdate && typeof o.callbacks.onUpdate==="function"){
								o.callbacks.onUpdate.call(this);
							}
						}
						
						_autoUpdate.call(this); /* initialize automatic updating (for dynamic content, fluid layouts etc.) */
						
					}
					
				});
				
			},
			/* ---------------------------------------- */
			
			
			
			/* 
			plugin scrollTo method 
			triggers a scrolling event to a specific value
			----------------------------------------
			usage: $(selector).mCustomScrollbar("scrollTo",value,options);
			*/
		
			scrollTo:function(val,options){
				
				/* prevent silly things like $(selector).mCustomScrollbar("scrollTo",undefined); */
				if(typeof val=="undefined" || val==null){return;}
				
				var selector=_selector.call(this); /* validate selector */
				
				return $(selector).each(function(){
					
					var $this=$(this);
					
					if($this.data(pluginPfx)){ /* check if plugin has initialized */
					
						var d=$this.data(pluginPfx),o=d.opt,
							/* method default options */
							methodDefaults={
								trigger:"external", /* method is by default triggered externally (e.g. from other scripts) */
								scrollInertia:o.scrollInertia, /* scrolling inertia (animation duration) */
								scrollEasing:"mcsEaseInOut", /* animation easing */
								moveDragger:false, /* move dragger instead of content */
								timeout:60, /* scroll-to delay */
								callbacks:true, /* enable/disable callbacks */
								onStart:true,
								onUpdate:true,
								onComplete:true
							},
							methodOptions=$.extend(true,{},methodDefaults,options),
							to=_arr.call(this,val),dur=methodOptions.scrollInertia>0 && methodOptions.scrollInertia<17 ? 17 : methodOptions.scrollInertia;
						
						/* translate yx values to actual scroll-to positions */
						to[0]=_to.call(this,to[0],"y");
						to[1]=_to.call(this,to[1],"x");
						
						/* 
						check if scroll-to value moves the dragger instead of content. 
						Only pixel values apply on dragger (e.g. 100, "100px", "-=100" etc.) 
						*/
						if(methodOptions.moveDragger){
							to[0]*=d.scrollRatio.y;
							to[1]*=d.scrollRatio.x;
						}
						
						methodOptions.dur=_isTabHidden() ? 0 : dur; //skip animations if browser tab is hidden
						
						setTimeout(function(){ 
							/* do the scrolling */
							if(to[0]!==null && typeof to[0]!=="undefined" && o.axis!=="x" && d.overflowed[0]){ /* scroll y */
								methodOptions.dir="y";
								methodOptions.overwrite="all";
								_scrollTo($this,to[0].toString(),methodOptions);
							}
							if(to[1]!==null && typeof to[1]!=="undefined" && o.axis!=="y" && d.overflowed[1]){ /* scroll x */
								methodOptions.dir="x";
								methodOptions.overwrite="none";
								_scrollTo($this,to[1].toString(),methodOptions);
							}
						},methodOptions.timeout);
						
					}
					
				});
				
			},
			/* ---------------------------------------- */
			
			
			
			/*
			plugin stop method 
			stops scrolling animation
			----------------------------------------
			usage: $(selector).mCustomScrollbar("stop");
			*/
			stop:function(){
				
				var selector=_selector.call(this); /* validate selector */
				
				return $(selector).each(function(){
					
					var $this=$(this);
					
					if($this.data(pluginPfx)){ /* check if plugin has initialized */
										
						_stop($this);
					
					}
					
				});
				
			},
			/* ---------------------------------------- */
			
			
			
			/*
			plugin disable method 
			temporarily disables the scrollbar(s) 
			----------------------------------------
			usage: $(selector).mCustomScrollbar("disable",reset); 
			reset (boolean): resets content position to 0 
			*/
			disable:function(r){
				
				var selector=_selector.call(this); /* validate selector */
				
				return $(selector).each(function(){
					
					var $this=$(this);
					
					if($this.data(pluginPfx)){ /* check if plugin has initialized */
						
						var d=$this.data(pluginPfx);
						
						_autoUpdate.call(this,"remove"); /* remove automatic updating */
						
						_unbindEvents.call(this); /* unbind events */
						
						if(r){_resetContentPosition.call(this);} /* reset content position */
						
						_scrollbarVisibility.call(this,true); /* show/hide scrollbar(s) */
						
						$this.addClass(classes[3]); /* add disable class */
					
					}
					
				});
				
			},
			/* ---------------------------------------- */
			
			
			
			/*
			plugin destroy method 
			completely removes the scrollbar(s) and returns the element to its original state
			----------------------------------------
			usage: $(selector).mCustomScrollbar("destroy"); 
			*/
			destroy:function(){
				
				var selector=_selector.call(this); /* validate selector */
				
				return $(selector).each(function(){
					
					var $this=$(this);
					
					if($this.data(pluginPfx)){ /* check if plugin has initialized */
					
						var d=$this.data(pluginPfx),o=d.opt,
							mCustomScrollBox=$("#mCSB_"+d.idx),
							mCSB_container=$("#mCSB_"+d.idx+"_container"),
							scrollbar=$(".mCSB_"+d.idx+"_scrollbar");
					
						if(o.live){removeLiveTimers(o.liveSelector || $(selector).selector);} /* remove live timers */
						
						_autoUpdate.call(this,"remove"); /* remove automatic updating */
						
						_unbindEvents.call(this); /* unbind events */
						
						_resetContentPosition.call(this); /* reset content position */
						
						$this.removeData(pluginPfx); /* remove plugin data object */
						
						_delete(this,"mcs"); /* delete callbacks object */
						
						/* remove plugin markup */
						scrollbar.remove(); /* remove scrollbar(s) first (those can be either inside or outside plugin's inner wrapper) */
						mCSB_container.find("img."+classes[2]).removeClass(classes[2]); /* remove loaded images flag */
						mCustomScrollBox.replaceWith(mCSB_container.contents()); /* replace plugin's inner wrapper with the original content */
						/* remove plugin classes from the element and add destroy class */
						$this.removeClass(pluginNS+" _"+pluginPfx+"_"+d.idx+" "+classes[6]+" "+classes[7]+" "+classes[5]+" "+classes[3]).addClass(classes[4]);
					
					}
					
				});
				
			}
			/* ---------------------------------------- */
			
		},
	
	
	
	
		
	/* 
	----------------------------------------
	FUNCTIONS
	----------------------------------------
	*/
	
		/* validates selector (if selector is invalid or undefined uses the default one) */
		_selector=function(){
			return (typeof $(this)!=="object" || $(this).length<1) ? defaultSelector : this;
		},
		/* -------------------- */
		
		
		/* changes options according to theme */
		_theme=function(obj){
			var fixedSizeScrollbarThemes=["rounded","rounded-dark","rounded-dots","rounded-dots-dark"],
				nonExpandedScrollbarThemes=["rounded-dots","rounded-dots-dark","3d","3d-dark","3d-thick","3d-thick-dark","inset","inset-dark","inset-2","inset-2-dark","inset-3","inset-3-dark"],
				disabledScrollButtonsThemes=["minimal","minimal-dark"],
				enabledAutoHideScrollbarThemes=["minimal","minimal-dark"],
				scrollbarPositionOutsideThemes=["minimal","minimal-dark"];
			obj.autoDraggerLength=$.inArray(obj.theme,fixedSizeScrollbarThemes) > -1 ? false : obj.autoDraggerLength;
			obj.autoExpandScrollbar=$.inArray(obj.theme,nonExpandedScrollbarThemes) > -1 ? false : obj.autoExpandScrollbar;
			obj.scrollButtons.enable=$.inArray(obj.theme,disabledScrollButtonsThemes) > -1 ? false : obj.scrollButtons.enable;
			obj.autoHideScrollbar=$.inArray(obj.theme,enabledAutoHideScrollbarThemes) > -1 ? true : obj.autoHideScrollbar;
			obj.scrollbarPosition=$.inArray(obj.theme,scrollbarPositionOutsideThemes) > -1 ? "outside" : obj.scrollbarPosition;
		},
		/* -------------------- */
		
		
		/* live option timers removal */
		removeLiveTimers=function(selector){
			if(liveTimers[selector]){
				clearTimeout(liveTimers[selector]);
				_delete(liveTimers,selector);
			}
		},
		/* -------------------- */
		
		
		/* normalizes axis option to valid values: "y", "x", "yx" */
		_findAxis=function(val){
			return (val==="yx" || val==="xy" || val==="auto") ? "yx" : (val==="x" || val==="horizontal") ? "x" : "y";
		},
		/* -------------------- */
		
		
		/* normalizes scrollButtons.scrollType option to valid values: "stepless", "stepped" */
		_findScrollButtonsType=function(val){
			return (val==="stepped" || val==="pixels" || val==="step" || val==="click") ? "stepped" : "stepless";
		},
		/* -------------------- */
		
		
		/* generates plugin markup */
		_pluginMarkup=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				expandClass=o.autoExpandScrollbar ? " "+classes[1]+"_expand" : "",
				scrollbar=["<div id='mCSB_"+d.idx+"_scrollbar_vertical' class='mCSB_scrollTools mCSB_"+d.idx+"_scrollbar mCS-"+o.theme+" mCSB_scrollTools_vertical"+expandClass+"'><div class='"+classes[12]+"'><div id='mCSB_"+d.idx+"_dragger_vertical' class='mCSB_dragger' style='position:absolute;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>","<div id='mCSB_"+d.idx+"_scrollbar_horizontal' class='mCSB_scrollTools mCSB_"+d.idx+"_scrollbar mCS-"+o.theme+" mCSB_scrollTools_horizontal"+expandClass+"'><div class='"+classes[12]+"'><div id='mCSB_"+d.idx+"_dragger_horizontal' class='mCSB_dragger' style='position:absolute;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>"],
				wrapperClass=o.axis==="yx" ? "mCSB_vertical_horizontal" : o.axis==="x" ? "mCSB_horizontal" : "mCSB_vertical",
				scrollbars=o.axis==="yx" ? scrollbar[0]+scrollbar[1] : o.axis==="x" ? scrollbar[1] : scrollbar[0],
				contentWrapper=o.axis==="yx" ? "<div id='mCSB_"+d.idx+"_container_wrapper' class='mCSB_container_wrapper' />" : "",
				autoHideClass=o.autoHideScrollbar ? " "+classes[6] : "",
				scrollbarDirClass=(o.axis!=="x" && d.langDir==="rtl") ? " "+classes[7] : "";
			if(o.setWidth){$this.css("width",o.setWidth);} /* set element width */
			if(o.setHeight){$this.css("height",o.setHeight);} /* set element height */
			o.setLeft=(o.axis!=="y" && d.langDir==="rtl") ? "989999px" : o.setLeft; /* adjust left position for rtl direction */
			$this.addClass(pluginNS+" _"+pluginPfx+"_"+d.idx+autoHideClass+scrollbarDirClass).wrapInner("<div id='mCSB_"+d.idx+"' class='mCustomScrollBox mCS-"+o.theme+" "+wrapperClass+"'><div id='mCSB_"+d.idx+"_container' class='mCSB_container' style='position:relative; top:"+o.setTop+"; left:"+o.setLeft+";' dir='"+d.langDir+"' /></div>");
			var mCustomScrollBox=$("#mCSB_"+d.idx),
				mCSB_container=$("#mCSB_"+d.idx+"_container");
			if(o.axis!=="y" && !o.advanced.autoExpandHorizontalScroll){
				mCSB_container.css("width",_contentWidth(mCSB_container));
			}
			if(o.scrollbarPosition==="outside"){
				if($this.css("position")==="static"){ /* requires elements with non-static position */
					$this.css("position","relative");
				}
				$this.css("overflow","visible");
				mCustomScrollBox.addClass("mCSB_outside").after(scrollbars);
			}else{
				mCustomScrollBox.addClass("mCSB_inside").append(scrollbars);
				mCSB_container.wrap(contentWrapper);
			}
			_scrollButtons.call(this); /* add scrollbar buttons */
			/* minimum dragger length */
			var mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")];
			mCSB_dragger[0].css("min-height",mCSB_dragger[0].height());
			mCSB_dragger[1].css("min-width",mCSB_dragger[1].width());
		},
		/* -------------------- */
		
		
		/* calculates content width */
		_contentWidth=function(el){
			var val=[el[0].scrollWidth,Math.max.apply(Math,el.children().map(function(){return $(this).outerWidth(true);}).get())],w=el.parent().width();
			return val[0]>w ? val[0] : val[1]>w ? val[1] : "100%";
		},
		/* -------------------- */
		
		
		/* expands content horizontally */
		_expandContentHorizontally=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				mCSB_container=$("#mCSB_"+d.idx+"_container");
			if(o.advanced.autoExpandHorizontalScroll && o.axis!=="y"){
				/* calculate scrollWidth */
				mCSB_container.css({"width":"auto","min-width":0,"overflow-x":"scroll"});
				var w=Math.ceil(mCSB_container[0].scrollWidth);
				if(o.advanced.autoExpandHorizontalScroll===3 || (o.advanced.autoExpandHorizontalScroll!==2 && w>mCSB_container.parent().width())){
					mCSB_container.css({"width":w,"min-width":"100%","overflow-x":"inherit"});
				}else{
					/* 
					wrap content with an infinite width div and set its position to absolute and width to auto. 
					Setting width to auto before calculating the actual width is important! 
					We must let the browser set the width as browser zoom values are impossible to calculate.
					*/
					mCSB_container.css({"overflow-x":"inherit","position":"absolute"})
						.wrap("<div class='mCSB_h_wrapper' style='position:relative; left:0; width:999999px;' />")
						.css({ /* set actual width, original position and un-wrap */
							/* 
							get the exact width (with decimals) and then round-up. 
							Using jquery outerWidth() will round the width value which will mess up with inner elements that have non-integer width
							*/
							"width":(Math.ceil(mCSB_container[0].getBoundingClientRect().right+0.4)-Math.floor(mCSB_container[0].getBoundingClientRect().left)),
							"min-width":"100%",
							"position":"relative"
						}).unwrap();
				}
			}
		},
		/* -------------------- */
		
		
		/* adds scrollbar buttons */
		_scrollButtons=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				mCSB_scrollTools=$(".mCSB_"+d.idx+"_scrollbar:first"),
				tabindex=!_isNumeric(o.scrollButtons.tabindex) ? "" : "tabindex='"+o.scrollButtons.tabindex+"'",
				btnHTML=[
					"<a href='#' class='"+classes[13]+"' "+tabindex+" />",
					"<a href='#' class='"+classes[14]+"' "+tabindex+" />",
					"<a href='#' class='"+classes[15]+"' "+tabindex+" />",
					"<a href='#' class='"+classes[16]+"' "+tabindex+" />"
				],
				btn=[(o.axis==="x" ? btnHTML[2] : btnHTML[0]),(o.axis==="x" ? btnHTML[3] : btnHTML[1]),btnHTML[2],btnHTML[3]];
			if(o.scrollButtons.enable){
				mCSB_scrollTools.prepend(btn[0]).append(btn[1]).next(".mCSB_scrollTools").prepend(btn[2]).append(btn[3]);
			}
		},
		/* -------------------- */
		
		
		/* auto-adjusts scrollbar dragger length */
		_setDraggerLength=function(){
			var $this=$(this),d=$this.data(pluginPfx),
				mCustomScrollBox=$("#mCSB_"+d.idx),
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")],
				ratio=[mCustomScrollBox.height()/mCSB_container.outerHeight(false),mCustomScrollBox.width()/mCSB_container.outerWidth(false)],
				l=[
					parseInt(mCSB_dragger[0].css("min-height")),Math.round(ratio[0]*mCSB_dragger[0].parent().height()),
					parseInt(mCSB_dragger[1].css("min-width")),Math.round(ratio[1]*mCSB_dragger[1].parent().width())
				],
				h=oldIE && (l[1]<l[0]) ? l[0] : l[1],w=oldIE && (l[3]<l[2]) ? l[2] : l[3];
			mCSB_dragger[0].css({
				"height":h,"max-height":(mCSB_dragger[0].parent().height()-10)
			}).find(".mCSB_dragger_bar").css({"line-height":l[0]+"px"});
			mCSB_dragger[1].css({
				"width":w,"max-width":(mCSB_dragger[1].parent().width()-10)
			});
		},
		/* -------------------- */
		
		
		/* calculates scrollbar to content ratio */
		_scrollRatio=function(){
			var $this=$(this),d=$this.data(pluginPfx),
				mCustomScrollBox=$("#mCSB_"+d.idx),
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")],
				scrollAmount=[mCSB_container.outerHeight(false)-mCustomScrollBox.height(),mCSB_container.outerWidth(false)-mCustomScrollBox.width()],
				ratio=[
					scrollAmount[0]/(mCSB_dragger[0].parent().height()-mCSB_dragger[0].height()),
					scrollAmount[1]/(mCSB_dragger[1].parent().width()-mCSB_dragger[1].width())
				];
			d.scrollRatio={y:ratio[0],x:ratio[1]};
		},
		/* -------------------- */
		
		
		/* toggles scrolling classes */
		_onDragClasses=function(el,action,xpnd){
			var expandClass=xpnd ? classes[0]+"_expanded" : "",
				scrollbar=el.closest(".mCSB_scrollTools");
			if(action==="active"){
				el.toggleClass(classes[0]+" "+expandClass); scrollbar.toggleClass(classes[1]); 
				el[0]._draggable=el[0]._draggable ? 0 : 1;
			}else{
				if(!el[0]._draggable){
					if(action==="hide"){
						el.removeClass(classes[0]); scrollbar.removeClass(classes[1]);
					}else{
						el.addClass(classes[0]); scrollbar.addClass(classes[1]);
					}
				}
			}
		},
		/* -------------------- */
		
		
		/* checks if content overflows its container to determine if scrolling is required */
		_overflowed=function(){
			var $this=$(this),d=$this.data(pluginPfx),
				mCustomScrollBox=$("#mCSB_"+d.idx),
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				contentHeight=d.overflowed==null ? mCSB_container.height() : mCSB_container.outerHeight(false),
				contentWidth=d.overflowed==null ? mCSB_container.width() : mCSB_container.outerWidth(false),
				h=mCSB_container[0].scrollHeight,w=mCSB_container[0].scrollWidth;
			if(h>contentHeight){contentHeight=h;}
			if(w>contentWidth){contentWidth=w;}
			return [contentHeight>mCustomScrollBox.height(),contentWidth>mCustomScrollBox.width()];
		},
		/* -------------------- */
		
		
		/* resets content position to 0 */
		_resetContentPosition=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				mCustomScrollBox=$("#mCSB_"+d.idx),
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")];
			_stop($this); /* stop any current scrolling before resetting */
			if((o.axis!=="x" && !d.overflowed[0]) || (o.axis==="y" && d.overflowed[0])){ /* reset y */
				mCSB_dragger[0].add(mCSB_container).css("top",0);
				_scrollTo($this,"_resetY");
			}
			if((o.axis!=="y" && !d.overflowed[1]) || (o.axis==="x" && d.overflowed[1])){ /* reset x */
				var cx=dx=0;
				if(d.langDir==="rtl"){ /* adjust left position for rtl direction */
					cx=mCustomScrollBox.width()-mCSB_container.outerWidth(false);
					dx=Math.abs(cx/d.scrollRatio.x);
				}
				mCSB_container.css("left",cx);
				mCSB_dragger[1].css("left",dx);
				_scrollTo($this,"_resetX");
			}
		},
		/* -------------------- */
		
		
		/* binds scrollbar events */
		_bindEvents=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt;
			if(!d.bindEvents){ /* check if events are already bound */
				_draggable.call(this);
				if(o.contentTouchScroll){_contentDraggable.call(this);}
				_selectable.call(this);
				if(o.mouseWheel.enable){ /* bind mousewheel fn when plugin is available */
					function _mwt(){
						mousewheelTimeout=setTimeout(function(){
							if(!$.event.special.mousewheel){
								_mwt();
							}else{
								clearTimeout(mousewheelTimeout);
								_mousewheel.call($this[0]);
							}
						},100);
					}
					var mousewheelTimeout;
					_mwt();
				}
				_draggerRail.call(this);
				_wrapperScroll.call(this);
				if(o.advanced.autoScrollOnFocus){_focus.call(this);}
				if(o.scrollButtons.enable){_buttons.call(this);}
				if(o.keyboard.enable){_keyboard.call(this);}
				d.bindEvents=true;
			}
		},
		/* -------------------- */
		
		
		/* unbinds scrollbar events */
		_unbindEvents=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				namespace=pluginPfx+"_"+d.idx,
				sb=".mCSB_"+d.idx+"_scrollbar",
				sel=$("#mCSB_"+d.idx+",#mCSB_"+d.idx+"_container,#mCSB_"+d.idx+"_container_wrapper,"+sb+" ."+classes[12]+",#mCSB_"+d.idx+"_dragger_vertical,#mCSB_"+d.idx+"_dragger_horizontal,"+sb+">a"),
				mCSB_container=$("#mCSB_"+d.idx+"_container");
			if(o.advanced.releaseDraggableSelectors){sel.add($(o.advanced.releaseDraggableSelectors));}
			if(o.advanced.extraDraggableSelectors){sel.add($(o.advanced.extraDraggableSelectors));}
			if(d.bindEvents){ /* check if events are bound */
				/* unbind namespaced events from document/selectors */
				$(document).add($(!_canAccessIFrame() || top.document)).unbind("."+namespace);
				sel.each(function(){
					$(this).unbind("."+namespace);
				});
				/* clear and delete timeouts/objects */
				clearTimeout($this[0]._focusTimeout); _delete($this[0],"_focusTimeout");
				clearTimeout(d.sequential.step); _delete(d.sequential,"step");
				clearTimeout(mCSB_container[0].onCompleteTimeout); _delete(mCSB_container[0],"onCompleteTimeout");
				d.bindEvents=false;
			}
		},
		/* -------------------- */
		
		
		/* toggles scrollbar visibility */
		_scrollbarVisibility=function(disabled){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				contentWrapper=$("#mCSB_"+d.idx+"_container_wrapper"),
				content=contentWrapper.length ? contentWrapper : $("#mCSB_"+d.idx+"_container"),
				scrollbar=[$("#mCSB_"+d.idx+"_scrollbar_vertical"),$("#mCSB_"+d.idx+"_scrollbar_horizontal")],
				mCSB_dragger=[scrollbar[0].find(".mCSB_dragger"),scrollbar[1].find(".mCSB_dragger")];
			if(o.axis!=="x"){
				if(d.overflowed[0] && !disabled){
					scrollbar[0].add(mCSB_dragger[0]).add(scrollbar[0].children("a")).css("display","block");
					content.removeClass(classes[8]+" "+classes[10]);
				}else{
					if(o.alwaysShowScrollbar){
						if(o.alwaysShowScrollbar!==2){mCSB_dragger[0].css("display","none");}
						content.removeClass(classes[10]);
					}else{
						scrollbar[0].css("display","none");
						content.addClass(classes[10]);
					}
					content.addClass(classes[8]);
				}
			}
			if(o.axis!=="y"){
				if(d.overflowed[1] && !disabled){
					scrollbar[1].add(mCSB_dragger[1]).add(scrollbar[1].children("a")).css("display","block");
					content.removeClass(classes[9]+" "+classes[11]);
				}else{
					if(o.alwaysShowScrollbar){
						if(o.alwaysShowScrollbar!==2){mCSB_dragger[1].css("display","none");}
						content.removeClass(classes[11]);
					}else{
						scrollbar[1].css("display","none");
						content.addClass(classes[11]);
					}
					content.addClass(classes[9]);
				}
			}
			if(!d.overflowed[0] && !d.overflowed[1]){
				$this.addClass(classes[5]);
			}else{
				$this.removeClass(classes[5]);
			}
		},
		/* -------------------- */
		
		
		/* returns input coordinates of pointer, touch and mouse events (relative to document) */
		_coordinates=function(e){
			var t=e.type,o=e.target.ownerDocument!==document && frameElement!==null ? [$(frameElement).offset().top,$(frameElement).offset().left] : null,
				io=_canAccessIFrame() && e.target.ownerDocument!==top.document && frameElement!==null ? [$(e.view.frameElement).offset().top,$(e.view.frameElement).offset().left] : [0,0];
			switch(t){
				case "pointerdown": case "MSPointerDown": case "pointermove": case "MSPointerMove": case "pointerup": case "MSPointerUp":
					return o ? [e.originalEvent.pageY-o[0]+io[0],e.originalEvent.pageX-o[1]+io[1],false] : [e.originalEvent.pageY,e.originalEvent.pageX,false];
					break;
				case "touchstart": case "touchmove": case "touchend":
					var touch=e.originalEvent.touches[0] || e.originalEvent.changedTouches[0],
						touches=e.originalEvent.touches.length || e.originalEvent.changedTouches.length;
					return e.target.ownerDocument!==document ? [touch.screenY,touch.screenX,touches>1] : [touch.pageY,touch.pageX,touches>1];
					break;
				default:
					return o ? [e.pageY-o[0]+io[0],e.pageX-o[1]+io[1],false] : [e.pageY,e.pageX,false];
			}
		},
		/* -------------------- */
		
		
		/* 
		SCROLLBAR DRAG EVENTS
		scrolls content via scrollbar dragging 
		*/
		_draggable=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				namespace=pluginPfx+"_"+d.idx,
				draggerId=["mCSB_"+d.idx+"_dragger_vertical","mCSB_"+d.idx+"_dragger_horizontal"],
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				mCSB_dragger=$("#"+draggerId[0]+",#"+draggerId[1]),
				draggable,dragY,dragX,
				rds=o.advanced.releaseDraggableSelectors ? mCSB_dragger.add($(o.advanced.releaseDraggableSelectors)) : mCSB_dragger,
				eds=o.advanced.extraDraggableSelectors ? $(!_canAccessIFrame() || top.document).add($(o.advanced.extraDraggableSelectors)) : $(!_canAccessIFrame() || top.document);
			mCSB_dragger.bind("contextmenu."+namespace,function(e){
				e.preventDefault(); //prevent right click
			}).bind("mousedown."+namespace+" touchstart."+namespace+" pointerdown."+namespace+" MSPointerDown."+namespace,function(e){
				e.stopImmediatePropagation();
				e.preventDefault();
				if(!_mouseBtnLeft(e)){return;} /* left mouse button only */
				touchActive=true;
				if(oldIE){document.onselectstart=function(){return false;}} /* disable text selection for IE < 9 */
				_iframe.call(mCSB_container,false); /* enable scrollbar dragging over iframes by disabling their events */
				_stop($this);
				draggable=$(this);
				var offset=draggable.offset(),y=_coordinates(e)[0]-offset.top,x=_coordinates(e)[1]-offset.left,
					h=draggable.height()+offset.top,w=draggable.width()+offset.left;
				if(y<h && y>0 && x<w && x>0){
					dragY=y; 
					dragX=x;
				}
				_onDragClasses(draggable,"active",o.autoExpandScrollbar); 
			}).bind("touchmove."+namespace,function(e){
				e.stopImmediatePropagation();
				e.preventDefault();
				var offset=draggable.offset(),y=_coordinates(e)[0]-offset.top,x=_coordinates(e)[1]-offset.left;
				_drag(dragY,dragX,y,x);
			});
			$(document).add(eds).bind("mousemove."+namespace+" pointermove."+namespace+" MSPointerMove."+namespace,function(e){
				if(draggable){
					var offset=draggable.offset(),y=_coordinates(e)[0]-offset.top,x=_coordinates(e)[1]-offset.left;
					if(dragY===y && dragX===x){return;} /* has it really moved? */
					_drag(dragY,dragX,y,x);
				}
			}).add(rds).bind("mouseup."+namespace+" touchend."+namespace+" pointerup."+namespace+" MSPointerUp."+namespace,function(e){
				if(draggable){
					_onDragClasses(draggable,"active",o.autoExpandScrollbar); 
					draggable=null;
				}
				touchActive=false;
				if(oldIE){document.onselectstart=null;} /* enable text selection for IE < 9 */
				_iframe.call(mCSB_container,true); /* enable iframes events */
			});
			function _drag(dragY,dragX,y,x){
				mCSB_container[0].idleTimer=o.scrollInertia<233 ? 250 : 0;
				if(draggable.attr("id")===draggerId[1]){
					var dir="x",to=((draggable[0].offsetLeft-dragX)+x)*d.scrollRatio.x;
				}else{
					var dir="y",to=((draggable[0].offsetTop-dragY)+y)*d.scrollRatio.y;
				}
				_scrollTo($this,to.toString(),{dir:dir,drag:true});
			}
		},
		/* -------------------- */
		
		
		/* 
		TOUCH SWIPE EVENTS
		scrolls content via touch swipe 
		Emulates the native touch-swipe scrolling with momentum found in iOS, Android and WP devices 
		*/
		_contentDraggable=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				namespace=pluginPfx+"_"+d.idx,
				mCustomScrollBox=$("#mCSB_"+d.idx),
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")],
				draggable,dragY,dragX,touchStartY,touchStartX,touchMoveY=[],touchMoveX=[],startTime,runningTime,endTime,distance,speed,amount,
				durA=0,durB,overwrite=o.axis==="yx" ? "none" : "all",touchIntent=[],touchDrag,docDrag,
				iframe=mCSB_container.find("iframe"),
				events=[
					"touchstart."+namespace+" pointerdown."+namespace+" MSPointerDown."+namespace, //start
					"touchmove."+namespace+" pointermove."+namespace+" MSPointerMove."+namespace, //move
					"touchend."+namespace+" pointerup."+namespace+" MSPointerUp."+namespace //end
				],
				touchAction=document.body.style.touchAction!==undefined && document.body.style.touchAction!=="";
			mCSB_container.bind(events[0],function(e){
				_onTouchstart(e);
			}).bind(events[1],function(e){
				_onTouchmove(e);
			});
			mCustomScrollBox.bind(events[0],function(e){
				_onTouchstart2(e);
			}).bind(events[2],function(e){
				_onTouchend(e);
			});
			if(iframe.length){
				iframe.each(function(){
					$(this).bind("load",function(){
						/* bind events on accessible iframes */
						if(_canAccessIFrame(this)){
							$(this.contentDocument || this.contentWindow.document).bind(events[0],function(e){
								_onTouchstart(e);
								_onTouchstart2(e);
							}).bind(events[1],function(e){
								_onTouchmove(e);
							}).bind(events[2],function(e){
								_onTouchend(e);
							});
						}
					});
				});
			}
			function _onTouchstart(e){
				if(!_pointerTouch(e) || touchActive || _coordinates(e)[2]){touchable=0; return;}
				touchable=1; touchDrag=0; docDrag=0; draggable=1;
				$this.removeClass("mCS_touch_action");
				var offset=mCSB_container.offset();
				dragY=_coordinates(e)[0]-offset.top;
				dragX=_coordinates(e)[1]-offset.left;
				touchIntent=[_coordinates(e)[0],_coordinates(e)[1]];
			}
			function _onTouchmove(e){
				if(!_pointerTouch(e) || touchActive || _coordinates(e)[2]){return;}
				if(!o.documentTouchScroll){e.preventDefault();} 
				e.stopImmediatePropagation();
				if(docDrag && !touchDrag){return;}
				if(draggable){
					runningTime=_getTime();
					var offset=mCustomScrollBox.offset(),y=_coordinates(e)[0]-offset.top,x=_coordinates(e)[1]-offset.left,
						easing="mcsLinearOut";
					touchMoveY.push(y);
					touchMoveX.push(x);
					touchIntent[2]=Math.abs(_coordinates(e)[0]-touchIntent[0]); touchIntent[3]=Math.abs(_coordinates(e)[1]-touchIntent[1]);
					if(d.overflowed[0]){
						var limit=mCSB_dragger[0].parent().height()-mCSB_dragger[0].height(),
							prevent=((dragY-y)>0 && (y-dragY)>-(limit*d.scrollRatio.y) && (touchIntent[3]*2<touchIntent[2] || o.axis==="yx"));
					}
					if(d.overflowed[1]){
						var limitX=mCSB_dragger[1].parent().width()-mCSB_dragger[1].width(),
							preventX=((dragX-x)>0 && (x-dragX)>-(limitX*d.scrollRatio.x) && (touchIntent[2]*2<touchIntent[3] || o.axis==="yx"));
					}
					if(prevent || preventX){ /* prevent native document scrolling */
						if(!touchAction){e.preventDefault();} 
						touchDrag=1;
					}else{
						docDrag=1;
						$this.addClass("mCS_touch_action");
					}
					if(touchAction){e.preventDefault();} 
					amount=o.axis==="yx" ? [(dragY-y),(dragX-x)] : o.axis==="x" ? [null,(dragX-x)] : [(dragY-y),null];
					mCSB_container[0].idleTimer=250;
					if(d.overflowed[0]){_drag(amount[0],durA,easing,"y","all",true);}
					if(d.overflowed[1]){_drag(amount[1],durA,easing,"x",overwrite,true);}
				}
			}
			function _onTouchstart2(e){
				if(!_pointerTouch(e) || touchActive || _coordinates(e)[2]){touchable=0; return;}
				touchable=1;
				e.stopImmediatePropagation();
				_stop($this);
				startTime=_getTime();
				var offset=mCustomScrollBox.offset();
				touchStartY=_coordinates(e)[0]-offset.top;
				touchStartX=_coordinates(e)[1]-offset.left;
				touchMoveY=[]; touchMoveX=[];
			}
			function _onTouchend(e){
				if(!_pointerTouch(e) || touchActive || _coordinates(e)[2]){return;}
				draggable=0;
				e.stopImmediatePropagation();
				touchDrag=0; docDrag=0;
				endTime=_getTime();
				var offset=mCustomScrollBox.offset(),y=_coordinates(e)[0]-offset.top,x=_coordinates(e)[1]-offset.left;
				if((endTime-runningTime)>30){return;}
				speed=1000/(endTime-startTime);
				var easing="mcsEaseOut",slow=speed<2.5,
					diff=slow ? [touchMoveY[touchMoveY.length-2],touchMoveX[touchMoveX.length-2]] : [0,0];
				distance=slow ? [(y-diff[0]),(x-diff[1])] : [y-touchStartY,x-touchStartX];
				var absDistance=[Math.abs(distance[0]),Math.abs(distance[1])];
				speed=slow ? [Math.abs(distance[0]/4),Math.abs(distance[1]/4)] : [speed,speed];
				var a=[
					Math.abs(mCSB_container[0].offsetTop)-(distance[0]*_m((absDistance[0]/speed[0]),speed[0])),
					Math.abs(mCSB_container[0].offsetLeft)-(distance[1]*_m((absDistance[1]/speed[1]),speed[1]))
				];
				amount=o.axis==="yx" ? [a[0],a[1]] : o.axis==="x" ? [null,a[1]] : [a[0],null];
				durB=[(absDistance[0]*4)+o.scrollInertia,(absDistance[1]*4)+o.scrollInertia];
				var md=parseInt(o.contentTouchScroll) || 0; /* absolute minimum distance required */
				amount[0]=absDistance[0]>md ? amount[0] : 0;
				amount[1]=absDistance[1]>md ? amount[1] : 0;
				if(d.overflowed[0]){_drag(amount[0],durB[0],easing,"y",overwrite,false);}
				if(d.overflowed[1]){_drag(amount[1],durB[1],easing,"x",overwrite,false);}
			}
			function _m(ds,s){
				var r=[s*1.5,s*2,s/1.5,s/2];
				if(ds>90){
					return s>4 ? r[0] : r[3];
				}else if(ds>60){
					return s>3 ? r[3] : r[2];
				}else if(ds>30){
					return s>8 ? r[1] : s>6 ? r[0] : s>4 ? s : r[2];
				}else{
					return s>8 ? s : r[3];
				}
			}
			function _drag(amount,dur,easing,dir,overwrite,drag){
				if(!amount){return;}
				_scrollTo($this,amount.toString(),{dur:dur,scrollEasing:easing,dir:dir,overwrite:overwrite,drag:drag});
			}
		},
		/* -------------------- */
		
		
		/* 
		SELECT TEXT EVENTS 
		scrolls content when text is selected 
		*/
		_selectable=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,seq=d.sequential,
				namespace=pluginPfx+"_"+d.idx,
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				wrapper=mCSB_container.parent(),
				action;
			mCSB_container.bind("mousedown."+namespace,function(e){
				if(touchable){return;}
				if(!action){action=1; touchActive=true;}
			}).add(document).bind("mousemove."+namespace,function(e){
				if(!touchable && action && _sel()){
					var offset=mCSB_container.offset(),
						y=_coordinates(e)[0]-offset.top+mCSB_container[0].offsetTop,x=_coordinates(e)[1]-offset.left+mCSB_container[0].offsetLeft;
					if(y>0 && y<wrapper.height() && x>0 && x<wrapper.width()){
						if(seq.step){_seq("off",null,"stepped");}
					}else{
						if(o.axis!=="x" && d.overflowed[0]){
							if(y<0){
								_seq("on",38);
							}else if(y>wrapper.height()){
								_seq("on",40);
							}
						}
						if(o.axis!=="y" && d.overflowed[1]){
							if(x<0){
								_seq("on",37);
							}else if(x>wrapper.width()){
								_seq("on",39);
							}
						}
					}
				}
			}).bind("mouseup."+namespace+" dragend."+namespace,function(e){
				if(touchable){return;}
				if(action){action=0; _seq("off",null);}
				touchActive=false;
			});
			function _sel(){
				return 	window.getSelection ? window.getSelection().toString() : 
						document.selection && document.selection.type!="Control" ? document.selection.createRange().text : 0;
			}
			function _seq(a,c,s){
				seq.type=s && action ? "stepped" : "stepless";
				seq.scrollAmount=10;
				_sequentialScroll($this,a,c,"mcsLinearOut",s ? 60 : null);
			}
		},
		/* -------------------- */
		
		
		/* 
		MOUSE WHEEL EVENT
		scrolls content via mouse-wheel 
		via mouse-wheel plugin (https://github.com/brandonaaron/jquery-mousewheel)
		*/
		_mousewheel=function(){
			if(!$(this).data(pluginPfx)){return;} /* Check if the scrollbar is ready to use mousewheel events (issue: #185) */
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				namespace=pluginPfx+"_"+d.idx,
				mCustomScrollBox=$("#mCSB_"+d.idx),
				mCSB_dragger=[$("#mCSB_"+d.idx+"_dragger_vertical"),$("#mCSB_"+d.idx+"_dragger_horizontal")],
				iframe=$("#mCSB_"+d.idx+"_container").find("iframe");
			if(iframe.length){
				iframe.each(function(){
					$(this).bind("load",function(){
						/* bind events on accessible iframes */
						if(_canAccessIFrame(this)){
							$(this.contentDocument || this.contentWindow.document).bind("mousewheel."+namespace,function(e,delta){
								_onMousewheel(e,delta);
							});
						}
					});
				});
			}
			mCustomScrollBox.bind("mousewheel."+namespace,function(e,delta){
				_onMousewheel(e,delta);
			});
			function _onMousewheel(e,delta){
				_stop($this);
				if(_disableMousewheel($this,e.target)){return;} /* disables mouse-wheel when hovering specific elements */
				var deltaFactor=o.mouseWheel.deltaFactor!=="auto" ? parseInt(o.mouseWheel.deltaFactor) : (oldIE && e.deltaFactor<100) ? 100 : e.deltaFactor || 100,
					dur=o.scrollInertia;
				if(o.axis==="x" || o.mouseWheel.axis==="x"){
					var dir="x",
						px=[Math.round(deltaFactor*d.scrollRatio.x),parseInt(o.mouseWheel.scrollAmount)],
						amount=o.mouseWheel.scrollAmount!=="auto" ? px[1] : px[0]>=mCustomScrollBox.width() ? mCustomScrollBox.width()*0.9 : px[0],
						contentPos=Math.abs($("#mCSB_"+d.idx+"_container")[0].offsetLeft),
						draggerPos=mCSB_dragger[1][0].offsetLeft,
						limit=mCSB_dragger[1].parent().width()-mCSB_dragger[1].width(),
						dlt=o.mouseWheel.axis==="y" ? (e.deltaY || delta) : e.deltaX;
				}else{
					var dir="y",
						px=[Math.round(deltaFactor*d.scrollRatio.y),parseInt(o.mouseWheel.scrollAmount)],
						amount=o.mouseWheel.scrollAmount!=="auto" ? px[1] : px[0]>=mCustomScrollBox.height() ? mCustomScrollBox.height()*0.9 : px[0],
						contentPos=Math.abs($("#mCSB_"+d.idx+"_container")[0].offsetTop),
						draggerPos=mCSB_dragger[0][0].offsetTop,
						limit=mCSB_dragger[0].parent().height()-mCSB_dragger[0].height(),
						dlt=e.deltaY || delta;
				}
				if((dir==="y" && !d.overflowed[0]) || (dir==="x" && !d.overflowed[1])){return;}
				if(o.mouseWheel.invert || e.webkitDirectionInvertedFromDevice){dlt=-dlt;}
				if(o.mouseWheel.normalizeDelta){dlt=dlt<0 ? -1 : 1;}
				if((dlt>0 && draggerPos!==0) || (dlt<0 && draggerPos!==limit) || o.mouseWheel.preventDefault){
					e.stopImmediatePropagation();
					e.preventDefault();
				}
				if(e.deltaFactor<5 && !o.mouseWheel.normalizeDelta){
					//very low deltaFactor values mean some kind of delta acceleration (e.g. osx trackpad), so adjusting scrolling accordingly
					amount=e.deltaFactor; dur=17;
				}
				_scrollTo($this,(contentPos-(dlt*amount)).toString(),{dir:dir,dur:dur});
			}
		},
		/* -------------------- */
		
		
		/* checks if iframe can be accessed */
		_canAccessIFrameCache=new Object(),
		_canAccessIFrame=function(iframe){
		    var result=false,cacheKey=false,html=null;
		    if(iframe===undefined){
				cacheKey="#empty";
		    }else if($(iframe).attr("id")!==undefined){
				cacheKey=$(iframe).attr("id");
		    }
			if(cacheKey!==false && _canAccessIFrameCache[cacheKey]!==undefined){
				return _canAccessIFrameCache[cacheKey];
			}
			if(!iframe){
				try{
					var doc=top.document;
					html=doc.body.innerHTML;
				}catch(err){/* do nothing */}
				result=(html!==null);
			}else{
				try{
					var doc=iframe.contentDocument || iframe.contentWindow.document;
					html=doc.body.innerHTML;
				}catch(err){/* do nothing */}
				result=(html!==null);
			}
			if(cacheKey!==false){_canAccessIFrameCache[cacheKey]=result;}
			return result;
		},
		/* -------------------- */
		
		
		/* switches iframe's pointer-events property (drag, mousewheel etc. over cross-domain iframes) */
		_iframe=function(evt){
			var el=this.find("iframe");
			if(!el.length){return;} /* check if content contains iframes */
			var val=!evt ? "none" : "auto";
			el.css("pointer-events",val); /* for IE11, iframe's display property should not be "block" */
		},
		/* -------------------- */
		
		
		/* disables mouse-wheel when hovering specific elements like select, datalist etc. */
		_disableMousewheel=function(el,target){
			var tag=target.nodeName.toLowerCase(),
				tags=el.data(pluginPfx).opt.mouseWheel.disableOver,
				/* elements that require focus */
				focusTags=["select","textarea"];
			return $.inArray(tag,tags) > -1 && !($.inArray(tag,focusTags) > -1 && !$(target).is(":focus"));
		},
		/* -------------------- */
		
		
		/* 
		DRAGGER RAIL CLICK EVENT
		scrolls content via dragger rail 
		*/
		_draggerRail=function(){
			var $this=$(this),d=$this.data(pluginPfx),
				namespace=pluginPfx+"_"+d.idx,
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				wrapper=mCSB_container.parent(),
				mCSB_draggerContainer=$(".mCSB_"+d.idx+"_scrollbar ."+classes[12]),
				clickable;
			mCSB_draggerContainer.bind("mousedown."+namespace+" touchstart."+namespace+" pointerdown."+namespace+" MSPointerDown."+namespace,function(e){
				touchActive=true;
				if(!$(e.target).hasClass("mCSB_dragger")){clickable=1;}
			}).bind("touchend."+namespace+" pointerup."+namespace+" MSPointerUp."+namespace,function(e){
				touchActive=false;
			}).bind("click."+namespace,function(e){
				if(!clickable){return;}
				clickable=0;
				if($(e.target).hasClass(classes[12]) || $(e.target).hasClass("mCSB_draggerRail")){
					_stop($this);
					var el=$(this),mCSB_dragger=el.find(".mCSB_dragger");
					if(el.parent(".mCSB_scrollTools_horizontal").length>0){
						if(!d.overflowed[1]){return;}
						var dir="x",
							clickDir=e.pageX>mCSB_dragger.offset().left ? -1 : 1,
							to=Math.abs(mCSB_container[0].offsetLeft)-(clickDir*(wrapper.width()*0.9));
					}else{
						if(!d.overflowed[0]){return;}
						var dir="y",
							clickDir=e.pageY>mCSB_dragger.offset().top ? -1 : 1,
							to=Math.abs(mCSB_container[0].offsetTop)-(clickDir*(wrapper.height()*0.9));
					}
					_scrollTo($this,to.toString(),{dir:dir,scrollEasing:"mcsEaseInOut"});
				}
			});
		},
		/* -------------------- */
		
		
		/* 
		FOCUS EVENT
		scrolls content via element focus (e.g. clicking an input, pressing TAB key etc.)
		*/
		_focus=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				namespace=pluginPfx+"_"+d.idx,
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				wrapper=mCSB_container.parent();
			mCSB_container.bind("focusin."+namespace,function(e){
				var el=$(document.activeElement),
					nested=mCSB_container.find(".mCustomScrollBox").length,
					dur=0;
				if(!el.is(o.advanced.autoScrollOnFocus)){return;}
				_stop($this);
				clearTimeout($this[0]._focusTimeout);
				$this[0]._focusTimer=nested ? (dur+17)*nested : 0;
				$this[0]._focusTimeout=setTimeout(function(){
					var	to=[_childPos(el)[0],_childPos(el)[1]],
						contentPos=[mCSB_container[0].offsetTop,mCSB_container[0].offsetLeft],
						isVisible=[
							(contentPos[0]+to[0]>=0 && contentPos[0]+to[0]<wrapper.height()-el.outerHeight(false)),
							(contentPos[1]+to[1]>=0 && contentPos[0]+to[1]<wrapper.width()-el.outerWidth(false))
						],
						overwrite=(o.axis==="yx" && !isVisible[0] && !isVisible[1]) ? "none" : "all";
					if(o.axis!=="x" && !isVisible[0]){
						_scrollTo($this,to[0].toString(),{dir:"y",scrollEasing:"mcsEaseInOut",overwrite:overwrite,dur:dur});
					}
					if(o.axis!=="y" && !isVisible[1]){
						_scrollTo($this,to[1].toString(),{dir:"x",scrollEasing:"mcsEaseInOut",overwrite:overwrite,dur:dur});
					}
				},$this[0]._focusTimer);
			});
		},
		/* -------------------- */
		
		
		/* sets content wrapper scrollTop/scrollLeft always to 0 */
		_wrapperScroll=function(){
			var $this=$(this),d=$this.data(pluginPfx),
				namespace=pluginPfx+"_"+d.idx,
				wrapper=$("#mCSB_"+d.idx+"_container").parent();
			wrapper.bind("scroll."+namespace,function(e){
				if(wrapper.scrollTop()!==0 || wrapper.scrollLeft()!==0){
					$(".mCSB_"+d.idx+"_scrollbar").css("visibility","hidden"); /* hide scrollbar(s) */
				}
			});
		},
		/* -------------------- */
		
		
		/* 
		BUTTONS EVENTS
		scrolls content via up, down, left and right buttons 
		*/
		_buttons=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,seq=d.sequential,
				namespace=pluginPfx+"_"+d.idx,
				sel=".mCSB_"+d.idx+"_scrollbar",
				btn=$(sel+">a");
			btn.bind("contextmenu."+namespace,function(e){
				e.preventDefault(); //prevent right click
			}).bind("mousedown."+namespace+" touchstart."+namespace+" pointerdown."+namespace+" MSPointerDown."+namespace+" mouseup."+namespace+" touchend."+namespace+" pointerup."+namespace+" MSPointerUp."+namespace+" mouseout."+namespace+" pointerout."+namespace+" MSPointerOut."+namespace+" click."+namespace,function(e){
				e.preventDefault();
				if(!_mouseBtnLeft(e)){return;} /* left mouse button only */
				var btnClass=$(this).attr("class");
				seq.type=o.scrollButtons.scrollType;
				switch(e.type){
					case "mousedown": case "touchstart": case "pointerdown": case "MSPointerDown":
						if(seq.type==="stepped"){return;}
						touchActive=true;
						d.tweenRunning=false;
						_seq("on",btnClass);
						break;
					case "mouseup": case "touchend": case "pointerup": case "MSPointerUp":
					case "mouseout": case "pointerout": case "MSPointerOut":
						if(seq.type==="stepped"){return;}
						touchActive=false;
						if(seq.dir){_seq("off",btnClass);}
						break;
					case "click":
						if(seq.type!=="stepped" || d.tweenRunning){return;}
						_seq("on",btnClass);
						break;
				}
				function _seq(a,c){
					seq.scrollAmount=o.scrollButtons.scrollAmount;
					_sequentialScroll($this,a,c);
				}
			});
		},
		/* -------------------- */
		
		
		/* 
		KEYBOARD EVENTS
		scrolls content via keyboard 
		Keys: up arrow, down arrow, left arrow, right arrow, PgUp, PgDn, Home, End
		*/
		_keyboard=function(){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,seq=d.sequential,
				namespace=pluginPfx+"_"+d.idx,
				mCustomScrollBox=$("#mCSB_"+d.idx),
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				wrapper=mCSB_container.parent(),
				editables="input,textarea,select,datalist,keygen,[contenteditable='true']",
				iframe=mCSB_container.find("iframe"),
				events=["blur."+namespace+" keydown."+namespace+" keyup."+namespace];
			if(iframe.length){
				iframe.each(function(){
					$(this).bind("load",function(){
						/* bind events on accessible iframes */
						if(_canAccessIFrame(this)){
							$(this.contentDocument || this.contentWindow.document).bind(events[0],function(e){
								_onKeyboard(e);
							});
						}
					});
				});
			}
			mCustomScrollBox.attr("tabindex","0").bind(events[0],function(e){
				_onKeyboard(e);
			});
			function _onKeyboard(e){
				switch(e.type){
					case "blur":
						if(d.tweenRunning && seq.dir){_seq("off",null);}
						break;
					case "keydown": case "keyup":
						var code=e.keyCode ? e.keyCode : e.which,action="on";
						if((o.axis!=="x" && (code===38 || code===40)) || (o.axis!=="y" && (code===37 || code===39))){
							/* up (38), down (40), left (37), right (39) arrows */
							if(((code===38 || code===40) && !d.overflowed[0]) || ((code===37 || code===39) && !d.overflowed[1])){return;}
							if(e.type==="keyup"){action="off";}
							if(!$(document.activeElement).is(editables)){
								e.preventDefault();
								e.stopImmediatePropagation();
								_seq(action,code);
							}
						}else if(code===33 || code===34){
							/* PgUp (33), PgDn (34) */
							if(d.overflowed[0] || d.overflowed[1]){
								e.preventDefault();
								e.stopImmediatePropagation();
							}
							if(e.type==="keyup"){
								_stop($this);
								var keyboardDir=code===34 ? -1 : 1;
								if(o.axis==="x" || (o.axis==="yx" && d.overflowed[1] && !d.overflowed[0])){
									var dir="x",to=Math.abs(mCSB_container[0].offsetLeft)-(keyboardDir*(wrapper.width()*0.9));
								}else{
									var dir="y",to=Math.abs(mCSB_container[0].offsetTop)-(keyboardDir*(wrapper.height()*0.9));
								}
								_scrollTo($this,to.toString(),{dir:dir,scrollEasing:"mcsEaseInOut"});
							}
						}else if(code===35 || code===36){
							/* End (35), Home (36) */
							if(!$(document.activeElement).is(editables)){
								if(d.overflowed[0] || d.overflowed[1]){
									e.preventDefault();
									e.stopImmediatePropagation();
								}
								if(e.type==="keyup"){
									if(o.axis==="x" || (o.axis==="yx" && d.overflowed[1] && !d.overflowed[0])){
										var dir="x",to=code===35 ? Math.abs(wrapper.width()-mCSB_container.outerWidth(false)) : 0;
									}else{
										var dir="y",to=code===35 ? Math.abs(wrapper.height()-mCSB_container.outerHeight(false)) : 0;
									}
									_scrollTo($this,to.toString(),{dir:dir,scrollEasing:"mcsEaseInOut"});
								}
							}
						}
						break;
				}
				function _seq(a,c){
					seq.type=o.keyboard.scrollType;
					seq.scrollAmount=o.keyboard.scrollAmount;
					if(seq.type==="stepped" && d.tweenRunning){return;}
					_sequentialScroll($this,a,c);
				}
			}
		},
		/* -------------------- */
		
		
		/* scrolls content sequentially (used when scrolling via buttons, keyboard arrows etc.) */
		_sequentialScroll=function(el,action,trigger,e,s){
			var d=el.data(pluginPfx),o=d.opt,seq=d.sequential,
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				once=seq.type==="stepped" ? true : false,
				steplessSpeed=o.scrollInertia < 26 ? 26 : o.scrollInertia, /* 26/1.5=17 */
				steppedSpeed=o.scrollInertia < 1 ? 17 : o.scrollInertia;
			switch(action){
				case "on":
					seq.dir=[
						(trigger===classes[16] || trigger===classes[15] || trigger===39 || trigger===37 ? "x" : "y"),
						(trigger===classes[13] || trigger===classes[15] || trigger===38 || trigger===37 ? -1 : 1)
					];
					_stop(el);
					if(_isNumeric(trigger) && seq.type==="stepped"){return;}
					_on(once);
					break;
				case "off":
					_off();
					if(once || (d.tweenRunning && seq.dir)){
						_on(true);
					}
					break;
			}
			
			/* starts sequence */
			function _on(once){
				if(o.snapAmount){seq.scrollAmount=!(o.snapAmount instanceof Array) ? o.snapAmount : seq.dir[0]==="x" ? o.snapAmount[1] : o.snapAmount[0];} /* scrolling snapping */
				var c=seq.type!=="stepped", /* continuous scrolling */
					t=s ? s : !once ? 1000/60 : c ? steplessSpeed/1.5 : steppedSpeed, /* timer */
					m=!once ? 2.5 : c ? 7.5 : 40, /* multiplier */
					contentPos=[Math.abs(mCSB_container[0].offsetTop),Math.abs(mCSB_container[0].offsetLeft)],
					ratio=[d.scrollRatio.y>10 ? 10 : d.scrollRatio.y,d.scrollRatio.x>10 ? 10 : d.scrollRatio.x],
					amount=seq.dir[0]==="x" ? contentPos[1]+(seq.dir[1]*(ratio[1]*m)) : contentPos[0]+(seq.dir[1]*(ratio[0]*m)),
					px=seq.dir[0]==="x" ? contentPos[1]+(seq.dir[1]*parseInt(seq.scrollAmount)) : contentPos[0]+(seq.dir[1]*parseInt(seq.scrollAmount)),
					to=seq.scrollAmount!=="auto" ? px : amount,
					easing=e ? e : !once ? "mcsLinear" : c ? "mcsLinearOut" : "mcsEaseInOut",
					onComplete=!once ? false : true;
				if(once && t<17){
					to=seq.dir[0]==="x" ? contentPos[1] : contentPos[0];
				}
				_scrollTo(el,to.toString(),{dir:seq.dir[0],scrollEasing:easing,dur:t,onComplete:onComplete});
				if(once){
					seq.dir=false;
					return;
				}
				clearTimeout(seq.step);
				seq.step=setTimeout(function(){
					_on();
				},t);
			}
			/* stops sequence */
			function _off(){
				clearTimeout(seq.step);
				_delete(seq,"step");
				_stop(el);
			}
		},
		/* -------------------- */
		
		
		/* returns a yx array from value */
		_arr=function(val){
			var o=$(this).data(pluginPfx).opt,vals=[];
			if(typeof val==="function"){val=val();} /* check if the value is a single anonymous function */
			/* check if value is object or array, its length and create an array with yx values */
			if(!(val instanceof Array)){ /* object value (e.g. {y:"100",x:"100"}, 100 etc.) */
				vals[0]=val.y ? val.y : val.x || o.axis==="x" ? null : val;
				vals[1]=val.x ? val.x : val.y || o.axis==="y" ? null : val;
			}else{ /* array value (e.g. [100,100]) */
				vals=val.length>1 ? [val[0],val[1]] : o.axis==="x" ? [null,val[0]] : [val[0],null];
			}
			/* check if array values are anonymous functions */
			if(typeof vals[0]==="function"){vals[0]=vals[0]();}
			if(typeof vals[1]==="function"){vals[1]=vals[1]();}
			return vals;
		},
		/* -------------------- */
		
		
		/* translates values (e.g. "top", 100, "100px", "#id") to actual scroll-to positions */
		_to=function(val,dir){
			if(val==null || typeof val=="undefined"){return;}
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				wrapper=mCSB_container.parent(),
				t=typeof val;
			if(!dir){dir=o.axis==="x" ? "x" : "y";}
			var contentLength=dir==="x" ? mCSB_container.outerWidth(false)-wrapper.width() : mCSB_container.outerHeight(false)-wrapper.height(),
				contentPos=dir==="x" ? mCSB_container[0].offsetLeft : mCSB_container[0].offsetTop,
				cssProp=dir==="x" ? "left" : "top";
			switch(t){
				case "function": /* this currently is not used. Consider removing it */
					return val();
					break;
				case "object": /* js/jquery object */
					var obj=val.jquery ? val : $(val);
					if(!obj.length){return;}
					return dir==="x" ? _childPos(obj)[1] : _childPos(obj)[0];
					break;
				case "string": case "number":
					if(_isNumeric(val)){ /* numeric value */
						return Math.abs(val);
					}else if(val.indexOf("%")!==-1){ /* percentage value */
						return Math.abs(contentLength*parseInt(val)/100);
					}else if(val.indexOf("-=")!==-1){ /* decrease value */
						return Math.abs(contentPos-parseInt(val.split("-=")[1]));
					}else if(val.indexOf("+=")!==-1){ /* inrease value */
						var p=(contentPos+parseInt(val.split("+=")[1]));
						return p>=0 ? 0 : Math.abs(p);
					}else if(val.indexOf("px")!==-1 && _isNumeric(val.split("px")[0])){ /* pixels string value (e.g. "100px") */
						return Math.abs(val.split("px")[0]);
					}else{
						if(val==="top" || val==="left"){ /* special strings */
							return 0;
						}else if(val==="bottom"){
							return Math.abs(wrapper.height()-mCSB_container.outerHeight(false));
						}else if(val==="right"){
							return Math.abs(wrapper.width()-mCSB_container.outerWidth(false));
						}else if(val==="first" || val==="last"){
							var obj=mCSB_container.find(":"+val);
							return dir==="x" ? _childPos(obj)[1] : _childPos(obj)[0];
						}else{
							if($(val).length){ /* jquery selector */
								return dir==="x" ? _childPos($(val))[1] : _childPos($(val))[0];
							}else{ /* other values (e.g. "100em") */
								mCSB_container.css(cssProp,val);
								methods.update.call(null,$this[0]);
								return;
							}
						}
					}
					break;
			}
		},
		/* -------------------- */
		
		
		/* calls the update method automatically */
		_autoUpdate=function(rem){
			var $this=$(this),d=$this.data(pluginPfx),o=d.opt,
				mCSB_container=$("#mCSB_"+d.idx+"_container");
			if(rem){
				/* 
				removes autoUpdate timer 
				usage: _autoUpdate.call(this,"remove");
				*/
				clearTimeout(mCSB_container[0].autoUpdate);
				_delete(mCSB_container[0],"autoUpdate");
				return;
			}
			upd();
			function upd(){
				clearTimeout(mCSB_container[0].autoUpdate);
				if($this.parents("html").length===0){
					/* check element in dom tree */
					$this=null;
					return;
				}
				mCSB_container[0].autoUpdate=setTimeout(function(){
					/* update on specific selector(s) length and size change */
					if(o.advanced.updateOnSelectorChange){
						d.poll.change.n=sizesSum();
						if(d.poll.change.n!==d.poll.change.o){
							d.poll.change.o=d.poll.change.n;
							doUpd(3);
							return;
						}
					}
					/* update on main element and scrollbar size changes */
					if(o.advanced.updateOnContentResize){
						d.poll.size.n=$this[0].scrollHeight+$this[0].scrollWidth+mCSB_container[0].offsetHeight+$this[0].offsetHeight+$this[0].offsetWidth;
						if(d.poll.size.n!==d.poll.size.o){
							d.poll.size.o=d.poll.size.n;
							doUpd(1);
							return;
						}
					}
					/* update on image load */
					if(o.advanced.updateOnImageLoad){
						if(!(o.advanced.updateOnImageLoad==="auto" && o.axis==="y")){ //by default, it doesn't run on vertical content
							d.poll.img.n=mCSB_container.find("img").length;
							if(d.poll.img.n!==d.poll.img.o){
								d.poll.img.o=d.poll.img.n;
								mCSB_container.find("img").each(function(){
									imgLoader(this);
								});
								return;
							}
						}
					}
					if(o.advanced.updateOnSelectorChange || o.advanced.updateOnContentResize || o.advanced.updateOnImageLoad){upd();}
				},o.advanced.autoUpdateTimeout);
			}
			/* a tiny image loader */
			function imgLoader(el){
				if($(el).hasClass(classes[2])){doUpd(); return;}
				var img=new Image();
				function createDelegate(contextObject,delegateMethod){
					return function(){return delegateMethod.apply(contextObject,arguments);}
				}
				function imgOnLoad(){
					this.onload=null;
					$(el).addClass(classes[2]);
					doUpd(2);
				}
				img.onload=createDelegate(img,imgOnLoad);
				img.src=el.src;
			}
			/* returns the total height and width sum of all elements matching the selector */
			function sizesSum(){
				if(o.advanced.updateOnSelectorChange===true){o.advanced.updateOnSelectorChange="*";}
				var total=0,sel=mCSB_container.find(o.advanced.updateOnSelectorChange);
				if(o.advanced.updateOnSelectorChange && sel.length>0){sel.each(function(){total+=this.offsetHeight+this.offsetWidth;});}
				return total;
			}
			/* calls the update method */
			function doUpd(cb){
				clearTimeout(mCSB_container[0].autoUpdate);
				methods.update.call(null,$this[0],cb);
			}
		},
		/* -------------------- */
		
		
		/* snaps scrolling to a multiple of a pixels number */
		_snapAmount=function(to,amount,offset){
			return (Math.round(to/amount)*amount-offset); 
		},
		/* -------------------- */
		
		
		/* stops content and scrollbar animations */
		_stop=function(el){
			var d=el.data(pluginPfx),
				sel=$("#mCSB_"+d.idx+"_container,#mCSB_"+d.idx+"_container_wrapper,#mCSB_"+d.idx+"_dragger_vertical,#mCSB_"+d.idx+"_dragger_horizontal");
			sel.each(function(){
				_stopTween.call(this);
			});
		},
		/* -------------------- */
		
		
		/* 
		ANIMATES CONTENT 
		This is where the actual scrolling happens
		*/
		_scrollTo=function(el,to,options){
			var d=el.data(pluginPfx),o=d.opt,
				defaults={
					trigger:"internal",
					dir:"y",
					scrollEasing:"mcsEaseOut",
					drag:false,
					dur:o.scrollInertia,
					overwrite:"all",
					callbacks:true,
					onStart:true,
					onUpdate:true,
					onComplete:true
				},
				options=$.extend(defaults,options),
				dur=[options.dur,(options.drag ? 0 : options.dur)],
				mCustomScrollBox=$("#mCSB_"+d.idx),
				mCSB_container=$("#mCSB_"+d.idx+"_container"),
				wrapper=mCSB_container.parent(),
				totalScrollOffsets=o.callbacks.onTotalScrollOffset ? _arr.call(el,o.callbacks.onTotalScrollOffset) : [0,0],
				totalScrollBackOffsets=o.callbacks.onTotalScrollBackOffset ? _arr.call(el,o.callbacks.onTotalScrollBackOffset) : [0,0];
			d.trigger=options.trigger;
			if(wrapper.scrollTop()!==0 || wrapper.scrollLeft()!==0){ /* always reset scrollTop/Left */
				$(".mCSB_"+d.idx+"_scrollbar").css("visibility","visible");
				wrapper.scrollTop(0).scrollLeft(0);
			}
			if(to==="_resetY" && !d.contentReset.y){
				/* callbacks: onOverflowYNone */
				if(_cb("onOverflowYNone")){o.callbacks.onOverflowYNone.call(el[0]);}
				d.contentReset.y=1;
			}
			if(to==="_resetX" && !d.contentReset.x){
				/* callbacks: onOverflowXNone */
				if(_cb("onOverflowXNone")){o.callbacks.onOverflowXNone.call(el[0]);}
				d.contentReset.x=1;
			}
			if(to==="_resetY" || to==="_resetX"){return;}
			if((d.contentReset.y || !el[0].mcs) && d.overflowed[0]){
				/* callbacks: onOverflowY */
				if(_cb("onOverflowY")){o.callbacks.onOverflowY.call(el[0]);}
				d.contentReset.x=null;
			}
			if((d.contentReset.x || !el[0].mcs) && d.overflowed[1]){
				/* callbacks: onOverflowX */
				if(_cb("onOverflowX")){o.callbacks.onOverflowX.call(el[0]);}
				d.contentReset.x=null;
			}
			if(o.snapAmount){ /* scrolling snapping */
				var snapAmount=!(o.snapAmount instanceof Array) ? o.snapAmount : options.dir==="x" ? o.snapAmount[1] : o.snapAmount[0];
				to=_snapAmount(to,snapAmount,o.snapOffset);
			}
			switch(options.dir){
				case "x":
					var mCSB_dragger=$("#mCSB_"+d.idx+"_dragger_horizontal"),
						property="left",
						contentPos=mCSB_container[0].offsetLeft,
						limit=[
							mCustomScrollBox.width()-mCSB_container.outerWidth(false),
							mCSB_dragger.parent().width()-mCSB_dragger.width()
						],
						scrollTo=[to,to===0 ? 0 : (to/d.scrollRatio.x)],
						tso=totalScrollOffsets[1],
						tsbo=totalScrollBackOffsets[1],
						totalScrollOffset=tso>0 ? tso/d.scrollRatio.x : 0,
						totalScrollBackOffset=tsbo>0 ? tsbo/d.scrollRatio.x : 0;
					break;
				case "y":
					var mCSB_dragger=$("#mCSB_"+d.idx+"_dragger_vertical"),
						property="top",
						contentPos=mCSB_container[0].offsetTop,
						limit=[
							mCustomScrollBox.height()-mCSB_container.outerHeight(false),
							mCSB_dragger.parent().height()-mCSB_dragger.height()
						],
						scrollTo=[to,to===0 ? 0 : (to/d.scrollRatio.y)],
						tso=totalScrollOffsets[0],
						tsbo=totalScrollBackOffsets[0],
						totalScrollOffset=tso>0 ? tso/d.scrollRatio.y : 0,
						totalScrollBackOffset=tsbo>0 ? tsbo/d.scrollRatio.y : 0;
					break;
			}
			if(scrollTo[1]<0 || (scrollTo[0]===0 && scrollTo[1]===0)){
				scrollTo=[0,0];
			}else if(scrollTo[1]>=limit[1]){
				scrollTo=[limit[0],limit[1]];
			}else{
				scrollTo[0]=-scrollTo[0];
			}
			if(!el[0].mcs){
				_mcs();  /* init mcs object (once) to make it available before callbacks */
				if(_cb("onInit")){o.callbacks.onInit.call(el[0]);} /* callbacks: onInit */
			}
			clearTimeout(mCSB_container[0].onCompleteTimeout);
			_tweenTo(mCSB_dragger[0],property,Math.round(scrollTo[1]),dur[1],options.scrollEasing);
			if(!d.tweenRunning && ((contentPos===0 && scrollTo[0]>=0) || (contentPos===limit[0] && scrollTo[0]<=limit[0]))){return;}
			_tweenTo(mCSB_container[0],property,Math.round(scrollTo[0]),dur[0],options.scrollEasing,options.overwrite,{
				onStart:function(){
					if(options.callbacks && options.onStart && !d.tweenRunning){
						/* callbacks: onScrollStart */
						if(_cb("onScrollStart")){_mcs(); o.callbacks.onScrollStart.call(el[0]);}
						d.tweenRunning=true;
						_onDragClasses(mCSB_dragger);
						d.cbOffsets=_cbOffsets();
					}
				},onUpdate:function(){
					if(options.callbacks && options.onUpdate){
						/* callbacks: whileScrolling */
						if(_cb("whileScrolling")){_mcs(); o.callbacks.whileScrolling.call(el[0]);}
					}
				},onComplete:function(){
					if(options.callbacks && options.onComplete){
						if(o.axis==="yx"){clearTimeout(mCSB_container[0].onCompleteTimeout);}
						var t=mCSB_container[0].idleTimer || 0;
						mCSB_container[0].onCompleteTimeout=setTimeout(function(){
							/* callbacks: onScroll, onTotalScroll, onTotalScrollBack */
							if(_cb("onScroll")){_mcs(); o.callbacks.onScroll.call(el[0]);}
							if(_cb("onTotalScroll") && scrollTo[1]>=limit[1]-totalScrollOffset && d.cbOffsets[0]){_mcs(); o.callbacks.onTotalScroll.call(el[0]);}
							if(_cb("onTotalScrollBack") && scrollTo[1]<=totalScrollBackOffset && d.cbOffsets[1]){_mcs(); o.callbacks.onTotalScrollBack.call(el[0]);}
							d.tweenRunning=false;
							mCSB_container[0].idleTimer=0;
							_onDragClasses(mCSB_dragger,"hide");
						},t);
					}
				}
			});
			/* checks if callback function exists */
			function _cb(cb){
				return d && o.callbacks[cb] && typeof o.callbacks[cb]==="function";
			}
			/* checks whether callback offsets always trigger */
			function _cbOffsets(){
				return [o.callbacks.alwaysTriggerOffsets || contentPos>=limit[0]+tso,o.callbacks.alwaysTriggerOffsets || contentPos<=-tsbo];
			}
			/* 
			populates object with useful values for the user 
			values: 
				content: this.mcs.content
				content top position: this.mcs.top 
				content left position: this.mcs.left 
				dragger top position: this.mcs.draggerTop 
				dragger left position: this.mcs.draggerLeft 
				scrolling y percentage: this.mcs.topPct 
				scrolling x percentage: this.mcs.leftPct 
				scrolling direction: this.mcs.direction
			*/
			function _mcs(){
				var cp=[mCSB_container[0].offsetTop,mCSB_container[0].offsetLeft], /* content position */
					dp=[mCSB_dragger[0].offsetTop,mCSB_dragger[0].offsetLeft], /* dragger position */
					cl=[mCSB_container.outerHeight(false),mCSB_container.outerWidth(false)], /* content length */
					pl=[mCustomScrollBox.height(),mCustomScrollBox.width()]; /* content parent length */
				el[0].mcs={
					content:mCSB_container, /* original content wrapper as jquery object */
					top:cp[0],left:cp[1],draggerTop:dp[0],draggerLeft:dp[1],
					topPct:Math.round((100*Math.abs(cp[0]))/(Math.abs(cl[0])-pl[0])),leftPct:Math.round((100*Math.abs(cp[1]))/(Math.abs(cl[1])-pl[1])),
					direction:options.dir
				};
				/* 
				this refers to the original element containing the scrollbar(s)
				usage: this.mcs.top, this.mcs.leftPct etc. 
				*/
			}
		},
		/* -------------------- */
		
		
		/* 
		CUSTOM JAVASCRIPT ANIMATION TWEEN 
		Lighter and faster than jquery animate() and css transitions 
		Animates top/left properties and includes easings 
		*/
		_tweenTo=function(el,prop,to,duration,easing,overwrite,callbacks){
			if(!el._mTween){el._mTween={top:{},left:{}};}
			var callbacks=callbacks || {},
				onStart=callbacks.onStart || function(){},onUpdate=callbacks.onUpdate || function(){},onComplete=callbacks.onComplete || function(){},
				startTime=_getTime(),_delay,progress=0,from=el.offsetTop,elStyle=el.style,_request,tobj=el._mTween[prop];
			if(prop==="left"){from=el.offsetLeft;}
			var diff=to-from;
			tobj.stop=0;
			if(overwrite!=="none"){_cancelTween();}
			_startTween();
			function _step(){
				if(tobj.stop){return;}
				if(!progress){onStart.call();}
				progress=_getTime()-startTime;
				_tween();
				if(progress>=tobj.time){
					tobj.time=(progress>tobj.time) ? progress+_delay-(progress-tobj.time) : progress+_delay-1;
					if(tobj.time<progress+1){tobj.time=progress+1;}
				}
				if(tobj.time<duration){tobj.id=_request(_step);}else{onComplete.call();}
			}
			function _tween(){
				if(duration>0){
					tobj.currVal=_ease(tobj.time,from,diff,duration,easing);
					elStyle[prop]=Math.round(tobj.currVal)+"px";
				}else{
					elStyle[prop]=to+"px";
				}
				onUpdate.call();
			}
			function _startTween(){
				_delay=1000/60;
				tobj.time=progress+_delay;
				_request=(!window.requestAnimationFrame) ? function(f){_tween(); return setTimeout(f,0.01);} : window.requestAnimationFrame;
				tobj.id=_request(_step);
			}
			function _cancelTween(){
				if(tobj.id==null){return;}
				if(!window.requestAnimationFrame){clearTimeout(tobj.id);
				}else{window.cancelAnimationFrame(tobj.id);}
				tobj.id=null;
			}
			function _ease(t,b,c,d,type){
				switch(type){
					case "linear": case "mcsLinear":
						return c*t/d + b;
						break;
					case "mcsLinearOut":
						t/=d; t--; return c * Math.sqrt(1 - t*t) + b;
						break;
					case "easeInOutSmooth":
						t/=d/2;
						if(t<1) return c/2*t*t + b;
						t--;
						return -c/2 * (t*(t-2) - 1) + b;
						break;
					case "easeInOutStrong":
						t/=d/2;
						if(t<1) return c/2 * Math.pow( 2, 10 * (t - 1) ) + b;
						t--;
						return c/2 * ( -Math.pow( 2, -10 * t) + 2 ) + b;
						break;
					case "easeInOut": case "mcsEaseInOut":
						t/=d/2;
						if(t<1) return c/2*t*t*t + b;
						t-=2;
						return c/2*(t*t*t + 2) + b;
						break;
					case "easeOutSmooth":
						t/=d; t--;
						return -c * (t*t*t*t - 1) + b;
						break;
					case "easeOutStrong":
						return c * ( -Math.pow( 2, -10 * t/d ) + 1 ) + b;
						break;
					case "easeOut": case "mcsEaseOut": default:
						var ts=(t/=d)*t,tc=ts*t;
						return b+c*(0.499999999999997*tc*ts + -2.5*ts*ts + 5.5*tc + -6.5*ts + 4*t);
				}
			}
		},
		/* -------------------- */
		
		
		/* returns current time */
		_getTime=function(){
			if(window.performance && window.performance.now){
				return window.performance.now();
			}else{
				if(window.performance && window.performance.webkitNow){
					return window.performance.webkitNow();
				}else{
					if(Date.now){return Date.now();}else{return new Date().getTime();}
				}
			}
		},
		/* -------------------- */
		
		
		/* stops a tween */
		_stopTween=function(){
			var el=this;
			if(!el._mTween){el._mTween={top:{},left:{}};}
			var props=["top","left"];
			for(var i=0; i<props.length; i++){
				var prop=props[i];
				if(el._mTween[prop].id){
					if(!window.requestAnimationFrame){clearTimeout(el._mTween[prop].id);
					}else{window.cancelAnimationFrame(el._mTween[prop].id);}
					el._mTween[prop].id=null;
					el._mTween[prop].stop=1;
				}
			}
		},
		/* -------------------- */
		
		
		/* deletes a property (avoiding the exception thrown by IE) */
		_delete=function(c,m){
			try{delete c[m];}catch(e){c[m]=null;}
		},
		/* -------------------- */
		
		
		/* detects left mouse button */
		_mouseBtnLeft=function(e){
			return !(e.which && e.which!==1);
		},
		/* -------------------- */
		
		
		/* detects if pointer type event is touch */
		_pointerTouch=function(e){
			var t=e.originalEvent.pointerType;
			return !(t && t!=="touch" && t!==2);
		},
		/* -------------------- */
		
		
		/* checks if value is numeric */
		_isNumeric=function(val){
			return !isNaN(parseFloat(val)) && isFinite(val);
		},
		/* -------------------- */
		
		
		/* returns element position according to content */
		_childPos=function(el){
			var p=el.parents(".mCSB_container");
			return [el.offset().top-p.offset().top,el.offset().left-p.offset().left];
		},
		/* -------------------- */
		
		
		/* checks if browser tab is hidden/inactive via Page Visibility API */
		_isTabHidden=function(){
			var prop=_getHiddenProp();
			if(!prop) return false;
			return document[prop];
			function _getHiddenProp(){
				var pfx=["webkit","moz","ms","o"];
				if("hidden" in document) return "hidden"; //natively supported
				for(var i=0; i<pfx.length; i++){ //prefixed
				    if((pfx[i]+"Hidden") in document) 
				        return pfx[i]+"Hidden";
				}
				return null; //not supported
			}
		};
		/* -------------------- */
		
	
	
	
	
	/* 
	----------------------------------------
	PLUGIN SETUP 
	----------------------------------------
	*/
	
	/* plugin constructor functions */
	$.fn[pluginNS]=function(method){ /* usage: $(selector).mCustomScrollbar(); */
		if(methods[method]){
			return methods[method].apply(this,Array.prototype.slice.call(arguments,1));
		}else if(typeof method==="object" || !method){
			return methods.init.apply(this,arguments);
		}else{
			$.error("Method "+method+" does not exist");
		}
	};
	$[pluginNS]=function(method){ /* usage: $.mCustomScrollbar(); */
		if(methods[method]){
			return methods[method].apply(this,Array.prototype.slice.call(arguments,1));
		}else if(typeof method==="object" || !method){
			return methods.init.apply(this,arguments);
		}else{
			$.error("Method "+method+" does not exist");
		}
	};
	
	/* 
	allow setting plugin default options. 
	usage: $.mCustomScrollbar.defaults.scrollInertia=500; 
	to apply any changed default options on default selectors (below), use inside document ready fn 
	e.g.: $(document).ready(function(){ $.mCustomScrollbar.defaults.scrollInertia=500; });
	*/
	$[pluginNS].defaults=defaults;
	
	/* 
	add window object (window.mCustomScrollbar) 
	usage: if(window.mCustomScrollbar){console.log("custom scrollbar plugin loaded");}
	*/
	window[pluginNS]=true;
	
	$(window).bind("load",function(){
		
		$(defaultSelector)[pluginNS](); /* add scrollbars automatically on default selector */
		
		/* extend jQuery expressions */
		$.extend($.expr[":"],{
			/* checks if element is within scrollable viewport */
			mcsInView:$.expr[":"].mcsInView || function(el){
				var $el=$(el),content=$el.parents(".mCSB_container"),wrapper,cPos;
				if(!content.length){return;}
				wrapper=content.parent();
				cPos=[content[0].offsetTop,content[0].offsetLeft];
				return 	cPos[0]+_childPos($el)[0]>=0 && cPos[0]+_childPos($el)[0]<wrapper.height()-$el.outerHeight(false) && 
						cPos[1]+_childPos($el)[1]>=0 && cPos[1]+_childPos($el)[1]<wrapper.width()-$el.outerWidth(false);
			},
			/* checks if element or part of element is in view of scrollable viewport */
			mcsInSight:$.expr[":"].mcsInSight || function(el,i,m){
				var $el=$(el),elD,content=$el.parents(".mCSB_container"),wrapperView,pos,wrapperViewPct,
					pctVals=m[3]==="exact" ? [[1,0],[1,0]] : [[0.9,0.1],[0.6,0.4]];
				if(!content.length){return;}
				elD=[$el.outerHeight(false),$el.outerWidth(false)];
				pos=[content[0].offsetTop+_childPos($el)[0],content[0].offsetLeft+_childPos($el)[1]];
				wrapperView=[content.parent()[0].offsetHeight,content.parent()[0].offsetWidth];
				wrapperViewPct=[elD[0]<wrapperView[0] ? pctVals[0] : pctVals[1],elD[1]<wrapperView[1] ? pctVals[0] : pctVals[1]];
				return 	pos[0]-(wrapperView[0]*wrapperViewPct[0][0])<0 && pos[0]+elD[0]-(wrapperView[0]*wrapperViewPct[0][1])>=0 && 
						pos[1]-(wrapperView[1]*wrapperViewPct[1][0])<0 && pos[1]+elD[1]-(wrapperView[1]*wrapperViewPct[1][1])>=0;
			},
			/* checks if element is overflowed having visible scrollbar(s) */
			mcsOverflow:$.expr[":"].mcsOverflow || function(el){
				var d=$(el).data(pluginPfx);
				if(!d){return;}
				return d.overflowed[0] || d.overflowed[1];
			}
		});
	
	});

}))}));;
/*!
 * jQuery Mousewheel 3.1.13
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 */

(function (factory) {
    if ( typeof define === 'function' && define.amd ) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else if (typeof exports === 'object') {
        // Node/CommonJS style for Browserify
        module.exports = factory;
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {

    var toFix  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
        toBind = ( 'onwheel' in document || document.documentMode >= 9 ) ?
                    ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
        slice  = Array.prototype.slice,
        nullLowestDeltaTimeout, lowestDelta;

    if ( $.event.fixHooks ) {
        for ( var i = toFix.length; i; ) {
            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;
        }
    }

    var special = $.event.special.mousewheel = {
        version: '3.1.12',

        setup: function() {
            if ( this.addEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.addEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = handler;
            }
            // Store the line height and page height for this particular element
            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
        },

        teardown: function() {
            if ( this.removeEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.removeEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = null;
            }
            // Clean up the data we added to the element
            $.removeData(this, 'mousewheel-line-height');
            $.removeData(this, 'mousewheel-page-height');
        },

        getLineHeight: function(elem) {
            var $elem = $(elem),
                $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();
            if (!$parent.length) {
                $parent = $('body');
            }
            return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;
        },

        getPageHeight: function(elem) {
            return $(elem).height();
        },

        settings: {
            adjustOldDeltas: true, // see shouldAdjustOldDeltas() below
            normalizeOffset: true  // calls getBoundingClientRect for each event
        }
    };

    $.fn.extend({
        mousewheel: function(fn) {
            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
        },

        unmousewheel: function(fn) {
            return this.unbind('mousewheel', fn);
        }
    });


    function handler(event) {
        var orgEvent   = event || window.event,
            args       = slice.call(arguments, 1),
            delta      = 0,
            deltaX     = 0,
            deltaY     = 0,
            absDelta   = 0,
            offsetX    = 0,
            offsetY    = 0;
        event = $.event.fix(orgEvent);
        event.type = 'mousewheel';

        // Old school scrollwheel delta
        if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1;      }
        if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;       }
        if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY;      }
        if ( 'wheelDeltaX' in orgEvent ) { deltaX = orgEvent.wheelDeltaX * -1; }

        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
        if ( 'axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {
            deltaX = deltaY * -1;
            deltaY = 0;
        }

        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
        delta = deltaY === 0 ? deltaX : deltaY;

        // New school wheel delta (wheel event)
        if ( 'deltaY' in orgEvent ) {
            deltaY = orgEvent.deltaY * -1;
            delta  = deltaY;
        }
        if ( 'deltaX' in orgEvent ) {
            deltaX = orgEvent.deltaX;
            if ( deltaY === 0 ) { delta  = deltaX * -1; }
        }

        // No change actually happened, no reason to go any further
        if ( deltaY === 0 && deltaX === 0 ) { return; }

        // Need to convert lines and pages to pixels if we aren't already in pixels
        // There are three delta modes:
        //   * deltaMode 0 is by pixels, nothing to do
        //   * deltaMode 1 is by lines
        //   * deltaMode 2 is by pages
        if ( orgEvent.deltaMode === 1 ) {
            var lineHeight = $.data(this, 'mousewheel-line-height');
            delta  *= lineHeight;
            deltaY *= lineHeight;
            deltaX *= lineHeight;
        } else if ( orgEvent.deltaMode === 2 ) {
            var pageHeight = $.data(this, 'mousewheel-page-height');
            delta  *= pageHeight;
            deltaY *= pageHeight;
            deltaX *= pageHeight;
        }

        // Store lowest absolute delta to normalize the delta values
        absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );

        if ( !lowestDelta || absDelta < lowestDelta ) {
            lowestDelta = absDelta;

            // Adjust older deltas if necessary
            if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
                lowestDelta /= 40;
            }
        }

        // Adjust older deltas if necessary
        if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
            // Divide all the things by 40!
            delta  /= 40;
            deltaX /= 40;
            deltaY /= 40;
        }

        // Get a whole, normalized value for the deltas
        delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);
        deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);
        deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);

        // Normalise offsetX and offsetY properties
        if ( special.settings.normalizeOffset && this.getBoundingClientRect ) {
            var boundingRect = this.getBoundingClientRect();
            offsetX = event.clientX - boundingRect.left;
            offsetY = event.clientY - boundingRect.top;
        }

        // Add information to the event object
        event.deltaX = deltaX;
        event.deltaY = deltaY;
        event.deltaFactor = lowestDelta;
        event.offsetX = offsetX;
        event.offsetY = offsetY;
        // Go ahead and set deltaMode to 0 since we converted to pixels
        // Although this is a little odd since we overwrite the deltaX/Y
        // properties with normalized deltas.
        event.deltaMode = 0;

        // Add event and delta to the front of the arguments
        args.unshift(event, delta, deltaX, deltaY);

        // Clearout lowestDelta after sometime to better
        // handle multiple device types that give different
        // a different lowestDelta
        // Ex: trackpad = 3 and mouse wheel = 120
        if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }
        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

        return ($.event.dispatch || $.event.handle).apply(this, args);
    }

    function nullLowestDelta() {
        lowestDelta = null;
    }

    function shouldAdjustOldDeltas(orgEvent, absDelta) {
        // If this is an older event and the delta is divisable by 120,
        // then we are assuming that the browser is treating this as an
        // older mouse wheel event and that we should divide the deltas
        // by 40 to try and get a more usable deltaFactor.
        // Side note, this actually impacts the reported scroll distance
        // in older browsers and can cause scrolling to be slower than native.
        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
    }

}));
;
(function (global, $) {
    'use strict';

    global.UiMenuMainV2 = global.UiBloc.extend({
        init: function (page, name) {
            var me = this;
            me._super(page, name);

            // Private properties
     
            // DOM Picks

            // DOM building elements

            // Private methods

            // Events
        }
    });
})(window, window.jQuery);
;
window.UiAccountLayer = UiBloc.extend({
    init: function (page, name) {
        this._super(page, name);
        var me = this;

        this.status = 'notLoaded';
        this.isOpen = false;
        this.isTouch = Utils.Common.isTouchDevice();
        this.$accountIcon = $('#headerAccount');
        this.$accountIconContainer = this.$accountIcon.parent();
        this.$container = $('<div>', {
            class: $.getHeaderTooltipClasses('tooltip-login'),
            id: 'headerAccountTooltip'
        })
            .insertAfter(this.$accountIcon)
            .tooltip();

        if (this.isTouch) {
            this.$accountIcon.on('click', function () {
                if (me.isMouseEnter) {
                    me.isMouseEnter = false;
                } else {
                    if (me.isOpen) {
                        me.redirection();
                    } else {
                        me.open();
                    }
                }
            });
        } else {
            this.$accountIcon.on('click', function () {
                me.redirection();
            });
        }
        this.$accountIconContainer.on('mouseenter', function () {
            if (me.isTouch) {
                me.isMouseEnter = true;
                setTimeout(function () {
                    me.isMouseEnter = false;
                }, 10);
            }
            me.open();
        });
        this.$accountIconContainer.on('mouseleave', function () {
            me.close();
        });
        this.$container.on('tooltip.close', function () {
            me.isOpen = false;
        });
    },
    load: function () {
        var me = this;
        $.ajax({
            async: false,
            cache: false,
            url: '/customerservices/loadloginlayer',
            type: 'GET',
            success: function (data) {
                me.$container.append(data);
                if (typeof window.reach5 !== 'undefined') {
                    window.reach5('on', 'ready', function () {
                        $('.social-login-container').show();
                    });
                }
                me.status = 'loaded';
                if (me.isOpen) {
                    me.open();
                }
                if ($('#logOutLayer').length === 1) {
                    $('#logOutLayer').on('click', function () {
                        me.logout();
                    });
                }
                
                if($('#top-login-layer-link') && $('#top-login-layer-link').length > 0) {
                    $('#top-login-layer-link').on('click', function() {
                        $('#inbenta-start').trigger('click');
                    });
                }
            },
            error: function () {}
        });
    },
    open: function () {
        this.isOpen = true;
        if (this.status === 'notLoaded') {
            this.status = 'isLoading';
            this.load();
        } else if (this.status === 'loaded') {
            this.$container.tooltip('open');
            this.$accountIcon.attr('aria-expanded', true)
        }
    },
    close: function () {
        this.isOpen = false;
        this.$container.tooltip('close');
        this.$accountIcon.attr('aria-expanded', false)
    },
    redirection: function () {
        if (window._LaRedoute.getScreenType() == 1 && _page.isMobileDevice) {
            window.location = '/myaccount/myaccount.aspx';
        } else {
            if (this.Page.isSiteUK()) {
                window.location = '/myaccount/myaccount.aspx';
            } else {
                window.location = '/myaccount/ordertracingall.aspx';
            }
        }
    },
    logout: function () {
        var me = this;
        if (contextInfo != null && contextInfo.Configuration.ConfigFlags.LogoutWithRedirect_Enabled) {
            me.logoutv2();
        }
        else {
            me.logoutv1();
        }
    },
    logoutv1: function () {
        var url = '/logout/logout';
        var antiForgeryToken = $("#antiForgeryToken").val();
        $.ajax({
            async: false,
            cache: false,
            headers:
            {
                'RequestVerificationToken': antiForgeryToken
            },
            url: url,
            type: 'GET',
            success: function () {
                window.localStorage.setItem('LR_logguedOut', 'logguedOut');
                window.location.href = '/login/login.aspx';
            },
            error: function (xhr, status, error) {
                console.error(
                    'AJAX on ' +
                        this.url +
                        ' method ' +
                        this.type +
                        ' status ' +
                        xhr.status +
                        ' statusText ' +
                        xhr.statusText +
                        ' error ' +
                        error +
                        ' response ' +
                        xhr.responseText
                );
            }
        });
    },
    logoutv2: function () {
        window.localStorage.setItem('LR_logguedOut', 'logguedOut');
        window.location.href = '/logout/logout.aspx?login=1';
    }
});
;
(function (global, $) {
    'use strict';

    var namespace = 'tooltip-basket';

    var STATUS_EMPTY = 'empty';
    var STATUS_ERROR = 'error';
    var STATUS_IS_LOADING = 'isLoading';
    var STATUS_NOT_LOADED = 'notLoaded';
    var STATUS_LOADED = 'loaded';
    var emptyStatuses = [STATUS_EMPTY, STATUS_ERROR, STATUS_NOT_LOADED];

    global.UiBasketLayer = global.UiBloc.extend({
        init: function (page, name) {
            var me = this;
            me._super(page, name);

            me.isTouch = global.Utils.Common.isTouchDevice();
            me.$basketIcon = $('#basketIcon');
            me.$basketIconContainer = me.$basketIcon.parent();
            me.$container = $('<div />', {
                class: $.getHeaderTooltipClasses(namespace)
            }).insertAfter(me.$basketIcon).tooltip();
            me.isOpen = false;
            me.loadBasketLayerXhr;
            me.status = STATUS_NOT_LOADED;

            me.$basketIconContainer.on('click', function() {
                if (me.status !== STATUS_EMPTY) {
                    if (!me.isOpen) {
                        event.preventDefault();
                        me.open(true);
                    } else if (me.isMouseEnter) {
                        event.preventDefault();
                        me.isMouseEnter = false;
                    }
                }
            }).on('mouseenter', function (event) {
                me.shouldBeOpened = true;
                if (me.isTouch) {
                    event.preventDefault();
                    me.isMouseEnter = true;
                    global.setTimeout(function () {
                        me.isMouseEnter = false;
                    }, 10);
                }
                me.open(false);
            }).on('mouseleave', function () {
                me.shouldBeOpened = false;
                if (me.loadBasketLayerXhr) {
                    me.loadBasketLayerXhr.abort();
                }
                me.close();
            });
        },
        goto: function () {
            global.location = this.$basketIcon.attr('href');
        },
        load: function (canGoto) {
            var me = this;
            var deferred = $.Deferred();
            me.close();
            var baseDirectoryPrefix = '';
            if (contextInfo.EnvironmentBaseDirectory != '') {
                baseDirectoryPrefix = '/' + contextInfo.EnvironmentBaseDirectory;
            }
            this.loadBasketLayerXhr = $.ajax({
                url: baseDirectoryPrefix + '/servicecheckoutnosession/loadbasketlayer',
                beforeSend: function () {
                    me.status = STATUS_IS_LOADING;
                },
                success: function (data) {
                    var content = data.Html;
                    if (content) {
                        me.$container
                            .empty()
                            .append(content)
                            .find('.' + namespace + '-list').mCustomScrollbar($.extend({}, global.Utils.Enum.CustomScrollBar.DefaultParams, {
                                horizontalScroll: false
                            }));
                        if (me.shouldBeOpened || me.isTouch) me.openTooltip();
                        deferred.resolve(data);
                        me.status = STATUS_LOADED;
                    } else {
                        me.status = STATUS_EMPTY;
                        if (canGoto && me.isTouch) {
                            me.goto();
                        }
                    }
                },
                error: function (xhr) {
                    deferred.reject(xhr);
                    me.status = STATUS_ERROR;
                }
            });
            return deferred.promise();
        },
        isStatus: function (status) {
            return this.status === status;
        },
        isEmptyStatus: function () {
            return $.inArray(this.status, emptyStatuses) !== -1;
        },
        isEmpty: function () {
            return this.isStatus(STATUS_EMPTY);
        },
        isLoaded: function () {
            return this.isStatus(STATUS_LOADED);
        },
        isLoading: function () {
            return this.isStatus(STATUS_IS_LOADING);
        },
        isNotLoaded: function () {
            return this.isStatus(STATUS_NOT_LOADED);
        },
        isTotalItemsDifferent: function () {
            var tooltipBasketItemClass = '.' + namespace + '-item';
            var totalOfProducts = 0;
            this.$container.find('#basketLayer ' + tooltipBasketItemClass + ' ' + tooltipBasketItemClass + '-feature[data-quantity]').each(function () {
                var $quantityLine = $(this);
                // If is not a gift
                if ($quantityLine.closest(tooltipBasketItemClass).find(tooltipBasketItemClass + '-image[src*="/gift.png"]').length === 0) {
                    // We can count the quantity and add it to the total of product
                    totalOfProducts += parseInt($quantityLine.data('quantity'));
                }
                
            });
            // If total products in badge is different than the items in the layer
            if (totalOfProducts !== parseInt(this.$basketIcon.find('.badge').text())) {
                return true;
            }
            return false;
        },
        canBeLoaded: function () {
            return this.isTotalItemsDifferent();
        },
        canOpenTooltip: function () {
            return this.isLoaded() && !this.isOpen;
        },
        close: function () {
            this.closeTooltip();
            this.isOpen = false;
        },
        closeTooltip: function () {
            this.$container.tooltip('close');
            this.$basketIcon.attr('aria-expanded', false);
        },
        open: function (canGoto) {
            var me = this;
            if (me.canBeLoaded()) {
                me.load(canGoto);
            } else if (me.canOpenTooltip()) {
                me.openTooltip();
            }
        },
        openTooltip: function () {
            this.$container.tooltip('open');
            this.$basketIcon.attr('aria-expanded', true);
            this.isOpen = true;
        }
    });

})(window, window.jQuery);
;
(function (global, $) {
    'use strict';

    global.UiHeader = global.UiBloc.extend({
        init: function (page, name) {
            var me = this;
            me._super(page, name);

            // Private properties
            var model = me.Model;
            var serviceEvent = global.globalServiceEvent;

            // Public properties

            // DOM Picks
            var $lrandmeTooltipBtnAddLoyalty = $(
                '.loyaltyLrAndMe_zone_switchHeader'
            );
            var $tooltipLRandMe = $('.tooltip-lrandme');
            var $lrandmeTooltipBtn = $tooltipLRandMe.find('.lr-button');

            // DOM building elements

            // DOM adjustments

            // Private methods

            // var addLoyalty = function () {
            //     model.$eventContainer.trigger(
            //         serviceEvent.addLoyaltyToCartRequested,
            //         [null, { fromHeader: true, componant: 'header' }]
            //     );
            // };

            // Public methods

            // Events
            // if ($('.checkLrAndMeBox').prop('checked') === false) {
            //     $lrandmeTooltipBtnAddLoyalty.on('click', addLoyalty);
            // }

            // model.$eventContainer.on(
            //     serviceEvent.addLoyaltyToCartSucceeded,
            //     function (e, data, providersArgs) {
            //         if (providersArgs && providersArgs.fromHeader) {
            //             $lrandmeTooltipBtn.toggleClass('hidden');
            //             global.Utils.StorageManager.EraseStorageValue(
            //                 'CheckAddLoyalty'
            //             );
            //             if (page.name === global.Utils.Enum.PageName.Basket) {
            //                 $('.loyalty')
            //                     .addClass('load-message')
            //                     .html($('.loyalty-loading').html());
            //                 global.location.reload();
            //             } else {
            //                 global._LaRedoute.updateBasketCountItem();
            //             }
            //         }
            //     }
            // );

            // Init

            me.$lrandmeIcon = $('#icon-lrandme');
            me.$lrandmeTooltip = $('.tooltip-lrandme');
            me.$lrandmeTooltip.addClass($.getHeaderTooltipClasses());
            me.$lrandmeTooltip.tooltip();
            me.$lrandmeIconContainer = me.$lrandmeIcon.parent();

            this.$lrandmeIconContainer
                .on('mouseenter', function () {
                    me.$lrandmeTooltip.tooltip('open');
                })
                .on('mouseleave', function () {
                    me.$lrandmeTooltip.tooltip('close');
                });
        }
    });
})(window, window.jQuery);
;
